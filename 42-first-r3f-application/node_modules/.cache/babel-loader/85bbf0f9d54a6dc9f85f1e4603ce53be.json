{"ast":null,"code":"/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  module.exports = function $$$reconciler($$$hostConfig) {\n    var exports = {};\n    'use strict';\n\n    var React = require('react');\n\n    var Scheduler = require('scheduler');\n\n    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    var suppressWarning = false;\n\n    function setSuppressWarning(newSuppressWarning) {\n      {\n        suppressWarning = newSuppressWarning;\n      }\n    } // In DEV, calls to console.warn and console.error get replaced\n    // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n\n    function warn(format) {\n      {\n        if (!suppressWarning) {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          printWarning('warn', format, args);\n        }\n      }\n    }\n\n    function error(format) {\n      {\n        if (!suppressWarning) {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          printWarning('error', format, args);\n        }\n      }\n    }\n\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n        if (stack !== '') {\n          format += '%s';\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n\n    var assign = Object.assign;\n    /**\n     * `ReactInstanceMap` maintains a mapping from a public facing stateful\n     * instance (key) and the internal representation (value). This allows public\n     * methods to accept the user facing instance as an argument and map them back\n     * to internal methods.\n     *\n     * Note that this module is currently shared and assumed to be stateless.\n     * If this becomes an actual Map, that will break.\n     */\n\n    function get(key) {\n      return key._reactInternals;\n    }\n\n    function set(key, value) {\n      key._reactInternals = value;\n    } // -----------------------------------------------------------------------------\n\n\n    var enablePersistentOffscreenHostContainer = false; // -----------------------------------------------------------------------------\n    // the react-reconciler package.\n\n    var enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\n    var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\n    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\n    var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\n\n    var warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n    // Debugging and DevTools\n    // -----------------------------------------------------------------------------\n    // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n    // for an experimental timeline tool.\n\n    var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\n    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\n    var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\n    var FunctionComponent = 0;\n    var ClassComponent = 1;\n    var IndeterminateComponent = 2; // Before we know whether it is function or class\n\n    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n    var HostComponent = 5;\n    var HostText = 6;\n    var Fragment = 7;\n    var Mode = 8;\n    var ContextConsumer = 9;\n    var ContextProvider = 10;\n    var ForwardRef = 11;\n    var Profiler = 12;\n    var SuspenseComponent = 13;\n    var MemoComponent = 14;\n    var SimpleMemoComponent = 15;\n    var LazyComponent = 16;\n    var IncompleteClassComponent = 17;\n    var DehydratedFragment = 18;\n    var SuspenseListComponent = 19;\n    var ScopeComponent = 21;\n    var OffscreenComponent = 22;\n    var LegacyHiddenComponent = 23;\n    var CacheComponent = 24;\n    var TracingMarkerComponent = 25; // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types.\n\n    var REACT_ELEMENT_TYPE = Symbol.for('react.element');\n    var REACT_PORTAL_TYPE = Symbol.for('react.portal');\n    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n    var REACT_CONTEXT_TYPE = Symbol.for('react.context');\n    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n    var REACT_MEMO_TYPE = Symbol.for('react.memo');\n    var REACT_LAZY_TYPE = Symbol.for('react.lazy');\n    var REACT_SCOPE_TYPE = Symbol.for('react.scope');\n    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\n    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\n    var REACT_CACHE_TYPE = Symbol.for('react.cache');\n    var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== 'object') {\n        return null;\n      }\n\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n      if (typeof maybeIterator === 'function') {\n        return maybeIterator;\n      }\n\n      return null;\n    }\n\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n\n      if (displayName) {\n        return displayName;\n      }\n\n      var functionName = innerType.displayName || innerType.name || '';\n      return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n    } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\n    function getContextName(type) {\n      return type.displayName || 'Context';\n    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n\n      {\n        if (typeof type.tag === 'number') {\n          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n        }\n      }\n\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return 'Fragment';\n\n        case REACT_PORTAL_TYPE:\n          return 'Portal';\n\n        case REACT_PROFILER_TYPE:\n          return 'Profiler';\n\n        case REACT_STRICT_MODE_TYPE:\n          return 'StrictMode';\n\n        case REACT_SUSPENSE_TYPE:\n          return 'Suspense';\n\n        case REACT_SUSPENSE_LIST_TYPE:\n          return 'SuspenseList';\n      }\n\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            return getContextName(context) + '.Consumer';\n\n          case REACT_PROVIDER_TYPE:\n            var provider = type;\n            return getContextName(provider._context) + '.Provider';\n\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName(type, type.render, 'ForwardRef');\n\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n\n            if (outerName !== null) {\n              return outerName;\n            }\n\n            return getComponentNameFromType(type.type) || 'Memo';\n\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n\n              try {\n                return getComponentNameFromType(init(payload));\n              } catch (x) {\n                return null;\n              }\n            }\n          // eslint-disable-next-line no-fallthrough\n        }\n      }\n\n      return null;\n    }\n\n    function getWrappedName$1(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || '';\n      return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n    } // Keep in sync with shared/getComponentNameFromType\n\n\n    function getContextName$1(type) {\n      return type.displayName || 'Context';\n    }\n\n    function getComponentNameFromFiber(fiber) {\n      var tag = fiber.tag,\n          type = fiber.type;\n\n      switch (tag) {\n        case CacheComponent:\n          return 'Cache';\n\n        case ContextConsumer:\n          var context = type;\n          return getContextName$1(context) + '.Consumer';\n\n        case ContextProvider:\n          var provider = type;\n          return getContextName$1(provider._context) + '.Provider';\n\n        case DehydratedFragment:\n          return 'DehydratedFragment';\n\n        case ForwardRef:\n          return getWrappedName$1(type, type.render, 'ForwardRef');\n\n        case Fragment:\n          return 'Fragment';\n\n        case HostComponent:\n          // Host component type is the display name (e.g. \"div\", \"View\")\n          return type;\n\n        case HostPortal:\n          return 'Portal';\n\n        case HostRoot:\n          return 'Root';\n\n        case HostText:\n          return 'Text';\n\n        case LazyComponent:\n          // Name comes from the type in this case; we don't have a tag.\n          return getComponentNameFromType(type);\n\n        case Mode:\n          if (type === REACT_STRICT_MODE_TYPE) {\n            // Don't be less specific than shared/getComponentNameFromType\n            return 'StrictMode';\n          }\n\n          return 'Mode';\n\n        case OffscreenComponent:\n          return 'Offscreen';\n\n        case Profiler:\n          return 'Profiler';\n\n        case ScopeComponent:\n          return 'Scope';\n\n        case SuspenseComponent:\n          return 'Suspense';\n\n        case SuspenseListComponent:\n          return 'SuspenseList';\n\n        case TracingMarkerComponent:\n          return 'TracingMarker';\n        // The display name for this tags come from the user-provided type:\n\n        case ClassComponent:\n        case FunctionComponent:\n        case IncompleteClassComponent:\n        case IndeterminateComponent:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          if (typeof type === 'function') {\n            return type.displayName || type.name || null;\n          }\n\n          if (typeof type === 'string') {\n            return type;\n          }\n\n          break;\n      }\n\n      return null;\n    } // Don't change these two values. They're used by React Dev Tools.\n\n\n    var NoFlags =\n    /*                      */\n    0;\n    var PerformedWork =\n    /*                */\n    1; // You can change the rest (and add more).\n\n    var Placement =\n    /*                    */\n    2;\n    var Update =\n    /*                       */\n    4;\n    var PlacementAndUpdate =\n    /*           */\n    Placement | Update;\n    var ChildDeletion =\n    /*                */\n    16;\n    var ContentReset =\n    /*                 */\n    32;\n    var Callback =\n    /*                     */\n    64;\n    var DidCapture =\n    /*                   */\n    128;\n    var ForceClientRender =\n    /*            */\n    256;\n    var Ref =\n    /*                          */\n    512;\n    var Snapshot =\n    /*                     */\n    1024;\n    var Passive =\n    /*                      */\n    2048;\n    var Hydrating =\n    /*                    */\n    4096;\n    var HydratingAndUpdate =\n    /*           */\n    Hydrating | Update;\n    var Visibility =\n    /*                   */\n    8192;\n    var StoreConsistency =\n    /*             */\n    16384;\n    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\n    var HostEffectMask =\n    /*               */\n    32767; // These are not really side effects, but we still reuse this field.\n\n    var Incomplete =\n    /*                   */\n    32768;\n    var ShouldCapture =\n    /*                */\n    65536;\n    var ForceUpdateForLegacySuspense =\n    /* */\n    131072;\n    var Forked =\n    /*                       */\n    1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n    // This enables us to defer more work in the unmount case,\n    // since we can defer traversing the tree during layout to look for Passive effects,\n    // and instead rely on the static flag as a signal that there may be cleanup work.\n\n    var RefStatic =\n    /*                    */\n    2097152;\n    var LayoutStatic =\n    /*                 */\n    4194304;\n    var PassiveStatic =\n    /*                */\n    8388608; // These flags allow us to traverse to fibers that have effects on mount\n    // without traversing the entire tree after every commit for\n    // double invoking\n\n    var MountLayoutDev =\n    /*               */\n    16777216;\n    var MountPassiveDev =\n    /*              */\n    33554432; // Groups of flags that are used in the commit phase to skip over trees that\n    // don't contain effects, by checking subtreeFlags.\n\n    var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n    // flag logic (see #20043)\n    Update | Snapshot | 0;\n    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\n    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n    // This allows certain concepts to persist without recalculating them,\n    // e.g. whether a subtree contains passive effects or portals.\n\n    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\n    function getNearestMountedFiber(fiber) {\n      var node = fiber;\n      var nearestMounted = fiber;\n\n      if (!fiber.alternate) {\n        // If there is no alternate, this might be a new tree that isn't inserted\n        // yet. If it is, then it will have a pending insertion effect on it.\n        var nextNode = node;\n\n        do {\n          node = nextNode;\n\n          if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n            // This is an insertion or in-progress hydration. The nearest possible\n            // mounted fiber is the parent but we need to continue to figure out\n            // if that one is still mounted.\n            nearestMounted = node.return;\n          }\n\n          nextNode = node.return;\n        } while (nextNode);\n      } else {\n        while (node.return) {\n          node = node.return;\n        }\n      }\n\n      if (node.tag === HostRoot) {\n        // TODO: Check if this was a nested HostRoot when used with\n        // renderContainerIntoSubtree.\n        return nearestMounted;\n      } // If we didn't hit the root, that means that we're in an disconnected tree\n      // that has been unmounted.\n\n\n      return null;\n    }\n\n    function isFiberMounted(fiber) {\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n\n    function isMounted(component) {\n      {\n        var owner = ReactCurrentOwner.current;\n\n        if (owner !== null && owner.tag === ClassComponent) {\n          var ownerFiber = owner;\n          var instance = ownerFiber.stateNode;\n\n          if (!instance._warnedAboutRefsInRender) {\n            error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n          }\n\n          instance._warnedAboutRefsInRender = true;\n        }\n      }\n      var fiber = get(component);\n\n      if (!fiber) {\n        return false;\n      }\n\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n\n    function assertIsMounted(fiber) {\n      if (getNearestMountedFiber(fiber) !== fiber) {\n        throw new Error('Unable to find node on an unmounted component.');\n      }\n    }\n\n    function findCurrentFiberUsingSlowPath(fiber) {\n      var alternate = fiber.alternate;\n\n      if (!alternate) {\n        // If there is no alternate, then we only need to check if it is mounted.\n        var nearestMounted = getNearestMountedFiber(fiber);\n\n        if (nearestMounted === null) {\n          throw new Error('Unable to find node on an unmounted component.');\n        }\n\n        if (nearestMounted !== fiber) {\n          return null;\n        }\n\n        return fiber;\n      } // If we have two possible branches, we'll walk backwards up to the root\n      // to see what path the root points to. On the way we may hit one of the\n      // special cases and we'll deal with them.\n\n\n      var a = fiber;\n      var b = alternate;\n\n      while (true) {\n        var parentA = a.return;\n\n        if (parentA === null) {\n          // We're at the root.\n          break;\n        }\n\n        var parentB = parentA.alternate;\n\n        if (parentB === null) {\n          // There is no alternate. This is an unusual case. Currently, it only\n          // happens when a Suspense component is hidden. An extra fragment fiber\n          // is inserted in between the Suspense fiber and its children. Skip\n          // over this extra fragment fiber and proceed to the next parent.\n          var nextParent = parentA.return;\n\n          if (nextParent !== null) {\n            a = b = nextParent;\n            continue;\n          } // If there's no parent, we're at the root.\n\n\n          break;\n        } // If both copies of the parent fiber point to the same child, we can\n        // assume that the child is current. This happens when we bailout on low\n        // priority: the bailed out fiber's child reuses the current child.\n\n\n        if (parentA.child === parentB.child) {\n          var child = parentA.child;\n\n          while (child) {\n            if (child === a) {\n              // We've determined that A is the current branch.\n              assertIsMounted(parentA);\n              return fiber;\n            }\n\n            if (child === b) {\n              // We've determined that B is the current branch.\n              assertIsMounted(parentA);\n              return alternate;\n            }\n\n            child = child.sibling;\n          } // We should never have an alternate for any mounting node. So the only\n          // way this could possibly happen is if this was unmounted, if at all.\n\n\n          throw new Error('Unable to find node on an unmounted component.');\n        }\n\n        if (a.return !== b.return) {\n          // The return pointer of A and the return pointer of B point to different\n          // fibers. We assume that return pointers never criss-cross, so A must\n          // belong to the child set of A.return, and B must belong to the child\n          // set of B.return.\n          a = parentA;\n          b = parentB;\n        } else {\n          // The return pointers point to the same fiber. We'll have to use the\n          // default, slow path: scan the child sets of each parent alternate to see\n          // which child belongs to which set.\n          //\n          // Search parent A's child set\n          var didFindChild = false;\n          var _child = parentA.child;\n\n          while (_child) {\n            if (_child === a) {\n              didFindChild = true;\n              a = parentA;\n              b = parentB;\n              break;\n            }\n\n            if (_child === b) {\n              didFindChild = true;\n              b = parentA;\n              a = parentB;\n              break;\n            }\n\n            _child = _child.sibling;\n          }\n\n          if (!didFindChild) {\n            // Search parent B's child set\n            _child = parentB.child;\n\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentB;\n                b = parentA;\n                break;\n              }\n\n              if (_child === b) {\n                didFindChild = true;\n                b = parentB;\n                a = parentA;\n                break;\n              }\n\n              _child = _child.sibling;\n            }\n\n            if (!didFindChild) {\n              throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n            }\n          }\n        }\n\n        if (a.alternate !== b) {\n          throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n      } // If the root is not a host container, we're in a disconnected tree. I.e.\n      // unmounted.\n\n\n      if (a.tag !== HostRoot) {\n        throw new Error('Unable to find node on an unmounted component.');\n      }\n\n      if (a.stateNode.current === a) {\n        // We've determined that A is the current branch.\n        return fiber;\n      } // Otherwise B has to be current branch.\n\n\n      return alternate;\n    }\n\n    function findCurrentHostFiber(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n    }\n\n    function findCurrentHostFiberImpl(node) {\n      // Next we'll drill down this component to find the first HostComponent/Text.\n      if (node.tag === HostComponent || node.tag === HostText) {\n        return node;\n      }\n\n      var child = node.child;\n\n      while (child !== null) {\n        var match = findCurrentHostFiberImpl(child);\n\n        if (match !== null) {\n          return match;\n        }\n\n        child = child.sibling;\n      }\n\n      return null;\n    }\n\n    function findCurrentHostFiberWithNoPortals(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n    }\n\n    function findCurrentHostFiberWithNoPortalsImpl(node) {\n      // Next we'll drill down this component to find the first HostComponent/Text.\n      if (node.tag === HostComponent || node.tag === HostText) {\n        return node;\n      }\n\n      var child = node.child;\n\n      while (child !== null) {\n        if (child.tag !== HostPortal) {\n          var match = findCurrentHostFiberWithNoPortalsImpl(child);\n\n          if (match !== null) {\n            return match;\n          }\n        }\n\n        child = child.sibling;\n      }\n\n      return null;\n    }\n\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    } // This is a host config that's used for the `react-reconciler` package on npm.\n    // It is only used by third-party renderers.\n    //\n    // Its API lets you pass the host config as an argument.\n    // However, inside the `react-reconciler` we treat host config as a module.\n    // This file is a shim between two worlds.\n    //\n    // It works because the `react-reconciler` bundle is wrapped in something like:\n    //\n    // module.exports = function ($$$config) {\n    //   /* reconciler code */\n    // }\n    //\n    // So `$$$config` looks like a global variable, but it's\n    // really an argument to a top-level wrapping function.\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n    // eslint-disable-line no-undef\n\n\n    var getPublicInstance = $$$hostConfig.getPublicInstance;\n    var getRootHostContext = $$$hostConfig.getRootHostContext;\n    var getChildHostContext = $$$hostConfig.getChildHostContext;\n    var prepareForCommit = $$$hostConfig.prepareForCommit;\n    var resetAfterCommit = $$$hostConfig.resetAfterCommit;\n    var createInstance = $$$hostConfig.createInstance;\n    var appendInitialChild = $$$hostConfig.appendInitialChild;\n    var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\n    var prepareUpdate = $$$hostConfig.prepareUpdate;\n    var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\n    var createTextInstance = $$$hostConfig.createTextInstance;\n    var scheduleTimeout = $$$hostConfig.scheduleTimeout;\n    var cancelTimeout = $$$hostConfig.cancelTimeout;\n    var noTimeout = $$$hostConfig.noTimeout;\n    var now = $$$hostConfig.now;\n    var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\n    var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\n    var supportsMutation = $$$hostConfig.supportsMutation;\n    var supportsPersistence = $$$hostConfig.supportsPersistence;\n    var supportsHydration = $$$hostConfig.supportsHydration;\n    var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\n    var beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\n    var afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\n    var preparePortalMount = $$$hostConfig.preparePortalMount;\n    var prepareScopeUpdate = $$$hostConfig.preparePortalMount;\n    var getInstanceFromScope = $$$hostConfig.getInstanceFromScope;\n    var getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\n    var detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n    //      Microtasks\n    //     (optional)\n    // -------------------\n\n    var supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\n    var scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n    //      Test selectors\n    //     (optional)\n    // -------------------\n\n    var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\n    var findFiberRoot = $$$hostConfig.findFiberRoot;\n    var getBoundingRect = $$$hostConfig.getBoundingRect;\n    var getTextContent = $$$hostConfig.getTextContent;\n    var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\n    var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\n    var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\n    var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n    //      Mutation\n    //     (optional)\n    // -------------------\n\n    var appendChild = $$$hostConfig.appendChild;\n    var appendChildToContainer = $$$hostConfig.appendChildToContainer;\n    var commitTextUpdate = $$$hostConfig.commitTextUpdate;\n    var commitMount = $$$hostConfig.commitMount;\n    var commitUpdate = $$$hostConfig.commitUpdate;\n    var insertBefore = $$$hostConfig.insertBefore;\n    var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\n    var removeChild = $$$hostConfig.removeChild;\n    var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\n    var resetTextContent = $$$hostConfig.resetTextContent;\n    var hideInstance = $$$hostConfig.hideInstance;\n    var hideTextInstance = $$$hostConfig.hideTextInstance;\n    var unhideInstance = $$$hostConfig.unhideInstance;\n    var unhideTextInstance = $$$hostConfig.unhideTextInstance;\n    var clearContainer = $$$hostConfig.clearContainer; // -------------------\n    //     Persistence\n    //     (optional)\n    // -------------------\n\n    var cloneInstance = $$$hostConfig.cloneInstance;\n    var createContainerChildSet = $$$hostConfig.createContainerChildSet;\n    var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\n    var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\n    var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\n    var getOffscreenContainerType = $$$hostConfig.getOffscreenContainerType;\n    var getOffscreenContainerProps = $$$hostConfig.getOffscreenContainerProps;\n    var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\n    var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n    //     Hydration\n    //     (optional)\n    // -------------------\n\n    var canHydrateInstance = $$$hostConfig.canHydrateInstance;\n    var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\n    var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\n    var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\n    var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\n    var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\n    var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\n    var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\n    var getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\n    var getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\n    var hydrateInstance = $$$hostConfig.hydrateInstance;\n    var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\n    var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\n    var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\n    var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\n    var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\n    var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\n    var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\n    var shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\n    var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\n    var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\n    var didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\n    var didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\n    var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\n    var didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\n    var didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\n    var didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\n    var didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\n    var didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\n    var didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\n    var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\n    var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\n    var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\n    var errorHydratingContainer = $$$hostConfig.errorHydratingContainer; // Helpers to patch console.logs to avoid logging during side-effect free\n    // replaying on render function. This currently only patches the object\n    // lazily which won't cover if the log function was extracted eagerly.\n    // We could also eagerly patch the method.\n\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n\n    function disabledLog() {}\n\n    disabledLog.__reactDisabledLog = true;\n\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          }; // $FlowFixMe Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        disabledDepth++;\n      }\n    }\n\n    function reenableLogs() {\n      {\n        disabledDepth--;\n\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          }; // $FlowFixMe Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        if (disabledDepth < 0) {\n          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n        }\n      }\n    }\n\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n    var prefix;\n\n    function describeBuiltInComponentFrame(name, source, ownerFn) {\n      {\n        if (prefix === undefined) {\n          // Extract the VM specific prefix used by each line.\n          try {\n            throw Error();\n          } catch (x) {\n            var match = x.stack.trim().match(/\\n( *(at )?)/);\n            prefix = match && match[1] || '';\n          }\n        } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n        return '\\n' + prefix + name;\n      }\n    }\n\n    var reentry = false;\n    var componentFrameCache;\n    {\n      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n      componentFrameCache = new PossiblyWeakMap();\n    }\n\n    function describeNativeComponentFrame(fn, construct) {\n      // If something asked for a stack inside a fake render, it should get ignored.\n      if (!fn || reentry) {\n        return '';\n      }\n\n      {\n        var frame = componentFrameCache.get(fn);\n\n        if (frame !== undefined) {\n          return frame;\n        }\n      }\n      var control;\n      reentry = true;\n      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n      Error.prepareStackTrace = undefined;\n      var previousDispatcher;\n      {\n        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n        // for warnings.\n\n        ReactCurrentDispatcher.current = null;\n        disableLogs();\n      }\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            }\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          }\n\n          fn();\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          // This extracts the first frame from the sample that isn't also in the control.\n          // Skipping one frame that we assume is the frame that calls the two.\n          var sampleLines = sample.stack.split('\\n');\n          var controlLines = control.stack.split('\\n');\n          var s = sampleLines.length - 1;\n          var c = controlLines.length - 1;\n\n          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n            // We expect at least one stack frame to be shared.\n            // Typically this will be the root most one. However, stack frames may be\n            // cut off due to maximum stack limits. In this case, one maybe cut off\n            // earlier than the other. We assume that the sample is longer or the same\n            // and there for cut off earlier. So we should find the root most frame in\n            // the sample somewhere in the control.\n            c--;\n          }\n\n          for (; s >= 1 && c >= 0; s--, c--) {\n            // Next we find the first one that isn't the same which should be the\n            // frame that called our sample function and the control.\n            if (sampleLines[s] !== controlLines[c]) {\n              // In V8, the first line is describing the message but other VMs don't.\n              // If we're about to return the first line, and the control is also on the same\n              // line, that's a pretty good indicator that our sample threw at same line as\n              // the control. I.e. before we entered the sample frame. So we ignore this result.\n              // This can happen if you passed a class to function component, or non-function.\n              if (s !== 1 || c !== 1) {\n                do {\n                  s--;\n                  c--; // We may still have similar intermediate frames from the construct call.\n                  // The next one that isn't the same should be our match though.\n\n                  if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                    // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                    var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                    // but we have a user-provided \"displayName\"\n                    // splice it in to make the stack more readable.\n\n\n                    if (fn.displayName && _frame.includes('<anonymous>')) {\n                      _frame = _frame.replace('<anonymous>', fn.displayName);\n                    }\n\n                    {\n                      if (typeof fn === 'function') {\n                        componentFrameCache.set(fn, _frame);\n                      }\n                    } // Return the line we found.\n\n                    return _frame;\n                  }\n                } while (s >= 1 && c >= 0);\n              }\n\n              break;\n            }\n          }\n        }\n      } finally {\n        reentry = false;\n        {\n          ReactCurrentDispatcher.current = previousDispatcher;\n          reenableLogs();\n        }\n        Error.prepareStackTrace = previousPrepareStackTrace;\n      } // Fallback to just using the name if we couldn't make it throw.\n\n\n      var name = fn ? fn.displayName || fn.name : '';\n      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n      {\n        if (typeof fn === 'function') {\n          componentFrameCache.set(fn, syntheticFrame);\n        }\n      }\n      return syntheticFrame;\n    }\n\n    function describeClassComponentFrame(ctor, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(ctor, true);\n      }\n    }\n\n    function describeFunctionComponentFrame(fn, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(fn, false);\n      }\n    }\n\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n\n    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n      if (type == null) {\n        return '';\n      }\n\n      if (typeof type === 'function') {\n        {\n          return describeNativeComponentFrame(type, shouldConstruct(type));\n        }\n      }\n\n      if (typeof type === 'string') {\n        return describeBuiltInComponentFrame(type);\n      }\n\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame('Suspense');\n\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame('SuspenseList');\n      }\n\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return describeFunctionComponentFrame(type.render);\n\n          case REACT_MEMO_TYPE:\n            // Memo may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n\n              try {\n                // Lazy may contain any component type so we recursively resolve it.\n                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n              } catch (x) {}\n            }\n        }\n      }\n\n      return '';\n    }\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var loggedTypeFailures = {};\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\n    function setCurrentlyValidatingElement(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          ReactDebugCurrentFrame.setExtraStackFrame(stack);\n        } else {\n          ReactDebugCurrentFrame.setExtraStackFrame(null);\n        }\n      }\n    }\n\n    function checkPropTypes(typeSpecs, values, location, componentName, element) {\n      {\n        // $FlowFixMe This is okay but Flow doesn't know it.\n        var has = Function.call.bind(hasOwnProperty);\n\n        for (var typeSpecName in typeSpecs) {\n          if (has(typeSpecs, typeSpecName)) {\n            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n            // fail the render phase where it didn't fail before. So we log it.\n            // After these have been cleaned up, we'll let them throw.\n\n            try {\n              // This is intentionally an invariant that gets caught. It's the same\n              // behavior as without this statement except with a better message.\n              if (typeof typeSpecs[typeSpecName] !== 'function') {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n                err.name = 'Invariant Violation';\n                throw err;\n              }\n\n              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n            } catch (ex) {\n              error$1 = ex;\n            }\n\n            if (error$1 && !(error$1 instanceof Error)) {\n              setCurrentlyValidatingElement(element);\n              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n              setCurrentlyValidatingElement(null);\n            }\n\n            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n              // Only monitor this failure once because there tends to be a lot of the\n              // same error.\n              loggedTypeFailures[error$1.message] = true;\n              setCurrentlyValidatingElement(element);\n              error('Failed %s type: %s', location, error$1.message);\n              setCurrentlyValidatingElement(null);\n            }\n          }\n        }\n      }\n    }\n\n    var valueStack = [];\n    var fiberStack;\n    {\n      fiberStack = [];\n    }\n    var index = -1;\n\n    function createCursor(defaultValue) {\n      return {\n        current: defaultValue\n      };\n    }\n\n    function pop(cursor, fiber) {\n      if (index < 0) {\n        {\n          error('Unexpected pop.');\n        }\n        return;\n      }\n\n      {\n        if (fiber !== fiberStack[index]) {\n          error('Unexpected Fiber popped.');\n        }\n      }\n      cursor.current = valueStack[index];\n      valueStack[index] = null;\n      {\n        fiberStack[index] = null;\n      }\n      index--;\n    }\n\n    function push(cursor, value, fiber) {\n      index++;\n      valueStack[index] = cursor.current;\n      {\n        fiberStack[index] = fiber;\n      }\n      cursor.current = value;\n    }\n\n    var warnedAboutMissingGetChildContext;\n    {\n      warnedAboutMissingGetChildContext = {};\n    }\n    var emptyContextObject = {};\n    {\n      Object.freeze(emptyContextObject);\n    } // A cursor to the current merged context object on the stack.\n\n    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\n    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n    // We use this to get access to the parent context after we have already\n    // pushed the next context provider, and now need to merge their contexts.\n\n    var previousContext = emptyContextObject;\n\n    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n      {\n        if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n          // If the fiber is a context provider itself, when we read its context\n          // we may have already pushed its own child context on the stack. A context\n          // provider should not \"see\" its own child context. Therefore we read the\n          // previous (parent) context instead for a context provider.\n          return previousContext;\n        }\n\n        return contextStackCursor.current;\n      }\n    }\n\n    function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n      {\n        var instance = workInProgress.stateNode;\n        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n      }\n    }\n\n    function getMaskedContext(workInProgress, unmaskedContext) {\n      {\n        var type = workInProgress.type;\n        var contextTypes = type.contextTypes;\n\n        if (!contextTypes) {\n          return emptyContextObject;\n        } // Avoid recreating masked context unless unmasked context has changed.\n        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n        // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n        var instance = workInProgress.stateNode;\n\n        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n          return instance.__reactInternalMemoizedMaskedChildContext;\n        }\n\n        var context = {};\n\n        for (var key in contextTypes) {\n          context[key] = unmaskedContext[key];\n        }\n\n        {\n          var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n          checkPropTypes(contextTypes, context, 'context', name);\n        } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n        // Context is created before the class component is instantiated so check for instance.\n\n        if (instance) {\n          cacheContext(workInProgress, unmaskedContext, context);\n        }\n\n        return context;\n      }\n    }\n\n    function hasContextChanged() {\n      {\n        return didPerformWorkStackCursor.current;\n      }\n    }\n\n    function isContextProvider(type) {\n      {\n        var childContextTypes = type.childContextTypes;\n        return childContextTypes !== null && childContextTypes !== undefined;\n      }\n    }\n\n    function popContext(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor, fiber);\n      }\n    }\n\n    function popTopLevelContextObject(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor, fiber);\n      }\n    }\n\n    function pushTopLevelContextObject(fiber, context, didChange) {\n      {\n        if (contextStackCursor.current !== emptyContextObject) {\n          throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        push(contextStackCursor, context, fiber);\n        push(didPerformWorkStackCursor, didChange, fiber);\n      }\n    }\n\n    function processChildContext(fiber, type, parentContext) {\n      {\n        var instance = fiber.stateNode;\n        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n        // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n        if (typeof instance.getChildContext !== 'function') {\n          {\n            var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n            if (!warnedAboutMissingGetChildContext[componentName]) {\n              warnedAboutMissingGetChildContext[componentName] = true;\n              error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n            }\n          }\n          return parentContext;\n        }\n\n        var childContext = instance.getChildContext();\n\n        for (var contextKey in childContext) {\n          if (!(contextKey in childContextTypes)) {\n            throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n          }\n        }\n\n        {\n          var name = getComponentNameFromFiber(fiber) || 'Unknown';\n          checkPropTypes(childContextTypes, childContext, 'child context', name);\n        }\n        return assign({}, parentContext, childContext);\n      }\n    }\n\n    function pushContextProvider(workInProgress) {\n      {\n        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n        // If the instance does not exist yet, we will push null at first,\n        // and replace it on the stack later when invalidating the context.\n\n        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n        previousContext = contextStackCursor.current;\n        push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n        return true;\n      }\n    }\n\n    function invalidateContextProvider(workInProgress, type, didChange) {\n      {\n        var instance = workInProgress.stateNode;\n\n        if (!instance) {\n          throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        if (didChange) {\n          // Merge parent and own context.\n          // Skip this if we're not updating due to sCU.\n          // This avoids unnecessarily recomputing memoized values.\n          var mergedContext = processChildContext(workInProgress, type, previousContext);\n          instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n          // It is important to unwind the context in the reverse order.\n\n          pop(didPerformWorkStackCursor, workInProgress);\n          pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n          push(contextStackCursor, mergedContext, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        } else {\n          pop(didPerformWorkStackCursor, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        }\n      }\n    }\n\n    function findCurrentUnmaskedContext(fiber) {\n      {\n        // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n        // makes sense elsewhere\n        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n          throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        var node = fiber;\n\n        do {\n          switch (node.tag) {\n            case HostRoot:\n              return node.stateNode.context;\n\n            case ClassComponent:\n              {\n                var Component = node.type;\n\n                if (isContextProvider(Component)) {\n                  return node.stateNode.__reactInternalMemoizedMergedChildContext;\n                }\n\n                break;\n              }\n          }\n\n          node = node.return;\n        } while (node !== null);\n\n        throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n    }\n\n    var LegacyRoot = 0;\n    var ConcurrentRoot = 1;\n    var NoMode =\n    /*                         */\n    0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\n    var ConcurrentMode =\n    /*                 */\n    1;\n    var ProfileMode =\n    /*                    */\n    2;\n    var StrictLegacyMode =\n    /*               */\n    8;\n    var StrictEffectsMode =\n    /*              */\n    16; // TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\n    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n    // Based on:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n    var log = Math.log;\n    var LN2 = Math.LN2;\n\n    function clz32Fallback(x) {\n      var asUint = x >>> 0;\n\n      if (asUint === 0) {\n        return 32;\n      }\n\n      return 31 - (log(asUint) / LN2 | 0) | 0;\n    } // If those values are changed that package should be rebuilt and redeployed.\n\n\n    var TotalLanes = 31;\n    var NoLanes =\n    /*                        */\n    0;\n    var NoLane =\n    /*                          */\n    0;\n    var SyncLane =\n    /*                        */\n    1;\n    var InputContinuousHydrationLane =\n    /*    */\n    2;\n    var InputContinuousLane =\n    /*            */\n    4;\n    var DefaultHydrationLane =\n    /*            */\n    8;\n    var DefaultLane =\n    /*                    */\n    16;\n    var TransitionHydrationLane =\n    /*                */\n    32;\n    var TransitionLanes =\n    /*                       */\n    4194240;\n    var TransitionLane1 =\n    /*                        */\n    64;\n    var TransitionLane2 =\n    /*                        */\n    128;\n    var TransitionLane3 =\n    /*                        */\n    256;\n    var TransitionLane4 =\n    /*                        */\n    512;\n    var TransitionLane5 =\n    /*                        */\n    1024;\n    var TransitionLane6 =\n    /*                        */\n    2048;\n    var TransitionLane7 =\n    /*                        */\n    4096;\n    var TransitionLane8 =\n    /*                        */\n    8192;\n    var TransitionLane9 =\n    /*                        */\n    16384;\n    var TransitionLane10 =\n    /*                       */\n    32768;\n    var TransitionLane11 =\n    /*                       */\n    65536;\n    var TransitionLane12 =\n    /*                       */\n    131072;\n    var TransitionLane13 =\n    /*                       */\n    262144;\n    var TransitionLane14 =\n    /*                       */\n    524288;\n    var TransitionLane15 =\n    /*                       */\n    1048576;\n    var TransitionLane16 =\n    /*                       */\n    2097152;\n    var RetryLanes =\n    /*                            */\n    130023424;\n    var RetryLane1 =\n    /*                             */\n    4194304;\n    var RetryLane2 =\n    /*                             */\n    8388608;\n    var RetryLane3 =\n    /*                             */\n    16777216;\n    var RetryLane4 =\n    /*                             */\n    33554432;\n    var RetryLane5 =\n    /*                             */\n    67108864;\n    var SomeRetryLane = RetryLane1;\n    var SelectiveHydrationLane =\n    /*          */\n    134217728;\n    var NonIdleLanes =\n    /*                                 */\n    268435455;\n    var IdleHydrationLane =\n    /*               */\n    268435456;\n    var IdleLane =\n    /*                       */\n    536870912;\n    var OffscreenLane =\n    /*                   */\n    1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n    // It should be kept in sync with the Lanes values above.\n\n    function getLabelForLane(lane) {\n      {\n        if (lane & SyncLane) {\n          return 'Sync';\n        }\n\n        if (lane & InputContinuousHydrationLane) {\n          return 'InputContinuousHydration';\n        }\n\n        if (lane & InputContinuousLane) {\n          return 'InputContinuous';\n        }\n\n        if (lane & DefaultHydrationLane) {\n          return 'DefaultHydration';\n        }\n\n        if (lane & DefaultLane) {\n          return 'Default';\n        }\n\n        if (lane & TransitionHydrationLane) {\n          return 'TransitionHydration';\n        }\n\n        if (lane & TransitionLanes) {\n          return 'Transition';\n        }\n\n        if (lane & RetryLanes) {\n          return 'Retry';\n        }\n\n        if (lane & SelectiveHydrationLane) {\n          return 'SelectiveHydration';\n        }\n\n        if (lane & IdleHydrationLane) {\n          return 'IdleHydration';\n        }\n\n        if (lane & IdleLane) {\n          return 'Idle';\n        }\n\n        if (lane & OffscreenLane) {\n          return 'Offscreen';\n        }\n      }\n    }\n\n    var NoTimestamp = -1;\n    var nextTransitionLane = TransitionLane1;\n    var nextRetryLane = RetryLane1;\n\n    function getHighestPriorityLanes(lanes) {\n      switch (getHighestPriorityLane(lanes)) {\n        case SyncLane:\n          return SyncLane;\n\n        case InputContinuousHydrationLane:\n          return InputContinuousHydrationLane;\n\n        case InputContinuousLane:\n          return InputContinuousLane;\n\n        case DefaultHydrationLane:\n          return DefaultHydrationLane;\n\n        case DefaultLane:\n          return DefaultLane;\n\n        case TransitionHydrationLane:\n          return TransitionHydrationLane;\n\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n        case TransitionLane16:\n          return lanes & TransitionLanes;\n\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n        case RetryLane5:\n          return lanes & RetryLanes;\n\n        case SelectiveHydrationLane:\n          return SelectiveHydrationLane;\n\n        case IdleHydrationLane:\n          return IdleHydrationLane;\n\n        case IdleLane:\n          return IdleLane;\n\n        case OffscreenLane:\n          return OffscreenLane;\n\n        default:\n          {\n            error('Should have found matching lanes. This is a bug in React.');\n          } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n          return lanes;\n      }\n    }\n\n    function getNextLanes(root, wipLanes) {\n      // Early bailout if there's no pending work left.\n      var pendingLanes = root.pendingLanes;\n\n      if (pendingLanes === NoLanes) {\n        return NoLanes;\n      }\n\n      var nextLanes = NoLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n      // even if the work is suspended.\n\n      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n      if (nonIdlePendingLanes !== NoLanes) {\n        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n        if (nonIdleUnblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        } else {\n          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n          if (nonIdlePingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          }\n        }\n      } else {\n        // The only remaining work is Idle.\n        var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n        if (unblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(unblockedLanes);\n        } else {\n          if (pingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(pingedLanes);\n          }\n        }\n      }\n\n      if (nextLanes === NoLanes) {\n        // This should only be reachable if we're suspended\n        // TODO: Consider warning in this path if a fallback timer is not scheduled.\n        return NoLanes;\n      } // If we're already in the middle of a render, switching lanes will interrupt\n      // it and we'll lose our progress. We should only do this if the new lanes are\n      // higher priority.\n\n\n      if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n      // bother waiting until the root is complete.\n      (wipLanes & suspendedLanes) === NoLanes) {\n        var nextLane = getHighestPriorityLane(nextLanes);\n        var wipLane = getHighestPriorityLane(wipLanes);\n\n        if ( // Tests whether the next lane is equal or lower priority than the wip\n        // one. This works because the bits decrease in priority as you go left.\n        nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n        // only difference between default updates and transition updates is that\n        // default updates do not support refresh transitions.\n        nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n          // Keep working on the existing in-progress tree. Do not interrupt.\n          return wipLanes;\n        }\n      }\n\n      if ((nextLanes & InputContinuousLane) !== NoLanes) {\n        // When updates are sync by default, we entangle continuous priority updates\n        // and default updates, so they render in the same batch. The only reason\n        // they use separate lanes is because continuous updates should interrupt\n        // transitions, but default updates should not.\n        nextLanes |= pendingLanes & DefaultLane;\n      } // Check for entangled lanes and add them to the batch.\n      //\n      // A lane is said to be entangled with another when it's not allowed to render\n      // in a batch that does not also include the other lane. Typically we do this\n      // when multiple updates have the same source, and we only want to respond to\n      // the most recent event from that source.\n      //\n      // Note that we apply entanglements *after* checking for partial work above.\n      // This means that if a lane is entangled during an interleaved event while\n      // it's already rendering, we won't interrupt it. This is intentional, since\n      // entanglement is usually \"best effort\": we'll try our best to render the\n      // lanes in the same batch, but it's not worth throwing out partially\n      // completed work in order to do it.\n      // TODO: Reconsider this. The counter-argument is that the partial work\n      // represents an intermediate state, which we don't want to show to the user.\n      // And by spending extra time finishing it, we're increasing the amount of\n      // time it takes to show the final state, which is what they are actually\n      // waiting for.\n      //\n      // For those exceptions where entanglement is semantically important, like\n      // useMutableSource, we should ensure that there is no partial work at the\n      // time we apply the entanglement.\n\n\n      var entangledLanes = root.entangledLanes;\n\n      if (entangledLanes !== NoLanes) {\n        var entanglements = root.entanglements;\n        var lanes = nextLanes & entangledLanes;\n\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          nextLanes |= entanglements[index];\n          lanes &= ~lane;\n        }\n      }\n\n      return nextLanes;\n    }\n\n    function getMostRecentEventTime(root, lanes) {\n      var eventTimes = root.eventTimes;\n      var mostRecentEventTime = NoTimestamp;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var eventTime = eventTimes[index];\n\n        if (eventTime > mostRecentEventTime) {\n          mostRecentEventTime = eventTime;\n        }\n\n        lanes &= ~lane;\n      }\n\n      return mostRecentEventTime;\n    }\n\n    function computeExpirationTime(lane, currentTime) {\n      switch (lane) {\n        case SyncLane:\n        case InputContinuousHydrationLane:\n        case InputContinuousLane:\n          // User interactions should expire slightly more quickly.\n          //\n          // NOTE: This is set to the corresponding constant as in Scheduler.js.\n          // When we made it larger, a product metric in www regressed, suggesting\n          // there's a user interaction that's being starved by a series of\n          // synchronous updates. If that theory is correct, the proper solution is\n          // to fix the starvation. However, this scenario supports the idea that\n          // expiration times are an important safeguard when starvation\n          // does happen.\n          return currentTime + 250;\n\n        case DefaultHydrationLane:\n        case DefaultLane:\n        case TransitionHydrationLane:\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n        case TransitionLane16:\n          return currentTime + 5000;\n\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n        case RetryLane5:\n          // TODO: Retries should be allowed to expire if they are CPU bound for\n          // too long, but when I made this change it caused a spike in browser\n          // crashes. There must be some other underlying bug; not super urgent but\n          // ideally should figure out why and fix it. Unfortunately we don't have\n          // a repro for the crashes, only detected via production metrics.\n          return NoTimestamp;\n\n        case SelectiveHydrationLane:\n        case IdleHydrationLane:\n        case IdleLane:\n        case OffscreenLane:\n          // Anything idle priority or lower should never expire.\n          return NoTimestamp;\n\n        default:\n          {\n            error('Should have found matching lanes. This is a bug in React.');\n          }\n          return NoTimestamp;\n      }\n    }\n\n    function markStarvedLanesAsExpired(root, currentTime) {\n      // TODO: This gets called every time we yield. We can optimize by storing\n      // the earliest expiration time on the root. Then use that to quickly bail out\n      // of this function.\n      var pendingLanes = root.pendingLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n      // expiration time. If so, we'll assume the update is being starved and mark\n      // it as expired to force it to finish.\n\n      var lanes = pendingLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var expirationTime = expirationTimes[index];\n\n        if (expirationTime === NoTimestamp) {\n          // Found a pending lane with no expiration time. If it's not suspended, or\n          // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n          // using the current time.\n          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n            // Assumes timestamps are monotonically increasing.\n            expirationTimes[index] = computeExpirationTime(lane, currentTime);\n          }\n        } else if (expirationTime <= currentTime) {\n          // This lane expired\n          root.expiredLanes |= lane;\n        }\n\n        lanes &= ~lane;\n      }\n    } // This returns the highest priority pending lanes regardless of whether they\n    // are suspended.\n\n\n    function getHighestPriorityPendingLanes(root) {\n      return getHighestPriorityLanes(root.pendingLanes);\n    }\n\n    function getLanesToRetrySynchronouslyOnError(root) {\n      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n      if (everythingButOffscreen !== NoLanes) {\n        return everythingButOffscreen;\n      }\n\n      if (everythingButOffscreen & OffscreenLane) {\n        return OffscreenLane;\n      }\n\n      return NoLanes;\n    }\n\n    function includesSyncLane(lanes) {\n      return (lanes & SyncLane) !== NoLanes;\n    }\n\n    function includesNonIdleWork(lanes) {\n      return (lanes & NonIdleLanes) !== NoLanes;\n    }\n\n    function includesOnlyRetries(lanes) {\n      return (lanes & RetryLanes) === lanes;\n    }\n\n    function includesOnlyTransitions(lanes) {\n      return (lanes & TransitionLanes) === lanes;\n    }\n\n    function includesBlockingLane(root, lanes) {\n      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n      return (lanes & SyncDefaultLanes) !== NoLanes;\n    }\n\n    function includesExpiredLane(root, lanes) {\n      // This is a separate check from includesBlockingLane because a lane can\n      // expire after a render has already started.\n      return (lanes & root.expiredLanes) !== NoLanes;\n    }\n\n    function isTransitionLane(lane) {\n      return (lane & TransitionLanes) !== 0;\n    }\n\n    function claimNextTransitionLane() {\n      // Cycle through the lanes, assigning each new transition to the next lane.\n      // In most cases, this means every transition gets its own lane, until we\n      // run out of lanes and cycle back to the beginning.\n      var lane = nextTransitionLane;\n      nextTransitionLane <<= 1;\n\n      if ((nextTransitionLane & TransitionLanes) === 0) {\n        nextTransitionLane = TransitionLane1;\n      }\n\n      return lane;\n    }\n\n    function claimNextRetryLane() {\n      var lane = nextRetryLane;\n      nextRetryLane <<= 1;\n\n      if ((nextRetryLane & RetryLanes) === 0) {\n        nextRetryLane = RetryLane1;\n      }\n\n      return lane;\n    }\n\n    function getHighestPriorityLane(lanes) {\n      return lanes & -lanes;\n    }\n\n    function pickArbitraryLane(lanes) {\n      // This wrapper function gets inlined. Only exists so to communicate that it\n      // doesn't matter which bit is selected; you can pick any bit without\n      // affecting the algorithms where its used. Here I'm using\n      // getHighestPriorityLane because it requires the fewest operations.\n      return getHighestPriorityLane(lanes);\n    }\n\n    function pickArbitraryLaneIndex(lanes) {\n      return 31 - clz32(lanes);\n    }\n\n    function laneToIndex(lane) {\n      return pickArbitraryLaneIndex(lane);\n    }\n\n    function includesSomeLane(a, b) {\n      return (a & b) !== NoLanes;\n    }\n\n    function isSubsetOfLanes(set, subset) {\n      return (set & subset) === subset;\n    }\n\n    function mergeLanes(a, b) {\n      return a | b;\n    }\n\n    function removeLanes(set, subset) {\n      return set & ~subset;\n    }\n\n    function intersectLanes(a, b) {\n      return a & b;\n    } // Seems redundant, but it changes the type from a single lane (used for\n    // updates) to a group of lanes (used for flushing work).\n\n\n    function laneToLanes(lane) {\n      return lane;\n    }\n\n    function higherPriorityLane(a, b) {\n      // This works because the bit ranges decrease in priority as you go left.\n      return a !== NoLane && a < b ? a : b;\n    }\n\n    function createLaneMap(initial) {\n      // Intentionally pushing one by one.\n      // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n      var laneMap = [];\n\n      for (var i = 0; i < TotalLanes; i++) {\n        laneMap.push(initial);\n      }\n\n      return laneMap;\n    }\n\n    function markRootUpdated(root, updateLane, eventTime) {\n      root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n      // could unblock them. Clear the suspended lanes so that we can try rendering\n      // them again.\n      //\n      // TODO: We really only need to unsuspend only lanes that are in the\n      // `subtreeLanes` of the updated fiber, or the update lanes of the return\n      // path. This would exclude suspended updates in an unrelated sibling tree,\n      // since there's no way for this update to unblock it.\n      //\n      // We don't do this if the incoming update is idle, because we never process\n      // idle updates until after all the regular updates have finished; there's no\n      // way it could unblock a transition.\n\n      if (updateLane !== IdleLane) {\n        root.suspendedLanes = NoLanes;\n        root.pingedLanes = NoLanes;\n      }\n\n      var eventTimes = root.eventTimes;\n      var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n      // recent event, and we assume time is monotonically increasing.\n\n      eventTimes[index] = eventTime;\n    }\n\n    function markRootSuspended(root, suspendedLanes) {\n      root.suspendedLanes |= suspendedLanes;\n      root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n      var expirationTimes = root.expirationTimes;\n      var lanes = suspendedLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n    }\n\n    function markRootPinged(root, pingedLanes, eventTime) {\n      root.pingedLanes |= root.suspendedLanes & pingedLanes;\n    }\n\n    function markRootFinished(root, remainingLanes) {\n      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n      root.pendingLanes = remainingLanes; // Let's try everything again\n\n      root.suspendedLanes = 0;\n      root.pingedLanes = 0;\n      root.expiredLanes &= remainingLanes;\n      root.mutableReadLanes &= remainingLanes;\n      root.entangledLanes &= remainingLanes;\n      var entanglements = root.entanglements;\n      var eventTimes = root.eventTimes;\n      var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n      var lanes = noLongerPendingLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        entanglements[index] = NoLanes;\n        eventTimes[index] = NoTimestamp;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n    }\n\n    function markRootEntangled(root, entangledLanes) {\n      // In addition to entangling each of the given lanes with each other, we also\n      // have to consider _transitive_ entanglements. For each lane that is already\n      // entangled with *any* of the given lanes, that lane is now transitively\n      // entangled with *all* the given lanes.\n      //\n      // Translated: If C is entangled with A, then entangling A with B also\n      // entangles C with B.\n      //\n      // If this is hard to grasp, it might help to intentionally break this\n      // function and look at the tests that fail in ReactTransition-test.js. Try\n      // commenting out one of the conditions below.\n      var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n      var entanglements = root.entanglements;\n      var lanes = rootEntangledLanes;\n\n      while (lanes) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n\n        if ( // Is this one of the newly entangled lanes?\n        lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n        entanglements[index] & entangledLanes) {\n          entanglements[index] |= entangledLanes;\n        }\n\n        lanes &= ~lane;\n      }\n    }\n\n    function getBumpedLaneForHydration(root, renderLanes) {\n      var renderLane = getHighestPriorityLane(renderLanes);\n      var lane;\n\n      switch (renderLane) {\n        case InputContinuousLane:\n          lane = InputContinuousHydrationLane;\n          break;\n\n        case DefaultLane:\n          lane = DefaultHydrationLane;\n          break;\n\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n        case TransitionLane16:\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n        case RetryLane5:\n          lane = TransitionHydrationLane;\n          break;\n\n        case IdleLane:\n          lane = IdleHydrationLane;\n          break;\n\n        default:\n          // Everything else is already either a hydration lane, or shouldn't\n          // be retried at a hydration lane.\n          lane = NoLane;\n          break;\n      } // Check if the lane we chose is suspended. If so, that indicates that we\n      // already attempted and failed to hydrate at that level. Also check if we're\n      // already rendering that lane, which is rare but could happen.\n\n\n      if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n        // Give up trying to hydrate and fall back to client render.\n        return NoLane;\n      }\n\n      return lane;\n    }\n\n    function addFiberToLanesMap(root, fiber, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        updaters.add(fiber);\n        lanes &= ~lane;\n      }\n    }\n\n    function movePendingFibersToMemoized(root, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      var memoizedUpdaters = root.memoizedUpdaters;\n\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n\n        if (updaters.size > 0) {\n          updaters.forEach(function (fiber) {\n            var alternate = fiber.alternate;\n\n            if (alternate === null || !memoizedUpdaters.has(alternate)) {\n              memoizedUpdaters.add(fiber);\n            }\n          });\n          updaters.clear();\n        }\n\n        lanes &= ~lane;\n      }\n    }\n\n    var DiscreteEventPriority = SyncLane;\n    var ContinuousEventPriority = InputContinuousLane;\n    var DefaultEventPriority = DefaultLane;\n    var IdleEventPriority = IdleLane;\n    var currentUpdatePriority = NoLane;\n\n    function getCurrentUpdatePriority() {\n      return currentUpdatePriority;\n    }\n\n    function setCurrentUpdatePriority(newPriority) {\n      currentUpdatePriority = newPriority;\n    }\n\n    function runWithPriority(priority, fn) {\n      var previousPriority = currentUpdatePriority;\n\n      try {\n        currentUpdatePriority = priority;\n        return fn();\n      } finally {\n        currentUpdatePriority = previousPriority;\n      }\n    }\n\n    function higherEventPriority(a, b) {\n      return a !== 0 && a < b ? a : b;\n    }\n\n    function lowerEventPriority(a, b) {\n      return a === 0 || a > b ? a : b;\n    }\n\n    function isHigherEventPriority(a, b) {\n      return a !== 0 && a < b;\n    }\n\n    function lanesToEventPriority(lanes) {\n      var lane = getHighestPriorityLane(lanes);\n\n      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n        return DiscreteEventPriority;\n      }\n\n      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n        return ContinuousEventPriority;\n      }\n\n      if (includesNonIdleWork(lane)) {\n        return DefaultEventPriority;\n      }\n\n      return IdleEventPriority;\n    } // This module only exists as an ESM wrapper around the external CommonJS\n\n\n    var scheduleCallback = Scheduler.unstable_scheduleCallback;\n    var cancelCallback = Scheduler.unstable_cancelCallback;\n    var shouldYield = Scheduler.unstable_shouldYield;\n    var requestPaint = Scheduler.unstable_requestPaint;\n    var now$1 = Scheduler.unstable_now;\n    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n    var NormalPriority = Scheduler.unstable_NormalPriority;\n    var IdlePriority = Scheduler.unstable_IdlePriority; // this doesn't actually exist on the scheduler, but it *does*\n    // on scheduler/unstable_mock, which we'll need for internal testing\n\n    var unstable_yieldValue = Scheduler.unstable_yieldValue;\n    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n    var rendererID = null;\n    var injectedHook = null;\n    var injectedProfilingHooks = null;\n    var hasLoggedError = false;\n    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\n    function injectInternals(internals) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n        // No DevTools\n        return false;\n      }\n\n      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n      if (hook.isDisabled) {\n        // This isn't a real property on the hook, but it can be set to opt out\n        // of DevTools integration and associated warnings and logs.\n        // https://github.com/facebook/react/issues/3877\n        return true;\n      }\n\n      if (!hook.supportsFiber) {\n        {\n          error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n        } // DevTools exists, even though it doesn't support Fiber.\n\n        return true;\n      }\n\n      try {\n        if (enableSchedulingProfiler) {\n          // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n          // This gives DevTools a way to feature detect that isn't tied to version number\n          // (since profiling and timeline are controlled by different feature flags).\n          internals = assign({}, internals, {\n            getLaneLabelMap: getLaneLabelMap,\n            injectProfilingHooks: injectProfilingHooks\n          });\n        }\n\n        rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n        injectedHook = hook;\n      } catch (err) {\n        // Catch all errors because it is unsafe to throw during initialization.\n        {\n          error('React instrumentation encountered an error: %s.', err);\n        }\n      }\n\n      if (hook.checkDCE) {\n        // This is the real DevTools.\n        return true;\n      } else {\n        // This is likely a hook installed by Fast Refresh runtime.\n        return false;\n      }\n    }\n\n    function onScheduleRoot(root, children) {\n      {\n        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n          try {\n            injectedHook.onScheduleFiberRoot(rendererID, root, children);\n          } catch (err) {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n\n    function onCommitRoot(root, eventPriority) {\n      if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n        try {\n          var didError = (root.current.flags & DidCapture) === DidCapture;\n\n          if (enableProfilerTimer) {\n            var schedulerPriority;\n\n            switch (eventPriority) {\n              case DiscreteEventPriority:\n                schedulerPriority = ImmediatePriority;\n                break;\n\n              case ContinuousEventPriority:\n                schedulerPriority = UserBlockingPriority;\n                break;\n\n              case DefaultEventPriority:\n                schedulerPriority = NormalPriority;\n                break;\n\n              case IdleEventPriority:\n                schedulerPriority = IdlePriority;\n                break;\n\n              default:\n                schedulerPriority = NormalPriority;\n                break;\n            }\n\n            injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n          } else {\n            injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n          }\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n\n    function onPostCommitRoot(root) {\n      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n        try {\n          injectedHook.onPostCommitFiberRoot(rendererID, root);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n\n    function onCommitUnmount(fiber) {\n      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n        try {\n          injectedHook.onCommitFiberUnmount(rendererID, fiber);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n\n    function setIsStrictModeForDevtools(newIsStrictMode) {\n      {\n        if (typeof unstable_yieldValue === 'function') {\n          // We're in a test because Scheduler.unstable_yieldValue only exists\n          // in SchedulerMock. To reduce the noise in strict mode tests,\n          // suppress warnings and disable scheduler yielding during the double render\n          unstable_setDisableYieldValue(newIsStrictMode);\n          setSuppressWarning(newIsStrictMode);\n        }\n\n        if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n          try {\n            injectedHook.setStrictMode(rendererID, newIsStrictMode);\n          } catch (err) {\n            {\n              if (!hasLoggedError) {\n                hasLoggedError = true;\n                error('React instrumentation encountered an error: %s', err);\n              }\n            }\n          }\n        }\n      }\n    } // Profiler API hooks\n\n\n    function injectProfilingHooks(profilingHooks) {\n      injectedProfilingHooks = profilingHooks;\n    }\n\n    function getLaneLabelMap() {\n      {\n        var map = new Map();\n        var lane = 1;\n\n        for (var index = 0; index < TotalLanes; index++) {\n          var label = getLabelForLane(lane);\n          map.set(lane, label);\n          lane *= 2;\n        }\n\n        return map;\n      }\n    }\n\n    function markCommitStarted(lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n          injectedProfilingHooks.markCommitStarted(lanes);\n        }\n      }\n    }\n\n    function markCommitStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n          injectedProfilingHooks.markCommitStopped();\n        }\n      }\n    }\n\n    function markComponentRenderStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n          injectedProfilingHooks.markComponentRenderStarted(fiber);\n        }\n      }\n    }\n\n    function markComponentRenderStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n          injectedProfilingHooks.markComponentRenderStopped();\n        }\n      }\n    }\n\n    function markComponentPassiveEffectMountStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n          injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n        }\n      }\n    }\n\n    function markComponentPassiveEffectMountStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n          injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n        }\n      }\n    }\n\n    function markComponentPassiveEffectUnmountStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n          injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n        }\n      }\n    }\n\n    function markComponentPassiveEffectUnmountStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n          injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n        }\n      }\n    }\n\n    function markComponentLayoutEffectMountStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n          injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n        }\n      }\n    }\n\n    function markComponentLayoutEffectMountStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n          injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n        }\n      }\n    }\n\n    function markComponentLayoutEffectUnmountStarted(fiber) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n          injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n        }\n      }\n    }\n\n    function markComponentLayoutEffectUnmountStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n          injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n        }\n      }\n    }\n\n    function markComponentErrored(fiber, thrownValue, lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n          injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n        }\n      }\n    }\n\n    function markComponentSuspended(fiber, wakeable, lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n          injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n        }\n      }\n    }\n\n    function markLayoutEffectsStarted(lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n          injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n        }\n      }\n    }\n\n    function markLayoutEffectsStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n          injectedProfilingHooks.markLayoutEffectsStopped();\n        }\n      }\n    }\n\n    function markPassiveEffectsStarted(lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n          injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n        }\n      }\n    }\n\n    function markPassiveEffectsStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n          injectedProfilingHooks.markPassiveEffectsStopped();\n        }\n      }\n    }\n\n    function markRenderStarted(lanes) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n          injectedProfilingHooks.markRenderStarted(lanes);\n        }\n      }\n    }\n\n    function markRenderYielded() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n          injectedProfilingHooks.markRenderYielded();\n        }\n      }\n    }\n\n    function markRenderStopped() {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n          injectedProfilingHooks.markRenderStopped();\n        }\n      }\n    }\n\n    function markRenderScheduled(lane) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n          injectedProfilingHooks.markRenderScheduled(lane);\n        }\n      }\n    }\n\n    function markForceUpdateScheduled(fiber, lane) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n          injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n        }\n      }\n    }\n\n    function markStateUpdateScheduled(fiber, lane) {\n      {\n        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n          injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n        }\n      }\n    }\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n\n\n    function is(x, y) {\n      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n      ;\n    }\n\n    var objectIs = typeof Object.is === 'function' ? Object.is : is;\n    var syncQueue = null;\n    var includesLegacySyncCallbacks = false;\n    var isFlushingSyncQueue = false;\n\n    function scheduleSyncCallback(callback) {\n      // Push this callback into an internal queue. We'll flush these either in\n      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n      if (syncQueue === null) {\n        syncQueue = [callback];\n      } else {\n        // Push onto existing queue. Don't need to schedule a callback because\n        // we already scheduled one when we created the queue.\n        syncQueue.push(callback);\n      }\n    }\n\n    function scheduleLegacySyncCallback(callback) {\n      includesLegacySyncCallbacks = true;\n      scheduleSyncCallback(callback);\n    }\n\n    function flushSyncCallbacksOnlyInLegacyMode() {\n      // Only flushes the queue if there's a legacy sync callback scheduled.\n      // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n      // it might make more sense for the queue to be a list of roots instead of a\n      // list of generic callbacks. Then we can have two: one for legacy roots, one\n      // for concurrent roots. And this method would only flush the legacy ones.\n      if (includesLegacySyncCallbacks) {\n        flushSyncCallbacks();\n      }\n    }\n\n    function flushSyncCallbacks() {\n      if (!isFlushingSyncQueue && syncQueue !== null) {\n        // Prevent re-entrance.\n        isFlushingSyncQueue = true;\n        var i = 0;\n        var previousUpdatePriority = getCurrentUpdatePriority();\n\n        try {\n          var isSync = true;\n          var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n          // queue is in the render or commit phases.\n\n          setCurrentUpdatePriority(DiscreteEventPriority);\n\n          for (; i < queue.length; i++) {\n            var callback = queue[i];\n\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n\n          syncQueue = null;\n          includesLegacySyncCallbacks = false;\n        } catch (error) {\n          // If something throws, leave the remaining callbacks on the queue.\n          if (syncQueue !== null) {\n            syncQueue = syncQueue.slice(i + 1);\n          } // Resume flushing in the next tick\n\n\n          scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n          throw error;\n        } finally {\n          setCurrentUpdatePriority(previousUpdatePriority);\n          isFlushingSyncQueue = false;\n        }\n      }\n\n      return null;\n    } // This is imported by the event replaying implementation in React DOM. It's\n    // in a separate file to break a circular dependency between the renderer and\n    // the reconciler.\n\n\n    function isRootDehydrated(root) {\n      var currentState = root.current.memoizedState;\n      return currentState.isDehydrated;\n    }\n\n    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\n    var NoTransition = null;\n\n    function requestCurrentTransition() {\n      return ReactCurrentBatchConfig.transition;\n    }\n    /**\n     * Performs equality by iterating through keys on an object and returning false\n     * when any key has values which are not strictly equal between the arguments.\n     * Returns true when the values of all keys are strictly equal.\n     */\n\n\n    function shallowEqual(objA, objB) {\n      if (objectIs(objA, objB)) {\n        return true;\n      }\n\n      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n        return false;\n      }\n\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n\n      if (keysA.length !== keysB.length) {\n        return false;\n      } // Test for A's keys different from B.\n\n\n      for (var i = 0; i < keysA.length; i++) {\n        var currentKey = keysA[i];\n\n        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function describeFiber(fiber) {\n      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;\n      var source = fiber._debugSource;\n\n      switch (fiber.tag) {\n        case HostComponent:\n          return describeBuiltInComponentFrame(fiber.type);\n\n        case LazyComponent:\n          return describeBuiltInComponentFrame('Lazy');\n\n        case SuspenseComponent:\n          return describeBuiltInComponentFrame('Suspense');\n\n        case SuspenseListComponent:\n          return describeBuiltInComponentFrame('SuspenseList');\n\n        case FunctionComponent:\n        case IndeterminateComponent:\n        case SimpleMemoComponent:\n          return describeFunctionComponentFrame(fiber.type);\n\n        case ForwardRef:\n          return describeFunctionComponentFrame(fiber.type.render);\n\n        case ClassComponent:\n          return describeClassComponentFrame(fiber.type);\n\n        default:\n          return '';\n      }\n    }\n\n    function getStackByFiberInDevAndProd(workInProgress) {\n      try {\n        var info = '';\n        var node = workInProgress;\n\n        do {\n          info += describeFiber(node);\n          node = node.return;\n        } while (node);\n\n        return info;\n      } catch (x) {\n        return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n      }\n    }\n\n    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n    var current = null;\n    var isRendering = false;\n\n    function getCurrentFiberOwnerNameInDevOrNull() {\n      {\n        if (current === null) {\n          return null;\n        }\n\n        var owner = current._debugOwner;\n\n        if (owner !== null && typeof owner !== 'undefined') {\n          return getComponentNameFromFiber(owner);\n        }\n      }\n      return null;\n    }\n\n    function getCurrentFiberStackInDev() {\n      {\n        if (current === null) {\n          return '';\n        } // Safe because if current fiber exists, we are reconciling,\n        // and it is guaranteed to be the work-in-progress version.\n\n\n        return getStackByFiberInDevAndProd(current);\n      }\n    }\n\n    function resetCurrentFiber() {\n      {\n        ReactDebugCurrentFrame$1.getCurrentStack = null;\n        current = null;\n        isRendering = false;\n      }\n    }\n\n    function setCurrentFiber(fiber) {\n      {\n        ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;\n        current = fiber;\n        isRendering = false;\n      }\n    }\n\n    function setIsRendering(rendering) {\n      {\n        isRendering = rendering;\n      }\n    }\n\n    var ReactStrictModeWarnings = {\n      recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n      flushPendingUnsafeLifecycleWarnings: function () {},\n      recordLegacyContextWarning: function (fiber, instance) {},\n      flushLegacyContextWarning: function () {},\n      discardPendingWarnings: function () {}\n    };\n    {\n      var findStrictRoot = function (fiber) {\n        var maybeStrictRoot = null;\n        var node = fiber;\n\n        while (node !== null) {\n          if (node.mode & StrictLegacyMode) {\n            maybeStrictRoot = node;\n          }\n\n          node = node.return;\n        }\n\n        return maybeStrictRoot;\n      };\n\n      var setToSortedString = function (set) {\n        var array = [];\n        set.forEach(function (value) {\n          array.push(value);\n        });\n        return array.sort().join(', ');\n      };\n\n      var pendingComponentWillMountWarnings = [];\n      var pendingUNSAFE_ComponentWillMountWarnings = [];\n      var pendingComponentWillReceivePropsWarnings = [];\n      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n      var pendingComponentWillUpdateWarnings = [];\n      var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n      var didWarnAboutUnsafeLifecycles = new Set();\n\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n        // Dedupe strategy: Warn once per component.\n        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n          return;\n        }\n\n        if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n        instance.componentWillMount.__suppressDeprecationWarning !== true) {\n          pendingComponentWillMountWarnings.push(fiber);\n        }\n\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n        }\n\n        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n          pendingComponentWillReceivePropsWarnings.push(fiber);\n        }\n\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n        }\n\n        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n          pendingComponentWillUpdateWarnings.push(fiber);\n        }\n\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n        }\n      };\n\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n        // We do an initial pass to gather component names\n        var componentWillMountUniqueNames = new Set();\n\n        if (pendingComponentWillMountWarnings.length > 0) {\n          pendingComponentWillMountWarnings.forEach(function (fiber) {\n            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillMountWarnings = [];\n        }\n\n        var UNSAFE_componentWillMountUniqueNames = new Set();\n\n        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillMountWarnings = [];\n        }\n\n        var componentWillReceivePropsUniqueNames = new Set();\n\n        if (pendingComponentWillReceivePropsWarnings.length > 0) {\n          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillReceivePropsWarnings = [];\n        }\n\n        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        }\n\n        var componentWillUpdateUniqueNames = new Set();\n\n        if (pendingComponentWillUpdateWarnings.length > 0) {\n          pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillUpdateWarnings = [];\n        }\n\n        var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        } // Finally, we flush all the warnings\n        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n        if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n          error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n        }\n\n        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n          error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n        }\n\n        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n          error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n        }\n\n        if (componentWillMountUniqueNames.size > 0) {\n          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n          warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n        }\n\n        if (componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n          warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n        }\n\n        if (componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n          warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n        }\n      };\n\n      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n      var didWarnAboutLegacyContext = new Set();\n\n      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n        var strictRoot = findStrictRoot(fiber);\n\n        if (strictRoot === null) {\n          error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n          return;\n        } // Dedup strategy: Warn once per component.\n\n\n        if (didWarnAboutLegacyContext.has(fiber.type)) {\n          return;\n        }\n\n        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n          if (warningsForRoot === undefined) {\n            warningsForRoot = [];\n            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n          }\n\n          warningsForRoot.push(fiber);\n        }\n      };\n\n      ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n          if (fiberArray.length === 0) {\n            return;\n          }\n\n          var firstFiber = fiberArray[0];\n          var uniqueNames = new Set();\n          fiberArray.forEach(function (fiber) {\n            uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutLegacyContext.add(fiber.type);\n          });\n          var sortedNames = setToSortedString(uniqueNames);\n\n          try {\n            setCurrentFiber(firstFiber);\n            error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n          } finally {\n            resetCurrentFiber();\n          }\n        });\n      };\n\n      ReactStrictModeWarnings.discardPendingWarnings = function () {\n        pendingComponentWillMountWarnings = [];\n        pendingUNSAFE_ComponentWillMountWarnings = [];\n        pendingComponentWillReceivePropsWarnings = [];\n        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        pendingComponentWillUpdateWarnings = [];\n        pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        pendingLegacyContextWarning = new Map();\n      };\n    }\n    /*\n     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n     *\n     * The functions in this module will throw an easier-to-understand,\n     * easier-to-debug exception with a clear errors message message explaining the\n     * problem. (Instead of a confusing exception thrown inside the implementation\n     * of the `value` object).\n     */\n    // $FlowFixMe only called in DEV, so void return is not possible.\n\n    function typeName(value) {\n      {\n        // toStringTag is needed for namespaced types like Temporal.Instant\n        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n        return type;\n      }\n    } // $FlowFixMe only called in DEV, so void return is not possible.\n\n\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n\n    function testStringCoercion(value) {\n      // If you ended up here by following an exception call stack, here's what's\n      // happened: you supplied an object or symbol value to React (as a prop, key,\n      // DOM attribute, CSS property, string ref, etc.) and when React tried to\n      // coerce it to a string using `'' + value`, an exception was thrown.\n      //\n      // The most common types that will cause this exception are `Symbol` instances\n      // and Temporal objects like `Temporal.Instant`. But any object that has a\n      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n      // exception. (Library authors do this to prevent users from using built-in\n      // numeric operators like `+` or comparison operators like `>=` because custom\n      // methods are needed to perform accurate arithmetic or comparison.)\n      //\n      // To fix the problem, coerce this object or symbol value to a string before\n      // passing it to React. The most reliable way is usually `String(value)`.\n      //\n      // To find which value is throwing, check the browser or debugger console.\n      // Before this exception was thrown, there should be `console.error` output\n      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n      // problem and how that type was used: key, atrribute, input value prop, etc.\n      // In most cases, this console output also shows the component and its\n      // ancestor components where the exception happened.\n      //\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return '' + value;\n    }\n\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    function checkPropStringCoercion(value, propName) {\n      {\n        if (willCoercionThrow(value)) {\n          error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    function resolveDefaultProps(Component, baseProps) {\n      if (Component && Component.defaultProps) {\n        // Resolve default props. Taken from ReactElement\n        var props = assign({}, baseProps);\n        var defaultProps = Component.defaultProps;\n\n        for (var propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n\n        return props;\n      }\n\n      return baseProps;\n    }\n\n    var valueCursor = createCursor(null);\n    var rendererSigil;\n    {\n      // Use this to detect multiple renderers using the same context\n      rendererSigil = {};\n    }\n    var currentlyRenderingFiber = null;\n    var lastContextDependency = null;\n    var lastFullyObservedContext = null;\n    var isDisallowedContextReadInDEV = false;\n\n    function resetContextDependencies() {\n      // This is called right before React yields execution, to ensure `readContext`\n      // cannot be called outside the render phase.\n      currentlyRenderingFiber = null;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n\n    function enterDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = true;\n      }\n    }\n\n    function exitDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n\n    function pushProvider(providerFiber, context, nextValue) {\n      if (isPrimaryRenderer) {\n        push(valueCursor, context._currentValue, providerFiber);\n        context._currentValue = nextValue;\n        {\n          if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n            error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n          }\n\n          context._currentRenderer = rendererSigil;\n        }\n      } else {\n        push(valueCursor, context._currentValue2, providerFiber);\n        context._currentValue2 = nextValue;\n        {\n          if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n            error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n          }\n\n          context._currentRenderer2 = rendererSigil;\n        }\n      }\n    }\n\n    function popProvider(context, providerFiber) {\n      var currentValue = valueCursor.current;\n      pop(valueCursor, providerFiber);\n\n      if (isPrimaryRenderer) {\n        {\n          context._currentValue = currentValue;\n        }\n      } else {\n        {\n          context._currentValue2 = currentValue;\n        }\n      }\n    }\n\n    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n      // Update the child lanes of all the ancestors, including the alternates.\n      var node = parent;\n\n      while (node !== null) {\n        var alternate = node.alternate;\n\n        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n          node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n          if (alternate !== null) {\n            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n          }\n        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n        }\n\n        if (node === propagationRoot) {\n          break;\n        }\n\n        node = node.return;\n      }\n\n      {\n        if (node !== propagationRoot) {\n          error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n      }\n    }\n\n    function propagateContextChange(workInProgress, context, renderLanes) {\n      {\n        propagateContextChange_eager(workInProgress, context, renderLanes);\n      }\n    }\n\n    function propagateContextChange_eager(workInProgress, context, renderLanes) {\n      var fiber = workInProgress.child;\n\n      if (fiber !== null) {\n        // Set the return pointer of the child to the work-in-progress fiber.\n        fiber.return = workInProgress;\n      }\n\n      while (fiber !== null) {\n        var nextFiber = void 0; // Visit this fiber.\n\n        var list = fiber.dependencies;\n\n        if (list !== null) {\n          nextFiber = fiber.child;\n          var dependency = list.firstContext;\n\n          while (dependency !== null) {\n            // Check if the context matches.\n            if (dependency.context === context) {\n              // Match! Schedule an update on this fiber.\n              if (fiber.tag === ClassComponent) {\n                // Schedule a force update on the work-in-progress.\n                var lane = pickArbitraryLane(renderLanes);\n                var update = createUpdate(NoTimestamp, lane);\n                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                // update to the current fiber, too, which means it will persist even if\n                // this render is thrown away. Since it's a race condition, not sure it's\n                // worth fixing.\n                // Inlined `enqueueUpdate` to remove interleaved update check\n\n                var updateQueue = fiber.updateQueue;\n                if (updateQueue === null) ;else {\n                  var sharedQueue = updateQueue.shared;\n                  var pending = sharedQueue.pending;\n\n                  if (pending === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update;\n                  } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                  }\n\n                  sharedQueue.pending = update;\n                }\n              }\n\n              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n              var alternate = fiber.alternate;\n\n              if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n              }\n\n              scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n              list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n              // dependency list.\n\n              break;\n            }\n\n            dependency = dependency.next;\n          }\n        } else if (fiber.tag === ContextProvider) {\n          // Don't scan deeper if this is a matching provider\n          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n        } else if (fiber.tag === DehydratedFragment) {\n          // If a dehydrated suspense boundary is in this subtree, we don't know\n          // if it will have any context consumers in it. The best we can do is\n          // mark it as having updates.\n          var parentSuspense = fiber.return;\n\n          if (parentSuspense === null) {\n            throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n          }\n\n          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n          var _alternate = parentSuspense.alternate;\n\n          if (_alternate !== null) {\n            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n          } // This is intentionally passing this fiber as the parent\n          // because we want to schedule this fiber as having work\n          // on its children. We'll use the childLanes on\n          // this fiber to indicate that a context has changed.\n\n\n          scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n          nextFiber = fiber.sibling;\n        } else {\n          // Traverse down.\n          nextFiber = fiber.child;\n        }\n\n        if (nextFiber !== null) {\n          // Set the return pointer of the child to the work-in-progress fiber.\n          nextFiber.return = fiber;\n        } else {\n          // No child. Traverse to next sibling.\n          nextFiber = fiber;\n\n          while (nextFiber !== null) {\n            if (nextFiber === workInProgress) {\n              // We're back to the root of this subtree. Exit.\n              nextFiber = null;\n              break;\n            }\n\n            var sibling = nextFiber.sibling;\n\n            if (sibling !== null) {\n              // Set the return pointer of the sibling to the work-in-progress fiber.\n              sibling.return = nextFiber.return;\n              nextFiber = sibling;\n              break;\n            } // No more siblings. Traverse up.\n\n\n            nextFiber = nextFiber.return;\n          }\n        }\n\n        fiber = nextFiber;\n      }\n    }\n\n    function prepareToReadContext(workInProgress, renderLanes) {\n      currentlyRenderingFiber = workInProgress;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      var dependencies = workInProgress.dependencies;\n\n      if (dependencies !== null) {\n        {\n          var firstContext = dependencies.firstContext;\n\n          if (firstContext !== null) {\n            if (includesSomeLane(dependencies.lanes, renderLanes)) {\n              // Context list has a pending update. Mark that this fiber performed work.\n              markWorkInProgressReceivedUpdate();\n            } // Reset the work-in-progress list\n\n\n            dependencies.firstContext = null;\n          }\n        }\n      }\n    }\n\n    function readContext(context) {\n      {\n        // This warning would fire if you read context inside a Hook like useMemo.\n        // Unlike the class check below, it's not enforced in production for perf.\n        if (isDisallowedContextReadInDEV) {\n          error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n        }\n      }\n      var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n      if (lastFullyObservedContext === context) ;else {\n        var contextItem = {\n          context: context,\n          memoizedValue: value,\n          next: null\n        };\n\n        if (lastContextDependency === null) {\n          if (currentlyRenderingFiber === null) {\n            throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n          } // This is the first dependency for this component. Create a new list.\n\n\n          lastContextDependency = contextItem;\n          currentlyRenderingFiber.dependencies = {\n            lanes: NoLanes,\n            firstContext: contextItem\n          };\n        } else {\n          // Append a new context item.\n          lastContextDependency = lastContextDependency.next = contextItem;\n        }\n      }\n      return value;\n    } // An array of all update queues that received updates during the current\n    // render. When this render exits, either because it finishes or because it is\n    // interrupted, the interleaved updates will be transferred onto the main part\n    // of the queue.\n\n\n    var interleavedQueues = null;\n\n    function pushInterleavedQueue(queue) {\n      if (interleavedQueues === null) {\n        interleavedQueues = [queue];\n      } else {\n        interleavedQueues.push(queue);\n      }\n    }\n\n    function enqueueInterleavedUpdates() {\n      // Transfer the interleaved updates onto the main queue. Each queue has a\n      // `pending` field and an `interleaved` field. When they are not null, they\n      // point to the last node in a circular linked list. We need to append the\n      // interleaved list to the end of the pending list by joining them into a\n      // single, circular list.\n      if (interleavedQueues !== null) {\n        for (var i = 0; i < interleavedQueues.length; i++) {\n          var queue = interleavedQueues[i];\n          var lastInterleavedUpdate = queue.interleaved;\n\n          if (lastInterleavedUpdate !== null) {\n            queue.interleaved = null;\n            var firstInterleavedUpdate = lastInterleavedUpdate.next;\n            var lastPendingUpdate = queue.pending;\n\n            if (lastPendingUpdate !== null) {\n              var firstPendingUpdate = lastPendingUpdate.next;\n              lastPendingUpdate.next = firstInterleavedUpdate;\n              lastInterleavedUpdate.next = firstPendingUpdate;\n            }\n\n            queue.pending = lastInterleavedUpdate;\n          }\n        }\n\n        interleavedQueues = null;\n      }\n    }\n\n    var UpdateState = 0;\n    var ReplaceState = 1;\n    var ForceUpdate = 2;\n    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n    // It should only be read right after calling `processUpdateQueue`, via\n    // `checkHasForceUpdateAfterProcessing`.\n\n    var hasForceUpdate = false;\n    var didWarnUpdateInsideUpdate;\n    var currentlyProcessingQueue;\n    {\n      didWarnUpdateInsideUpdate = false;\n      currentlyProcessingQueue = null;\n    }\n\n    function initializeUpdateQueue(fiber) {\n      var queue = {\n        baseState: fiber.memoizedState,\n        firstBaseUpdate: null,\n        lastBaseUpdate: null,\n        shared: {\n          pending: null,\n          interleaved: null,\n          lanes: NoLanes\n        },\n        effects: null\n      };\n      fiber.updateQueue = queue;\n    }\n\n    function cloneUpdateQueue(current, workInProgress) {\n      // Clone the update queue from current. Unless it's already a clone.\n      var queue = workInProgress.updateQueue;\n      var currentQueue = current.updateQueue;\n\n      if (queue === currentQueue) {\n        var clone = {\n          baseState: currentQueue.baseState,\n          firstBaseUpdate: currentQueue.firstBaseUpdate,\n          lastBaseUpdate: currentQueue.lastBaseUpdate,\n          shared: currentQueue.shared,\n          effects: currentQueue.effects\n        };\n        workInProgress.updateQueue = clone;\n      }\n    }\n\n    function createUpdate(eventTime, lane) {\n      var update = {\n        eventTime: eventTime,\n        lane: lane,\n        tag: UpdateState,\n        payload: null,\n        callback: null,\n        next: null\n      };\n      return update;\n    }\n\n    function enqueueUpdate(fiber, update, lane) {\n      var updateQueue = fiber.updateQueue;\n\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return;\n      }\n\n      var sharedQueue = updateQueue.shared;\n\n      if (isInterleavedUpdate(fiber)) {\n        var interleaved = sharedQueue.interleaved;\n\n        if (interleaved === null) {\n          // This is the first update. Create a circular list.\n          update.next = update; // At the end of the current render, this queue's interleaved updates will\n          // be transferred to the pending queue.\n\n          pushInterleavedQueue(sharedQueue);\n        } else {\n          update.next = interleaved.next;\n          interleaved.next = update;\n        }\n\n        sharedQueue.interleaved = update;\n      } else {\n        var pending = sharedQueue.pending;\n\n        if (pending === null) {\n          // This is the first update. Create a circular list.\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n\n        sharedQueue.pending = update;\n      }\n\n      {\n        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n          error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n          didWarnUpdateInsideUpdate = true;\n        }\n      }\n    }\n\n    function entangleTransitions(root, fiber, lane) {\n      var updateQueue = fiber.updateQueue;\n\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return;\n      }\n\n      var sharedQueue = updateQueue.shared;\n\n      if (isTransitionLane(lane)) {\n        var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n        // have finished. We can remove them from the shared queue, which represents\n        // a superset of the actually pending lanes. In some cases we may entangle\n        // more than we need to, but that's OK. In fact it's worse if we *don't*\n        // entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n\n    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n      // Captured updates are updates that are thrown by a child during the render\n      // phase. They should be discarded if the render is aborted. Therefore,\n      // we should only put them on the work-in-progress queue, not the current one.\n      var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n      var current = workInProgress.alternate;\n\n      if (current !== null) {\n        var currentQueue = current.updateQueue;\n\n        if (queue === currentQueue) {\n          // The work-in-progress queue is the same as current. This happens when\n          // we bail out on a parent fiber that then captures an error thrown by\n          // a child. Since we want to append the update only to the work-in\n          // -progress queue, we need to clone the updates. We usually clone during\n          // processUpdateQueue, but that didn't happen in this case because we\n          // skipped over the parent when we bailed out.\n          var newFirst = null;\n          var newLast = null;\n          var firstBaseUpdate = queue.firstBaseUpdate;\n\n          if (firstBaseUpdate !== null) {\n            // Loop through the updates and clone them.\n            var update = firstBaseUpdate;\n\n            do {\n              var clone = {\n                eventTime: update.eventTime,\n                lane: update.lane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: update.callback,\n                next: null\n              };\n\n              if (newLast === null) {\n                newFirst = newLast = clone;\n              } else {\n                newLast.next = clone;\n                newLast = clone;\n              }\n\n              update = update.next;\n            } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n            if (newLast === null) {\n              newFirst = newLast = capturedUpdate;\n            } else {\n              newLast.next = capturedUpdate;\n              newLast = capturedUpdate;\n            }\n          } else {\n            // There are no base updates.\n            newFirst = newLast = capturedUpdate;\n          }\n\n          queue = {\n            baseState: currentQueue.baseState,\n            firstBaseUpdate: newFirst,\n            lastBaseUpdate: newLast,\n            shared: currentQueue.shared,\n            effects: currentQueue.effects\n          };\n          workInProgress.updateQueue = queue;\n          return;\n        }\n      } // Append the update to the end of the list.\n\n\n      var lastBaseUpdate = queue.lastBaseUpdate;\n\n      if (lastBaseUpdate === null) {\n        queue.firstBaseUpdate = capturedUpdate;\n      } else {\n        lastBaseUpdate.next = capturedUpdate;\n      }\n\n      queue.lastBaseUpdate = capturedUpdate;\n    }\n\n    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n      switch (update.tag) {\n        case ReplaceState:\n          {\n            var payload = update.payload;\n\n            if (typeof payload === 'function') {\n              // Updater function\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              var nextState = payload.call(instance, prevState, nextProps);\n              {\n                if (workInProgress.mode & StrictLegacyMode) {\n                  setIsStrictModeForDevtools(true);\n\n                  try {\n                    payload.call(instance, prevState, nextProps);\n                  } finally {\n                    setIsStrictModeForDevtools(false);\n                  }\n                }\n\n                exitDisallowedContextReadInDEV();\n              }\n              return nextState;\n            } // State object\n\n\n            return payload;\n          }\n\n        case CaptureUpdate:\n          {\n            workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n          }\n        // Intentional fallthrough\n\n        case UpdateState:\n          {\n            var _payload = update.payload;\n            var partialState;\n\n            if (typeof _payload === 'function') {\n              // Updater function\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              partialState = _payload.call(instance, prevState, nextProps);\n              {\n                if (workInProgress.mode & StrictLegacyMode) {\n                  setIsStrictModeForDevtools(true);\n\n                  try {\n                    _payload.call(instance, prevState, nextProps);\n                  } finally {\n                    setIsStrictModeForDevtools(false);\n                  }\n                }\n\n                exitDisallowedContextReadInDEV();\n              }\n            } else {\n              // Partial state object\n              partialState = _payload;\n            }\n\n            if (partialState === null || partialState === undefined) {\n              // Null and undefined are treated as no-ops.\n              return prevState;\n            } // Merge the partial state and the previous state.\n\n\n            return assign({}, prevState, partialState);\n          }\n\n        case ForceUpdate:\n          {\n            hasForceUpdate = true;\n            return prevState;\n          }\n      }\n\n      return prevState;\n    }\n\n    function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var queue = workInProgress.updateQueue;\n      hasForceUpdate = false;\n      {\n        currentlyProcessingQueue = queue.shared;\n      }\n      var firstBaseUpdate = queue.firstBaseUpdate;\n      var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n      var pendingQueue = queue.shared.pending;\n\n      if (pendingQueue !== null) {\n        queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n        // and last so that it's non-circular.\n\n        var lastPendingUpdate = pendingQueue;\n        var firstPendingUpdate = lastPendingUpdate.next;\n        lastPendingUpdate.next = null; // Append pending updates to base queue\n\n        if (lastBaseUpdate === null) {\n          firstBaseUpdate = firstPendingUpdate;\n        } else {\n          lastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n        // we need to transfer the updates to that queue, too. Because the base\n        // queue is a singly-linked list with no cycles, we can append to both\n        // lists and take advantage of structural sharing.\n        // TODO: Pass `current` as argument\n\n        var current = workInProgress.alternate;\n\n        if (current !== null) {\n          // This is always non-null on a ClassComponent or HostRoot\n          var currentQueue = current.updateQueue;\n          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n          if (currentLastBaseUpdate !== lastBaseUpdate) {\n            if (currentLastBaseUpdate === null) {\n              currentQueue.firstBaseUpdate = firstPendingUpdate;\n            } else {\n              currentLastBaseUpdate.next = firstPendingUpdate;\n            }\n\n            currentQueue.lastBaseUpdate = lastPendingUpdate;\n          }\n        }\n      } // These values may change as we process the queue.\n\n\n      if (firstBaseUpdate !== null) {\n        // Iterate through the list of updates to compute the result.\n        var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n        // from the original lanes.\n\n        var newLanes = NoLanes;\n        var newBaseState = null;\n        var newFirstBaseUpdate = null;\n        var newLastBaseUpdate = null;\n        var update = firstBaseUpdate;\n\n        do {\n          var updateLane = update.lane;\n          var updateEventTime = update.eventTime;\n\n          if (!isSubsetOfLanes(renderLanes, updateLane)) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              eventTime: updateEventTime,\n              lane: updateLane,\n              tag: update.tag,\n              payload: update.payload,\n              callback: update.callback,\n              next: null\n            };\n\n            if (newLastBaseUpdate === null) {\n              newFirstBaseUpdate = newLastBaseUpdate = clone;\n              newBaseState = newState;\n            } else {\n              newLastBaseUpdate = newLastBaseUpdate.next = clone;\n            } // Update the remaining priority in the queue.\n\n\n            newLanes = mergeLanes(newLanes, updateLane);\n          } else {\n            // This update does have sufficient priority.\n            if (newLastBaseUpdate !== null) {\n              var _clone = {\n                eventTime: updateEventTime,\n                // This update is going to be committed so we never want uncommit\n                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                // this will never be skipped by the check above.\n                lane: NoLane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: update.callback,\n                next: null\n              };\n              newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n            } // Process this update.\n\n\n            newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n            var callback = update.callback;\n\n            if (callback !== null && // If the update was already committed, we should not queue its\n            // callback again.\n            update.lane !== NoLane) {\n              workInProgress.flags |= Callback;\n              var effects = queue.effects;\n\n              if (effects === null) {\n                queue.effects = [update];\n              } else {\n                effects.push(update);\n              }\n            }\n          }\n\n          update = update.next;\n\n          if (update === null) {\n            pendingQueue = queue.shared.pending;\n\n            if (pendingQueue === null) {\n              break;\n            } else {\n              // An update was scheduled from inside a reducer. Add the new\n              // pending updates to the end of the list and keep processing.\n              var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n              // unravel them when transferring them to the base queue.\n\n              var _firstPendingUpdate = _lastPendingUpdate.next;\n              _lastPendingUpdate.next = null;\n              update = _firstPendingUpdate;\n              queue.lastBaseUpdate = _lastPendingUpdate;\n              queue.shared.pending = null;\n            }\n          }\n        } while (true);\n\n        if (newLastBaseUpdate === null) {\n          newBaseState = newState;\n        }\n\n        queue.baseState = newBaseState;\n        queue.firstBaseUpdate = newFirstBaseUpdate;\n        queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n        // process them during this render, but we do need to track which lanes\n        // are remaining.\n\n        var lastInterleaved = queue.shared.interleaved;\n\n        if (lastInterleaved !== null) {\n          var interleaved = lastInterleaved;\n\n          do {\n            newLanes = mergeLanes(newLanes, interleaved.lane);\n            interleaved = interleaved.next;\n          } while (interleaved !== lastInterleaved);\n        } else if (firstBaseUpdate === null) {\n          // `queue.lanes` is used for entangling transitions. We can set it back to\n          // zero once the queue is empty.\n          queue.shared.lanes = NoLanes;\n        } // Set the remaining expiration time to be whatever is remaining in the queue.\n        // This should be fine because the only two other things that contribute to\n        // expiration time are props and context. We're already in the middle of the\n        // begin phase by the time we start processing the queue, so we've already\n        // dealt with the props. Context in components that specify\n        // shouldComponentUpdate is tricky; but we'll have to account for\n        // that regardless.\n\n\n        markSkippedUpdateLanes(newLanes);\n        workInProgress.lanes = newLanes;\n        workInProgress.memoizedState = newState;\n      }\n\n      {\n        currentlyProcessingQueue = null;\n      }\n    }\n\n    function callCallback(callback, context) {\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n      }\n\n      callback.call(context);\n    }\n\n    function resetHasForceUpdateBeforeProcessing() {\n      hasForceUpdate = false;\n    }\n\n    function checkHasForceUpdateAfterProcessing() {\n      return hasForceUpdate;\n    }\n\n    function commitUpdateQueue(finishedWork, finishedQueue, instance) {\n      // Commit the effects\n      var effects = finishedQueue.effects;\n      finishedQueue.effects = null;\n\n      if (effects !== null) {\n        for (var i = 0; i < effects.length; i++) {\n          var effect = effects[i];\n          var callback = effect.callback;\n\n          if (callback !== null) {\n            effect.callback = null;\n            callCallback(callback, instance);\n          }\n        }\n      }\n    }\n\n    var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n    // We'll use it to determine whether we need to initialize legacy refs.\n\n    var emptyRefsObject = new React.Component().refs;\n    var didWarnAboutStateAssignmentForComponent;\n    var didWarnAboutUninitializedState;\n    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n    var didWarnAboutLegacyLifecyclesAndDerivedState;\n    var didWarnAboutUndefinedDerivedState;\n    var warnOnUndefinedDerivedState;\n    var warnOnInvalidCallback;\n    var didWarnAboutDirectlyAssigningPropsToState;\n    var didWarnAboutContextTypeAndContextTypes;\n    var didWarnAboutInvalidateContextType;\n    {\n      didWarnAboutStateAssignmentForComponent = new Set();\n      didWarnAboutUninitializedState = new Set();\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n      didWarnAboutDirectlyAssigningPropsToState = new Set();\n      didWarnAboutUndefinedDerivedState = new Set();\n      didWarnAboutContextTypeAndContextTypes = new Set();\n      didWarnAboutInvalidateContextType = new Set();\n      var didWarnOnInvalidCallback = new Set();\n\n      warnOnInvalidCallback = function (callback, callerName) {\n        if (callback === null || typeof callback === 'function') {\n          return;\n        }\n\n        var key = callerName + '_' + callback;\n\n        if (!didWarnOnInvalidCallback.has(key)) {\n          didWarnOnInvalidCallback.add(key);\n          error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n        }\n      };\n\n      warnOnUndefinedDerivedState = function (type, partialState) {\n        if (partialState === undefined) {\n          var componentName = getComponentNameFromType(type) || 'Component';\n\n          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n            didWarnAboutUndefinedDerivedState.add(componentName);\n            error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n          }\n        }\n      }; // This is so gross but it's at least non-critical and can be removed if\n      // it causes problems. This is meant to give a nicer error message for\n      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n      // ...)) which otherwise throws a \"_processChildContext is not a function\"\n      // exception.\n\n\n      Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n        enumerable: false,\n        value: function () {\n          throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n        }\n      });\n      Object.freeze(fakeInternalInstance);\n    }\n\n    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n      var prevState = workInProgress.memoizedState;\n      var partialState = getDerivedStateFromProps(nextProps, prevState);\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n\n          try {\n            // Invoke the function an extra time to help detect side-effects.\n            partialState = getDerivedStateFromProps(nextProps, prevState);\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n\n        warnOnUndefinedDerivedState(ctor, partialState);\n      } // Merge the partial state and the previous state.\n\n      var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n      // base state.\n\n      if (workInProgress.lanes === NoLanes) {\n        // Queue is always non-null for classes\n        var updateQueue = workInProgress.updateQueue;\n        updateQueue.baseState = memoizedState;\n      }\n    }\n\n    var classComponentUpdater = {\n      isMounted: isMounted,\n      enqueueSetState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.payload = payload;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'setState');\n          }\n          update.callback = callback;\n        }\n\n        enqueueUpdate(fiber, update);\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitions(root, fiber, lane);\n        }\n\n        {\n          markStateUpdateScheduled(fiber, lane);\n        }\n      },\n      enqueueReplaceState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.tag = ReplaceState;\n        update.payload = payload;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'replaceState');\n          }\n          update.callback = callback;\n        }\n\n        enqueueUpdate(fiber, update);\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitions(root, fiber, lane);\n        }\n\n        {\n          markStateUpdateScheduled(fiber, lane);\n        }\n      },\n      enqueueForceUpdate: function (inst, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.tag = ForceUpdate;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'forceUpdate');\n          }\n          update.callback = callback;\n        }\n\n        enqueueUpdate(fiber, update);\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitions(root, fiber, lane);\n        }\n\n        {\n          markForceUpdateScheduled(fiber, lane);\n        }\n      }\n    };\n\n    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n      var instance = workInProgress.stateNode;\n\n      if (typeof instance.shouldComponentUpdate === 'function') {\n        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n\n            try {\n              // Invoke the function an extra time to help detect side-effects.\n              shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n\n          if (shouldUpdate === undefined) {\n            error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n          }\n        }\n        return shouldUpdate;\n      }\n\n      if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n      }\n\n      return true;\n    }\n\n    function checkClassInstance(workInProgress, ctor, newProps) {\n      var instance = workInProgress.stateNode;\n      {\n        var name = getComponentNameFromType(ctor) || 'Component';\n        var renderPresent = instance.render;\n\n        if (!renderPresent) {\n          if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n            error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n          } else {\n            error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n          }\n        }\n\n        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n          error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n        }\n\n        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n          error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n        }\n\n        if (instance.propTypes) {\n          error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n        }\n\n        if (instance.contextType) {\n          error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n        }\n\n        {\n          if (instance.contextTypes) {\n            error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n          }\n\n          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n            didWarnAboutContextTypeAndContextTypes.add(ctor);\n            error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n          }\n        }\n\n        if (typeof instance.componentShouldUpdate === 'function') {\n          error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n        }\n\n        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n          error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n        }\n\n        if (typeof instance.componentDidUnmount === 'function') {\n          error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n        }\n\n        if (typeof instance.componentDidReceiveProps === 'function') {\n          error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n        }\n\n        if (typeof instance.componentWillRecieveProps === 'function') {\n          error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n        }\n\n        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n          error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n        }\n\n        var hasMutatedProps = instance.props !== newProps;\n\n        if (instance.props !== undefined && hasMutatedProps) {\n          error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n        }\n\n        if (instance.defaultProps) {\n          error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n          error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n        }\n\n        if (typeof instance.getDerivedStateFromProps === 'function') {\n          error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n        }\n\n        if (typeof instance.getDerivedStateFromError === 'function') {\n          error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n        }\n\n        if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n          error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n        }\n\n        var _state = instance.state;\n\n        if (_state && (typeof _state !== 'object' || isArray(_state))) {\n          error('%s.state: must be set to an object or null', name);\n        }\n\n        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n          error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n        }\n      }\n    }\n\n    function adoptClassInstance(workInProgress, instance) {\n      instance.updater = classComponentUpdater;\n      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n      set(instance, workInProgress);\n      {\n        instance._reactInternalInstance = fakeInternalInstance;\n      }\n    }\n\n    function constructClassInstance(workInProgress, ctor, props) {\n      var isLegacyContextConsumer = false;\n      var unmaskedContext = emptyContextObject;\n      var context = emptyContextObject;\n      var contextType = ctor.contextType;\n      {\n        if ('contextType' in ctor) {\n          var isValid = // Allow null for conditional declaration\n          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n            didWarnAboutInvalidateContextType.add(ctor);\n            var addendum = '';\n\n            if (contextType === undefined) {\n              addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n            } else if (typeof contextType !== 'object') {\n              addendum = ' However, it is set to a ' + typeof contextType + '.';\n            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n              addendum = ' Did you accidentally pass the Context.Provider instead?';\n            } else if (contextType._context !== undefined) {\n              // <Context.Consumer>\n              addendum = ' Did you accidentally pass the Context.Consumer instead?';\n            } else {\n              addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n            }\n\n            error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n          }\n        }\n      }\n\n      if (typeof contextType === 'object' && contextType !== null) {\n        context = readContext(contextType);\n      } else {\n        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        var contextTypes = ctor.contextTypes;\n        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n      }\n\n      var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n\n          try {\n            instance = new ctor(props, context); // eslint-disable-line no-new\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n      }\n      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n      adoptClassInstance(workInProgress, instance);\n      {\n        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n          var componentName = getComponentNameFromType(ctor) || 'Component';\n\n          if (!didWarnAboutUninitializedState.has(componentName)) {\n            didWarnAboutUninitializedState.add(componentName);\n            error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n          }\n        } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n        // Warn about these lifecycles if they are present.\n        // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n          var foundWillMountName = null;\n          var foundWillReceivePropsName = null;\n          var foundWillUpdateName = null;\n\n          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n            foundWillMountName = 'componentWillMount';\n          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n            foundWillMountName = 'UNSAFE_componentWillMount';\n          }\n\n          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n            foundWillReceivePropsName = 'componentWillReceiveProps';\n          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n          }\n\n          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n            foundWillUpdateName = 'componentWillUpdate';\n          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n            foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n          }\n\n          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n            var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n              error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n            }\n          }\n        }\n      } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n      // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n      if (isLegacyContextConsumer) {\n        cacheContext(workInProgress, unmaskedContext, context);\n      }\n\n      return instance;\n    }\n\n    function callComponentWillMount(workInProgress, instance) {\n      var oldState = instance.state;\n\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n\n      if (oldState !== instance.state) {\n        {\n          error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    }\n\n    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n      var oldState = instance.state;\n\n      if (typeof instance.componentWillReceiveProps === 'function') {\n        instance.componentWillReceiveProps(newProps, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n      }\n\n      if (instance.state !== oldState) {\n        {\n          var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n            didWarnAboutStateAssignmentForComponent.add(componentName);\n            error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n          }\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    } // Invokes the mount life-cycles on a previously never rendered instance.\n\n\n    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      {\n        checkClassInstance(workInProgress, ctor, newProps);\n      }\n      var instance = workInProgress.stateNode;\n      instance.props = newProps;\n      instance.state = workInProgress.memoizedState;\n      instance.refs = emptyRefsObject;\n      initializeUpdateQueue(workInProgress);\n      var contextType = ctor.contextType;\n\n      if (typeof contextType === 'object' && contextType !== null) {\n        instance.context = readContext(contextType);\n      } else {\n        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        instance.context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n\n      {\n        if (instance.state === newProps) {\n          var componentName = getComponentNameFromType(ctor) || 'Component';\n\n          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n            didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n            error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n          }\n        }\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n        }\n\n        {\n          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n        }\n      }\n      instance.state = workInProgress.memoizedState;\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        instance.state = workInProgress.memoizedState;\n      } // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n        // process them now.\n\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        instance.state = workInProgress.memoizedState;\n      }\n\n      if (typeof instance.componentDidMount === 'function') {\n        var fiberFlags = Update;\n        {\n          fiberFlags |= LayoutStatic;\n        }\n\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          fiberFlags |= MountLayoutDev;\n        }\n\n        workInProgress.flags |= fiberFlags;\n      }\n    }\n\n    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      var oldProps = workInProgress.memoizedProps;\n      instance.props = oldProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n\n      if (typeof contextType === 'object' && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n      }\n\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n        if (oldProps !== newProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      newState = workInProgress.memoizedState;\n\n      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === 'function') {\n          var fiberFlags = Update;\n          {\n            fiberFlags |= LayoutStatic;\n          }\n\n          if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n            fiberFlags |= MountLayoutDev;\n          }\n\n          workInProgress.flags |= fiberFlags;\n        }\n\n        return false;\n      }\n\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n          if (typeof instance.componentWillMount === 'function') {\n            instance.componentWillMount();\n          }\n\n          if (typeof instance.UNSAFE_componentWillMount === 'function') {\n            instance.UNSAFE_componentWillMount();\n          }\n        }\n\n        if (typeof instance.componentDidMount === 'function') {\n          var _fiberFlags = Update;\n          {\n            _fiberFlags |= LayoutStatic;\n          }\n\n          if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n            _fiberFlags |= MountLayoutDev;\n          }\n\n          workInProgress.flags |= _fiberFlags;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === 'function') {\n          var _fiberFlags2 = Update;\n          {\n            _fiberFlags2 |= LayoutStatic;\n          }\n\n          if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n            _fiberFlags2 |= MountLayoutDev;\n          }\n\n          workInProgress.flags |= _fiberFlags2;\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized state to indicate that this work can be reused.\n\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\n    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      cloneUpdateQueue(current, workInProgress);\n      var unresolvedOldProps = workInProgress.memoizedProps;\n      var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n      instance.props = oldProps;\n      var unresolvedNewProps = workInProgress.pendingProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n\n      if (typeof contextType === 'object' && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n      }\n\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      newState = workInProgress.memoizedState;\n\n      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n\n        return false;\n      }\n\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n      // both before and after `shouldComponentUpdate` has been called. Not ideal,\n      // but I'm loath to refactor this function. This only happens for memoized\n      // components so it's not that common.\n      enableLazyContextPropagation;\n\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n          if (typeof instance.componentWillUpdate === 'function') {\n            instance.componentWillUpdate(newProps, newState, nextContext);\n          }\n\n          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n          }\n        }\n\n        if (typeof instance.componentDidUpdate === 'function') {\n          workInProgress.flags |= Update;\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          workInProgress.flags |= Snapshot;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized props/state to indicate that this work can be reused.\n\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    } // TODO: Use the unified fiber stack module instead of this local one?\n    // Intentionally not using it yet to derisk the initial implementation, because\n    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n    // rather the ids be wrong than crash the whole reconciler.\n\n\n    var forkStack = [];\n    var forkStackIndex = 0;\n    var treeForkProvider = null;\n    var treeForkCount = 0;\n    var idStack = [];\n    var idStackIndex = 0;\n    var treeContextProvider = null;\n    var treeContextId = 1;\n    var treeContextOverflow = '';\n\n    function isForkedChild(workInProgress) {\n      warnIfNotHydrating();\n      return (workInProgress.flags & Forked) !== NoFlags;\n    }\n\n    function getForksAtLevel(workInProgress) {\n      warnIfNotHydrating();\n      return treeForkCount;\n    }\n\n    function getTreeId() {\n      var overflow = treeContextOverflow;\n      var idWithLeadingBit = treeContextId;\n      var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n      return id.toString(32) + overflow;\n    }\n\n    function pushTreeFork(workInProgress, totalChildren) {\n      // This is called right after we reconcile an array (or iterator) of child\n      // fibers, because that's the only place where we know how many children in\n      // the whole set without doing extra work later, or storing addtional\n      // information on the fiber.\n      //\n      // That's why this function is separate from pushTreeId — it's called during\n      // the render phase of the fork parent, not the child, which is where we push\n      // the other context values.\n      //\n      // In the Fizz implementation this is much simpler because the child is\n      // rendered in the same callstack as the parent.\n      //\n      // It might be better to just add a `forks` field to the Fiber type. It would\n      // make this module simpler.\n      warnIfNotHydrating();\n      forkStack[forkStackIndex++] = treeForkCount;\n      forkStack[forkStackIndex++] = treeForkProvider;\n      treeForkProvider = workInProgress;\n      treeForkCount = totalChildren;\n    }\n\n    function pushTreeId(workInProgress, totalChildren, index) {\n      warnIfNotHydrating();\n      idStack[idStackIndex++] = treeContextId;\n      idStack[idStackIndex++] = treeContextOverflow;\n      idStack[idStackIndex++] = treeContextProvider;\n      treeContextProvider = workInProgress;\n      var baseIdWithLeadingBit = treeContextId;\n      var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n      // of the id; we use it to account for leading 0s.\n\n      var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n      var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n      var slot = index + 1;\n      var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n      // consideration the leading 1 we use to mark the end of the sequence.\n\n      if (length > 30) {\n        // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n        // This branch assumes the length of the base id is greater than 5; it won't\n        // work for smaller ids, because you need 5 bits per character.\n        //\n        // We encode the id in multiple steps: first the base id, then the\n        // remaining digits.\n        //\n        // Each 5 bit sequence corresponds to a single base 32 character. So for\n        // example, if the current id is 23 bits long, we can convert 20 of those\n        // bits into a string of 4 characters, with 3 bits left over.\n        //\n        // First calculate how many bits in the base id represent a complete\n        // sequence of characters.\n        var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n        var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n        var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n        var restOfBaseId = baseId >> numberOfOverflowBits;\n        var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n        // we made more room, this time it won't overflow.\n\n        var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n        var restOfNewBits = slot << restOfBaseLength;\n        var id = restOfNewBits | restOfBaseId;\n        var overflow = newOverflow + baseOverflow;\n        treeContextId = 1 << restOfLength | id;\n        treeContextOverflow = overflow;\n      } else {\n        // Normal path\n        var newBits = slot << baseLength;\n\n        var _id = newBits | baseId;\n\n        var _overflow = baseOverflow;\n        treeContextId = 1 << length | _id;\n        treeContextOverflow = _overflow;\n      }\n    }\n\n    function pushMaterializedTreeId(workInProgress) {\n      warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n      // in its children.\n\n      var returnFiber = workInProgress.return;\n\n      if (returnFiber !== null) {\n        var numberOfForks = 1;\n        var slotIndex = 0;\n        pushTreeFork(workInProgress, numberOfForks);\n        pushTreeId(workInProgress, numberOfForks, slotIndex);\n      }\n    }\n\n    function getBitLength(number) {\n      return 32 - clz32(number);\n    }\n\n    function getLeadingBit(id) {\n      return 1 << getBitLength(id) - 1;\n    }\n\n    function popTreeContext(workInProgress) {\n      // Restore the previous values.\n      // This is a bit more complicated than other context-like modules in Fiber\n      // because the same Fiber may appear on the stack multiple times and for\n      // different reasons. We have to keep popping until the work-in-progress is\n      // no longer at the top of the stack.\n      while (workInProgress === treeForkProvider) {\n        treeForkProvider = forkStack[--forkStackIndex];\n        forkStack[forkStackIndex] = null;\n        treeForkCount = forkStack[--forkStackIndex];\n        forkStack[forkStackIndex] = null;\n      }\n\n      while (workInProgress === treeContextProvider) {\n        treeContextProvider = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n        treeContextOverflow = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n        treeContextId = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n      }\n    }\n\n    function getSuspendedTreeContext() {\n      warnIfNotHydrating();\n\n      if (treeContextProvider !== null) {\n        return {\n          id: treeContextId,\n          overflow: treeContextOverflow\n        };\n      } else {\n        return null;\n      }\n    }\n\n    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n      warnIfNotHydrating();\n      idStack[idStackIndex++] = treeContextId;\n      idStack[idStackIndex++] = treeContextOverflow;\n      idStack[idStackIndex++] = treeContextProvider;\n      treeContextId = suspendedContext.id;\n      treeContextOverflow = suspendedContext.overflow;\n      treeContextProvider = workInProgress;\n    }\n\n    function warnIfNotHydrating() {\n      {\n        if (!getIsHydrating()) {\n          error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n        }\n      }\n    } // This may have been an insertion or a hydration.\n\n\n    var hydrationParentFiber = null;\n    var nextHydratableInstance = null;\n    var isHydrating = false;\n    var didSuspend = false; // Hydration errors that were thrown inside this boundary\n\n    var hydrationErrors = null;\n\n    function warnIfHydrating() {\n      {\n        if (isHydrating) {\n          error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n        }\n      }\n    }\n\n    function markDidSuspendWhileHydratingDEV() {\n      {\n        didSuspend = true;\n      }\n    }\n\n    function enterHydrationState(fiber) {\n      if (!supportsHydration) {\n        return false;\n      }\n\n      var parentInstance = fiber.stateNode.containerInfo;\n      nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n      hydrationParentFiber = fiber;\n      isHydrating = true;\n      hydrationErrors = null;\n      didSuspend = false;\n      return true;\n    }\n\n    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n      if (!supportsHydration) {\n        return false;\n      }\n\n      nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n      hydrationParentFiber = fiber;\n      isHydrating = true;\n      hydrationErrors = null;\n      didSuspend = false;\n\n      if (treeContext !== null) {\n        restoreSuspendedTreeContext(fiber, treeContext);\n      }\n\n      return true;\n    }\n\n    function warnUnhydratedInstance(returnFiber, instance) {\n      {\n        switch (returnFiber.tag) {\n          case HostRoot:\n            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n            break;\n\n          case HostComponent:\n            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);\n            break;\n\n          case SuspenseComponent:\n            var suspenseState = returnFiber.memoizedState;\n            if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n            break;\n        }\n      }\n    }\n\n    function deleteHydratableInstance(returnFiber, instance) {\n      warnUnhydratedInstance(returnFiber, instance);\n      var childToDelete = createFiberFromHostInstanceForDeletion();\n      childToDelete.stateNode = instance;\n      childToDelete.return = returnFiber;\n      var deletions = returnFiber.deletions;\n\n      if (deletions === null) {\n        returnFiber.deletions = [childToDelete];\n        returnFiber.flags |= ChildDeletion;\n      } else {\n        deletions.push(childToDelete);\n      }\n    }\n\n    function warnNonhydratedInstance(returnFiber, fiber) {\n      {\n        if (didSuspend) {\n          // Inside a boundary that already suspended. We're currently rendering the\n          // siblings of a suspended node. The mismatch may be due to the missing\n          // data, so it's probably a false positive.\n          return;\n        }\n\n        switch (returnFiber.tag) {\n          case HostRoot:\n            {\n              var parentContainer = returnFiber.stateNode.containerInfo;\n\n              switch (fiber.tag) {\n                case HostComponent:\n                  var type = fiber.type;\n                  var props = fiber.pendingProps;\n                  didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n                  break;\n\n                case HostText:\n                  var text = fiber.pendingProps;\n                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n                  break;\n\n                case SuspenseComponent:\n                  didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n                  break;\n              }\n\n              break;\n            }\n\n          case HostComponent:\n            {\n              var parentType = returnFiber.type;\n              var parentProps = returnFiber.memoizedProps;\n              var parentInstance = returnFiber.stateNode;\n\n              switch (fiber.tag) {\n                case HostComponent:\n                  var _type = fiber.type;\n                  var _props = fiber.pendingProps;\n                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);\n                  break;\n\n                case HostText:\n                  var _text = fiber.pendingProps;\n                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);\n                  break;\n\n                case SuspenseComponent:\n                  didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n                  break;\n              }\n\n              break;\n            }\n\n          case SuspenseComponent:\n            {\n              var suspenseState = returnFiber.memoizedState;\n              var _parentInstance = suspenseState.dehydrated;\n              if (_parentInstance !== null) switch (fiber.tag) {\n                case HostComponent:\n                  var _type2 = fiber.type;\n                  var _props2 = fiber.pendingProps;\n                  didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n                  break;\n\n                case HostText:\n                  var _text2 = fiber.pendingProps;\n                  didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n                  break;\n\n                case SuspenseComponent:\n                  didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n                  break;\n              }\n              break;\n            }\n\n          default:\n            return;\n        }\n      }\n    }\n\n    function insertNonHydratedInstance(returnFiber, fiber) {\n      fiber.flags = fiber.flags & ~Hydrating | Placement;\n      warnNonhydratedInstance(returnFiber, fiber);\n    }\n\n    function tryHydrate(fiber, nextInstance) {\n      switch (fiber.tag) {\n        case HostComponent:\n          {\n            var type = fiber.type;\n            var props = fiber.pendingProps;\n            var instance = canHydrateInstance(nextInstance, type, props);\n\n            if (instance !== null) {\n              fiber.stateNode = instance;\n              hydrationParentFiber = fiber;\n              nextHydratableInstance = getFirstHydratableChild(instance);\n              return true;\n            }\n\n            return false;\n          }\n\n        case HostText:\n          {\n            var text = fiber.pendingProps;\n            var textInstance = canHydrateTextInstance(nextInstance, text);\n\n            if (textInstance !== null) {\n              fiber.stateNode = textInstance;\n              hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n              nextHydratableInstance = null;\n              return true;\n            }\n\n            return false;\n          }\n\n        case SuspenseComponent:\n          {\n            {\n              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n\n              if (suspenseInstance !== null) {\n                var suspenseState = {\n                  dehydrated: suspenseInstance,\n                  treeContext: getSuspendedTreeContext(),\n                  retryLane: OffscreenLane\n                };\n                fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n                // This simplifies the code for getHostSibling and deleting nodes,\n                // since it doesn't have to consider all Suspense boundaries and\n                // check if they're dehydrated ones or not.\n\n                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n                dehydratedFragment.return = fiber;\n                fiber.child = dehydratedFragment;\n                hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n                // it during the first pass. Instead, we'll reenter it later.\n\n                nextHydratableInstance = null;\n                return true;\n              }\n            }\n            return false;\n          }\n\n        default:\n          return false;\n      }\n    }\n\n    function shouldClientRenderOnMismatch(fiber) {\n      return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n    }\n\n    function throwOnHydrationMismatch(fiber) {\n      throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n    }\n\n    function tryToClaimNextHydratableInstance(fiber) {\n      if (!isHydrating) {\n        return;\n      }\n\n      var nextInstance = nextHydratableInstance;\n\n      if (!nextInstance) {\n        if (shouldClientRenderOnMismatch(fiber)) {\n          warnNonhydratedInstance(hydrationParentFiber, fiber);\n          throwOnHydrationMismatch();\n        } // Nothing to hydrate. Make it an insertion.\n\n\n        insertNonHydratedInstance(hydrationParentFiber, fiber);\n        isHydrating = false;\n        hydrationParentFiber = fiber;\n        return;\n      }\n\n      var firstAttemptedInstance = nextInstance;\n\n      if (!tryHydrate(fiber, nextInstance)) {\n        if (shouldClientRenderOnMismatch(fiber)) {\n          warnNonhydratedInstance(hydrationParentFiber, fiber);\n          throwOnHydrationMismatch();\n        } // If we can't hydrate this instance let's try the next one.\n        // We use this as a heuristic. It's based on intuition and not data so it\n        // might be flawed or unnecessary.\n\n\n        nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n        var prevHydrationParentFiber = hydrationParentFiber;\n\n        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n          // Nothing to hydrate. Make it an insertion.\n          insertNonHydratedInstance(hydrationParentFiber, fiber);\n          isHydrating = false;\n          hydrationParentFiber = fiber;\n          return;\n        } // We matched the next one, we'll now assume that the first one was\n        // superfluous and we'll delete it. Since we can't eagerly delete it\n        // we'll have to schedule a deletion. To do that, this node needs a dummy\n        // fiber associated with it.\n\n\n        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n      }\n    }\n\n    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n      if (!supportsHydration) {\n        throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n\n      var instance = fiber.stateNode;\n      var shouldWarnIfMismatchDev = !didSuspend;\n      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n      fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n      // is a new ref we mark this as an update.\n\n      if (updatePayload !== null) {\n        return true;\n      }\n\n      return false;\n    }\n\n    function prepareToHydrateHostTextInstance(fiber) {\n      if (!supportsHydration) {\n        throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n\n      var textInstance = fiber.stateNode;\n      var textContent = fiber.memoizedProps;\n      var shouldWarnIfMismatchDev = !didSuspend;\n      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n\n      if (shouldUpdate) {\n        // We assume that prepareToHydrateHostTextInstance is called in a context where the\n        // hydration parent is the parent host component of this host text.\n        var returnFiber = hydrationParentFiber;\n\n        if (returnFiber !== null) {\n          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n          switch (returnFiber.tag) {\n            case HostRoot:\n              {\n                var parentContainer = returnFiber.stateNode.containerInfo;\n                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n                isConcurrentMode);\n                break;\n              }\n\n            case HostComponent:\n              {\n                var parentType = returnFiber.type;\n                var parentProps = returnFiber.memoizedProps;\n                var parentInstance = returnFiber.stateNode;\n                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n                isConcurrentMode);\n                break;\n              }\n          }\n        }\n      }\n\n      return shouldUpdate;\n    }\n\n    function prepareToHydrateHostSuspenseInstance(fiber) {\n      if (!supportsHydration) {\n        throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n\n      var suspenseState = fiber.memoizedState;\n      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n      if (!suspenseInstance) {\n        throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n\n      hydrateSuspenseInstance(suspenseInstance, fiber);\n    }\n\n    function skipPastDehydratedSuspenseInstance(fiber) {\n      if (!supportsHydration) {\n        throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n\n      var suspenseState = fiber.memoizedState;\n      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n      if (!suspenseInstance) {\n        throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n\n      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n    }\n\n    function popToNextHostParent(fiber) {\n      var parent = fiber.return;\n\n      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n        parent = parent.return;\n      }\n\n      hydrationParentFiber = parent;\n    }\n\n    function popHydrationState(fiber) {\n      if (!supportsHydration) {\n        return false;\n      }\n\n      if (fiber !== hydrationParentFiber) {\n        // We're deeper than the current hydration context, inside an inserted\n        // tree.\n        return false;\n      }\n\n      if (!isHydrating) {\n        // If we're not currently hydrating but we're in a hydration context, then\n        // we were an insertion and now need to pop up reenter hydration of our\n        // siblings.\n        popToNextHostParent(fiber);\n        isHydrating = true;\n        return false;\n      } // If we have any remaining hydratable nodes, we need to delete them now.\n      // We only do this deeper than head and body since they tend to have random\n      // other nodes in them. We also ignore components with pure text content in\n      // side of them. We also don't delete anything inside the root container.\n\n\n      if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n        var nextInstance = nextHydratableInstance;\n\n        if (nextInstance) {\n          if (shouldClientRenderOnMismatch(fiber)) {\n            warnIfUnhydratedTailNodes(fiber);\n            throwOnHydrationMismatch();\n          } else {\n            while (nextInstance) {\n              deleteHydratableInstance(fiber, nextInstance);\n              nextInstance = getNextHydratableSibling(nextInstance);\n            }\n          }\n        }\n      }\n\n      popToNextHostParent(fiber);\n\n      if (fiber.tag === SuspenseComponent) {\n        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n      } else {\n        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n      }\n\n      return true;\n    }\n\n    function hasUnhydratedTailNodes() {\n      return isHydrating && nextHydratableInstance !== null;\n    }\n\n    function warnIfUnhydratedTailNodes(fiber) {\n      var nextInstance = nextHydratableInstance;\n\n      while (nextInstance) {\n        warnUnhydratedInstance(fiber, nextInstance);\n        nextInstance = getNextHydratableSibling(nextInstance);\n      }\n    }\n\n    function resetHydrationState() {\n      if (!supportsHydration) {\n        return;\n      }\n\n      hydrationParentFiber = null;\n      nextHydratableInstance = null;\n      isHydrating = false;\n      didSuspend = false;\n    }\n\n    function upgradeHydrationErrorsToRecoverable() {\n      if (hydrationErrors !== null) {\n        // Successfully completed a forced client render. The errors that occurred\n        // during the hydration attempt are now recovered. We will log them in\n        // commit phase, once the entire tree has finished.\n        queueRecoverableErrors(hydrationErrors);\n        hydrationErrors = null;\n      }\n    }\n\n    function getIsHydrating() {\n      return isHydrating;\n    }\n\n    function queueHydrationError(error) {\n      if (hydrationErrors === null) {\n        hydrationErrors = [error];\n      } else {\n        hydrationErrors.push(error);\n      }\n    }\n\n    var didWarnAboutMaps;\n    var didWarnAboutGenerators;\n    var didWarnAboutStringRefs;\n    var ownerHasKeyUseWarning;\n    var ownerHasFunctionTypeWarning;\n\n    var warnForMissingKey = function (child, returnFiber) {};\n\n    {\n      didWarnAboutMaps = false;\n      didWarnAboutGenerators = false;\n      didWarnAboutStringRefs = {};\n      /**\n       * Warn if there's no key explicitly set on dynamic arrays of children or\n       * object keys are not valid. This allows us to keep track of children between\n       * updates.\n       */\n\n      ownerHasKeyUseWarning = {};\n      ownerHasFunctionTypeWarning = {};\n\n      warnForMissingKey = function (child, returnFiber) {\n        if (child === null || typeof child !== 'object') {\n          return;\n        }\n\n        if (!child._store || child._store.validated || child.key != null) {\n          return;\n        }\n\n        if (typeof child._store !== 'object') {\n          throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        child._store.validated = true;\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (ownerHasKeyUseWarning[componentName]) {\n          return;\n        }\n\n        ownerHasKeyUseWarning[componentName] = true;\n        error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n      };\n    }\n\n    function coerceRef(returnFiber, current, element) {\n      var mixedRef = element.ref;\n\n      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n        {\n          // TODO: Clean this up once we turn on the string ref warning for\n          // everyone, because the strict mode case will no longer be relevant\n          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n          // because these cannot be automatically converted to an arrow function\n          // using a codemod. Therefore, we don't have to warn about string refs again.\n          !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n            var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n            if (!didWarnAboutStringRefs[componentName]) {\n              {\n                error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n              }\n              didWarnAboutStringRefs[componentName] = true;\n            }\n          }\n        }\n\n        if (element._owner) {\n          var owner = element._owner;\n          var inst;\n\n          if (owner) {\n            var ownerFiber = owner;\n\n            if (ownerFiber.tag !== ClassComponent) {\n              throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n            }\n\n            inst = ownerFiber.stateNode;\n          }\n\n          if (!inst) {\n            throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n          } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n          var resolvedInst = inst;\n          {\n            checkPropStringCoercion(mixedRef, 'ref');\n          }\n          var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n          if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n            return current.ref;\n          }\n\n          var ref = function (value) {\n            var refs = resolvedInst.refs;\n\n            if (refs === emptyRefsObject) {\n              // This is a lazy pooled frozen object, so we need to initialize.\n              refs = resolvedInst.refs = {};\n            }\n\n            if (value === null) {\n              delete refs[stringRef];\n            } else {\n              refs[stringRef] = value;\n            }\n          };\n\n          ref._stringRef = stringRef;\n          return ref;\n        } else {\n          if (typeof mixedRef !== 'string') {\n            throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n          }\n\n          if (!element._owner) {\n            throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n          }\n        }\n      }\n\n      return mixedRef;\n    }\n\n    function throwOnInvalidObjectType(returnFiber, newChild) {\n      var childString = Object.prototype.toString.call(newChild);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n    }\n\n    function warnOnFunctionType(returnFiber) {\n      {\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (ownerHasFunctionTypeWarning[componentName]) {\n          return;\n        }\n\n        ownerHasFunctionTypeWarning[componentName] = true;\n        error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n      }\n    }\n\n    function resolveLazy(lazyType) {\n      var payload = lazyType._payload;\n      var init = lazyType._init;\n      return init(payload);\n    } // This wrapper function exists because I expect to clone the code in each path\n    // to be able to optimize each path individually by branching early. This needs\n    // a compiler or we can do it manually. Helpers that don't need this branching\n    // live outside of this function.\n\n\n    function ChildReconciler(shouldTrackSideEffects) {\n      function deleteChild(returnFiber, childToDelete) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return;\n        }\n\n        var deletions = returnFiber.deletions;\n\n        if (deletions === null) {\n          returnFiber.deletions = [childToDelete];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(childToDelete);\n        }\n      }\n\n      function deleteRemainingChildren(returnFiber, currentFirstChild) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return null;\n        } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n        // assuming that after the first child we've already added everything.\n\n\n        var childToDelete = currentFirstChild;\n\n        while (childToDelete !== null) {\n          deleteChild(returnFiber, childToDelete);\n          childToDelete = childToDelete.sibling;\n        }\n\n        return null;\n      }\n\n      function mapRemainingChildren(returnFiber, currentFirstChild) {\n        // Add the remaining children to a temporary map so that we can find them by\n        // keys quickly. Implicit (null) keys get added to this set with their index\n        // instead.\n        var existingChildren = new Map();\n        var existingChild = currentFirstChild;\n\n        while (existingChild !== null) {\n          if (existingChild.key !== null) {\n            existingChildren.set(existingChild.key, existingChild);\n          } else {\n            existingChildren.set(existingChild.index, existingChild);\n          }\n\n          existingChild = existingChild.sibling;\n        }\n\n        return existingChildren;\n      }\n\n      function useFiber(fiber, pendingProps) {\n        // We currently set sibling to null and index to 0 here because it is easy\n        // to forget to do before returning it. E.g. for the single child case.\n        var clone = createWorkInProgress(fiber, pendingProps);\n        clone.index = 0;\n        clone.sibling = null;\n        return clone;\n      }\n\n      function placeChild(newFiber, lastPlacedIndex, newIndex) {\n        newFiber.index = newIndex;\n\n        if (!shouldTrackSideEffects) {\n          // During hydration, the useId algorithm needs to know which fibers are\n          // part of a list of children (arrays, iterators).\n          newFiber.flags |= Forked;\n          return lastPlacedIndex;\n        }\n\n        var current = newFiber.alternate;\n\n        if (current !== null) {\n          var oldIndex = current.index;\n\n          if (oldIndex < lastPlacedIndex) {\n            // This is a move.\n            newFiber.flags |= Placement;\n            return lastPlacedIndex;\n          } else {\n            // This item can stay in place.\n            return oldIndex;\n          }\n        } else {\n          // This is an insertion.\n          newFiber.flags |= Placement;\n          return lastPlacedIndex;\n        }\n      }\n\n      function placeSingleChild(newFiber) {\n        // This is simpler for the single child case. We only need to do a\n        // placement for inserting new children.\n        if (shouldTrackSideEffects && newFiber.alternate === null) {\n          newFiber.flags |= Placement;\n        }\n\n        return newFiber;\n      }\n\n      function updateTextNode(returnFiber, current, textContent, lanes) {\n        if (current === null || current.tag !== HostText) {\n          // Insert\n          var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, textContent);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function updateElement(returnFiber, current, element, lanes) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n        }\n\n        if (current !== null) {\n          if (current.elementType === elementType || // Keep this check inline so it only runs on the false path:\n          isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n            // Move based on index\n            var existing = useFiber(current, element.props);\n            existing.ref = coerceRef(returnFiber, current, element);\n            existing.return = returnFiber;\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } // Insert\n\n\n        var created = createFiberFromElement(element, returnFiber.mode, lanes);\n        created.ref = coerceRef(returnFiber, current, element);\n        created.return = returnFiber;\n        return created;\n      }\n\n      function updatePortal(returnFiber, current, portal, lanes) {\n        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n          // Insert\n          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function updateFragment(returnFiber, current, fragment, lanes, key) {\n        if (current === null || current.tag !== Fragment) {\n          // Insert\n          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, fragment);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function createChild(returnFiber, newChild, lanes) {\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        }\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n                _created.ref = coerceRef(returnFiber, null, newChild);\n                _created.return = returnFiber;\n                return _created;\n              }\n\n            case REACT_PORTAL_TYPE:\n              {\n                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n                _created2.return = returnFiber;\n                return _created2;\n              }\n\n            case REACT_LAZY_TYPE:\n              {\n                {\n                  var payload = newChild._payload;\n                  var init = newChild._init;\n                  return createChild(returnFiber, init(payload), lanes);\n                }\n              }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n            _created3.return = returnFiber;\n            return _created3;\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n\n      function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n        // Update the fiber if the keys match, otherwise return null.\n        var key = oldFiber !== null ? oldFiber.key : null;\n\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          if (key !== null) {\n            return null;\n          }\n\n          return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n        }\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updateElement(returnFiber, oldFiber, newChild, lanes);\n                } else {\n                  return null;\n                }\n              }\n\n            case REACT_PORTAL_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updatePortal(returnFiber, oldFiber, newChild, lanes);\n                } else {\n                  return null;\n                }\n              }\n\n            case REACT_LAZY_TYPE:\n              {\n                {\n                  var payload = newChild._payload;\n                  var init = newChild._init;\n                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n                }\n              }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            if (key !== null) {\n              return null;\n            }\n\n            return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n\n      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys, so we neither have to check the old nor\n          // new node for the key. If both are text nodes, they match.\n          var matchedFiber = existingChildren.get(newIdx) || null;\n          return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n        }\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n                return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n              }\n\n            case REACT_PORTAL_TYPE:\n              {\n                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n              }\n\n            case REACT_LAZY_TYPE:\n              {\n                var payload = newChild._payload;\n                var init = newChild._init;\n                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n              }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n            return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n      /**\n       * Warns if there is a duplicate or missing key\n       */\n\n\n      function warnOnInvalidKey(child, knownKeys, returnFiber) {\n        {\n          if (typeof child !== 'object' || child === null) {\n            return knownKeys;\n          }\n\n          switch (child.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n            case REACT_PORTAL_TYPE:\n              warnForMissingKey(child, returnFiber);\n              var key = child.key;\n\n              if (typeof key !== 'string') {\n                break;\n              }\n\n              if (knownKeys === null) {\n                knownKeys = new Set();\n                knownKeys.add(key);\n                break;\n              }\n\n              if (!knownKeys.has(key)) {\n                knownKeys.add(key);\n                break;\n              }\n\n              error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n              break;\n\n            case REACT_LAZY_TYPE:\n              {\n                var payload = child._payload;\n                var init = child._init;\n                warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n                break;\n              }\n          }\n        }\n        return knownKeys;\n      }\n\n      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n        // This algorithm can't optimize by searching from both ends since we\n        // don't have backpointers on fibers. I'm trying to see how far we can get\n        // with that model. If it ends up not being worth the tradeoffs, we can\n        // add it later.\n        // Even with a two ended optimization, we'd want to optimize for the case\n        // where there are few changes and brute force the comparison instead of\n        // going for the Map. It'd like to explore hitting that path first in\n        // forward-only mode and only go for the Map once we notice that we need\n        // lots of look ahead. This doesn't handle reversal as well as two ended\n        // search but that's unusual. Besides, for the two ended optimization to\n        // work on Iterables, we'd need to copy the whole set.\n        // In this first iteration, we'll just live with hitting the bad case\n        // (adding everything to a Map) in for every insert/move.\n        // If you change this code, also update reconcileChildrenIterator() which\n        // uses the same algorithm.\n        {\n          // First, validate keys.\n          var knownKeys = null;\n\n          for (var i = 0; i < newChildren.length; i++) {\n            var child = newChildren[i];\n            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n          }\n        }\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n\n        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n\n          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n\n            break;\n          }\n\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n\n        if (newIdx === newChildren.length) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n\n          if (getIsHydrating()) {\n            var numberOfForks = newIdx;\n            pushTreeFork(returnFiber, numberOfForks);\n          }\n\n          return resultingFirstChild;\n        }\n\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n            if (_newFiber === null) {\n              continue;\n            }\n\n            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber;\n            } else {\n              previousNewFiber.sibling = _newFiber;\n            }\n\n            previousNewFiber = _newFiber;\n          }\n\n          if (getIsHydrating()) {\n            var _numberOfForks = newIdx;\n            pushTreeFork(returnFiber, _numberOfForks);\n          }\n\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; newIdx < newChildren.length; newIdx++) {\n          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n          if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber2.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n              }\n            }\n\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber2;\n            } else {\n              previousNewFiber.sibling = _newFiber2;\n            }\n\n            previousNewFiber = _newFiber2;\n          }\n        }\n\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n\n        if (getIsHydrating()) {\n          var _numberOfForks2 = newIdx;\n          pushTreeFork(returnFiber, _numberOfForks2);\n        }\n\n        return resultingFirstChild;\n      }\n\n      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n        // This is the same implementation as reconcileChildrenArray(),\n        // but using the iterator instead.\n        var iteratorFn = getIteratorFn(newChildrenIterable);\n\n        if (typeof iteratorFn !== 'function') {\n          throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n        }\n\n        {\n          // We don't support rendering Generators because it's a mutation.\n          // See https://github.com/facebook/react/issues/12995\n          if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n          newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n            if (!didWarnAboutGenerators) {\n              error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n            }\n\n            didWarnAboutGenerators = true;\n          } // Warn about using Maps as children\n\n\n          if (newChildrenIterable.entries === iteratorFn) {\n            if (!didWarnAboutMaps) {\n              error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n            }\n\n            didWarnAboutMaps = true;\n          } // First, validate keys.\n          // We'll get a different iterator later for the main pass.\n\n\n          var _newChildren = iteratorFn.call(newChildrenIterable);\n\n          if (_newChildren) {\n            var knownKeys = null;\n\n            var _step = _newChildren.next();\n\n            for (; !_step.done; _step = _newChildren.next()) {\n              var child = _step.value;\n              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n            }\n          }\n        }\n        var newChildren = iteratorFn.call(newChildrenIterable);\n\n        if (newChildren == null) {\n          throw new Error('An iterable object provided no iterator.');\n        }\n\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        var step = newChildren.next();\n\n        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n\n          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n\n            break;\n          }\n\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n\n        if (step.done) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n\n          if (getIsHydrating()) {\n            var numberOfForks = newIdx;\n            pushTreeFork(returnFiber, numberOfForks);\n          }\n\n          return resultingFirstChild;\n        }\n\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n            if (_newFiber3 === null) {\n              continue;\n            }\n\n            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber3;\n            } else {\n              previousNewFiber.sibling = _newFiber3;\n            }\n\n            previousNewFiber = _newFiber3;\n          }\n\n          if (getIsHydrating()) {\n            var _numberOfForks3 = newIdx;\n            pushTreeFork(returnFiber, _numberOfForks3);\n          }\n\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; !step.done; newIdx++, step = newChildren.next()) {\n          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n          if (_newFiber4 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber4.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n              }\n            }\n\n            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber4;\n            } else {\n              previousNewFiber.sibling = _newFiber4;\n            }\n\n            previousNewFiber = _newFiber4;\n          }\n        }\n\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n\n        if (getIsHydrating()) {\n          var _numberOfForks4 = newIdx;\n          pushTreeFork(returnFiber, _numberOfForks4);\n        }\n\n        return resultingFirstChild;\n      }\n\n      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n        // There's no need to check for keys on text nodes since we don't have a\n        // way to define them.\n        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n          // We already have an existing node so let's just update it and delete\n          // the rest.\n          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n          var existing = useFiber(currentFirstChild, textContent);\n          existing.return = returnFiber;\n          return existing;\n        } // The existing first child is not a text node so we need to create one\n        // and delete the existing ones.\n\n\n        deleteRemainingChildren(returnFiber, currentFirstChild);\n        var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n\n      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n        var key = element.key;\n        var child = currentFirstChild;\n\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            var elementType = element.type;\n\n            if (elementType === REACT_FRAGMENT_TYPE) {\n              if (child.tag === Fragment) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.props.children);\n                existing.return = returnFiber;\n                {\n                  existing._debugSource = element._source;\n                  existing._debugOwner = element._owner;\n                }\n                return existing;\n              }\n            } else {\n              if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:\n              isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.\n              // We need to do this after the Hot Reloading check above,\n              // because hot reloading has different semantics than prod because\n              // it doesn't resuspend. So we can't let the call below suspend.\n              typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n\n                var _existing = useFiber(child, element.props);\n\n                _existing.ref = coerceRef(returnFiber, child, element);\n                _existing.return = returnFiber;\n                {\n                  _existing._debugSource = element._source;\n                  _existing._debugOwner = element._owner;\n                }\n                return _existing;\n              }\n            } // Didn't match.\n\n\n            deleteRemainingChildren(returnFiber, child);\n            break;\n          } else {\n            deleteChild(returnFiber, child);\n          }\n\n          child = child.sibling;\n        }\n\n        if (element.type === REACT_FRAGMENT_TYPE) {\n          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n          created.return = returnFiber;\n          return created;\n        } else {\n          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n          _created4.return = returnFiber;\n          return _created4;\n        }\n      }\n\n      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n        var key = portal.key;\n        var child = currentFirstChild;\n\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              var existing = useFiber(child, portal.children || []);\n              existing.return = returnFiber;\n              return existing;\n            } else {\n              deleteRemainingChildren(returnFiber, child);\n              break;\n            }\n          } else {\n            deleteChild(returnFiber, child);\n          }\n\n          child = child.sibling;\n        }\n\n        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      } // This API will tag the children with the side-effect of the reconciliation\n      // itself. They will be added to the side-effect list as we pass through the\n      // children and the parent.\n\n\n      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n        // This function is not recursive.\n        // If the top level item is an array, we treat it as a set of children,\n        // not as a fragment. Nested arrays on the other hand will be treated as\n        // fragment nodes. Recursion happens at the normal flow.\n        // Handle top level unkeyed fragments as if they were arrays.\n        // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n        // We treat the ambiguous cases above the same.\n        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n        if (isUnkeyedTopLevelFragment) {\n          newChild = newChild.props.children;\n        } // Handle object types\n\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n            case REACT_PORTAL_TYPE:\n              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n            case REACT_LAZY_TYPE:\n              {\n                var payload = newChild._payload;\n                var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n                return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n              }\n          }\n\n          if (isArray(newChild)) {\n            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n          }\n\n          if (getIteratorFn(newChild)) {\n            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n        }\n\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        } // Remaining cases are all treated as empty.\n\n        return deleteRemainingChildren(returnFiber, currentFirstChild);\n      }\n\n      return reconcileChildFibers;\n    }\n\n    var reconcileChildFibers = ChildReconciler(true);\n    var mountChildFibers = ChildReconciler(false);\n\n    function cloneChildFibers(current, workInProgress) {\n      if (current !== null && workInProgress.child !== current.child) {\n        throw new Error('Resuming work not yet implemented.');\n      }\n\n      if (workInProgress.child === null) {\n        return;\n      }\n\n      var currentChild = workInProgress.child;\n      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n      workInProgress.child = newChild;\n      newChild.return = workInProgress;\n\n      while (currentChild.sibling !== null) {\n        currentChild = currentChild.sibling;\n        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n        newChild.return = workInProgress;\n      }\n\n      newChild.sibling = null;\n    } // Reset a workInProgress child set to prepare it for a second pass.\n\n\n    function resetChildFibers(workInProgress, lanes) {\n      var child = workInProgress.child;\n\n      while (child !== null) {\n        resetWorkInProgress(child, lanes);\n        child = child.sibling;\n      }\n    }\n\n    var NO_CONTEXT = {};\n    var contextStackCursor$1 = createCursor(NO_CONTEXT);\n    var contextFiberStackCursor = createCursor(NO_CONTEXT);\n    var rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\n    function requiredContext(c) {\n      if (c === NO_CONTEXT) {\n        throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n      }\n\n      return c;\n    }\n\n    function getRootHostContainer() {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      return rootInstance;\n    }\n\n    function pushHostContainer(fiber, nextRootInstance) {\n      // Push current root instance onto the stack;\n      // This allows us to reset root when portals are popped.\n      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n      // This enables us to pop only Fibers that provide unique contexts.\n\n      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n      // However, we can't just call getRootHostContext() and push it because\n      // we'd have a different number of entries on the stack depending on\n      // whether getRootHostContext() throws somewhere in renderer code or not.\n      // So we push an empty value first. This lets us safely unwind on errors.\n\n      push(contextStackCursor$1, NO_CONTEXT, fiber);\n      var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n      pop(contextStackCursor$1, fiber);\n      push(contextStackCursor$1, nextRootContext, fiber);\n    }\n\n    function popHostContainer(fiber) {\n      pop(contextStackCursor$1, fiber);\n      pop(contextFiberStackCursor, fiber);\n      pop(rootInstanceStackCursor, fiber);\n    }\n\n    function getHostContext() {\n      var context = requiredContext(contextStackCursor$1.current);\n      return context;\n    }\n\n    function pushHostContext(fiber) {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      var context = requiredContext(contextStackCursor$1.current);\n      var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n      if (context === nextContext) {\n        return;\n      } // Track the context and the Fiber that provided it.\n      // This enables us to pop only Fibers that provide unique contexts.\n\n\n      push(contextFiberStackCursor, fiber, fiber);\n      push(contextStackCursor$1, nextContext, fiber);\n    }\n\n    function popHostContext(fiber) {\n      // Do not pop unless this Fiber provided the current context.\n      // pushHostContext() only pushes Fibers that provide unique contexts.\n      if (contextFiberStackCursor.current !== fiber) {\n        return;\n      }\n\n      pop(contextStackCursor$1, fiber);\n      pop(contextFiberStackCursor, fiber);\n    }\n\n    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n    // inherited deeply down the subtree. The upper bits only affect\n    // this immediate suspense boundary and gets reset each new\n    // boundary or suspense list.\n\n    var SubtreeSuspenseContextMask = 1; // Subtree Flags:\n    // InvisibleParentSuspenseContext indicates that one of our parent Suspense\n    // boundaries is not currently showing visible main content.\n    // Either because it is already showing a fallback or is not mounted at all.\n    // We can use this to determine if it is desirable to trigger a fallback at\n    // the parent. If not, then we might need to trigger undesirable boundaries\n    // and/or suspend the commit to avoid hiding the parent content.\n\n    var InvisibleParentSuspenseContext = 1; // Shallow Flags:\n    // ForceSuspenseFallback can be used by SuspenseList to force newly added\n    // items into their fallback state during one of the render passes.\n\n    var ForceSuspenseFallback = 2;\n    var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n\n    function hasSuspenseContext(parentContext, flag) {\n      return (parentContext & flag) !== 0;\n    }\n\n    function setDefaultShallowSuspenseContext(parentContext) {\n      return parentContext & SubtreeSuspenseContextMask;\n    }\n\n    function setShallowSuspenseContext(parentContext, shallowContext) {\n      return parentContext & SubtreeSuspenseContextMask | shallowContext;\n    }\n\n    function addSubtreeSuspenseContext(parentContext, subtreeContext) {\n      return parentContext | subtreeContext;\n    }\n\n    function pushSuspenseContext(fiber, newContext) {\n      push(suspenseStackCursor, newContext, fiber);\n    }\n\n    function popSuspenseContext(fiber) {\n      pop(suspenseStackCursor, fiber);\n    }\n\n    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n      // If it was the primary children that just suspended, capture and render the\n      // fallback. Otherwise, don't capture and bubble to the next boundary.\n      var nextState = workInProgress.memoizedState;\n\n      if (nextState !== null) {\n        if (nextState.dehydrated !== null) {\n          // A dehydrated boundary always captures.\n          return true;\n        }\n\n        return false;\n      }\n\n      var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n\n      {\n        return true;\n      } // If it's a boundary we should avoid, then we prefer to bubble up to the\n    }\n\n    function findFirstSuspended(row) {\n      var node = row;\n\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n\n          if (state !== null) {\n            var dehydrated = state.dehydrated;\n\n            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n              return node;\n            }\n          }\n        } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n        // keep track of whether it suspended or not.\n        node.memoizedProps.revealOrder !== undefined) {\n          var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n          if (didSuspend) {\n            return node;\n          }\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === row) {\n          return null;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === row) {\n            return null;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n\n      return null;\n    }\n\n    var NoFlags$1 =\n    /*   */\n    0; // Represents whether effect should fire.\n\n    var HasEffect =\n    /* */\n    1; // Represents the phase in which the effect (not the clean-up) fires.\n\n    var Insertion =\n    /*  */\n    2;\n    var Layout =\n    /*    */\n    4;\n    var Passive$1 =\n    /*   */\n    8; // and should be reset before starting a new render.\n    // This tracks which mutable sources need to be reset after a render.\n\n    var workInProgressSources = [];\n\n    function resetWorkInProgressVersions() {\n      for (var i = 0; i < workInProgressSources.length; i++) {\n        var mutableSource = workInProgressSources[i];\n\n        if (isPrimaryRenderer) {\n          mutableSource._workInProgressVersionPrimary = null;\n        } else {\n          mutableSource._workInProgressVersionSecondary = null;\n        }\n      }\n\n      workInProgressSources.length = 0;\n    } // This ensures that the version used for server rendering matches the one\n    // that is eventually read during hydration.\n    // If they don't match there's a potential tear and a full deopt render is required.\n\n\n    function registerMutableSourceForHydration(root, mutableSource) {\n      var getVersion = mutableSource._getVersion;\n      var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n      // Retaining it forever may interfere with GC.\n\n      if (root.mutableSourceEagerHydrationData == null) {\n        root.mutableSourceEagerHydrationData = [mutableSource, version];\n      } else {\n        root.mutableSourceEagerHydrationData.push(mutableSource, version);\n      }\n    }\n\n    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n        ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n    var didWarnAboutMismatchedHooksForComponent;\n    var didWarnUncachedGetSnapshot;\n    {\n      didWarnAboutMismatchedHooksForComponent = new Set();\n    } // These are set right before calling the component.\n\n    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n    // the work-in-progress hook.\n\n    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n    // current hook list is the list that belongs to the current fiber. The\n    // work-in-progress hook list is a new list that will be added to the\n    // work-in-progress fiber.\n\n    var currentHook = null;\n    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n    // does not get reset if we do another render pass; only when we're completely\n    // finished evaluating this component. This is an optimization so we know\n    // whether we need to clear render phase updates after a throw.\n\n    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n    // gets reset after each attempt.\n    // TODO: Maybe there's some way to consolidate this with\n    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\n    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\n    var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n    // hydration). This counter is global, so client ids are not stable across\n    // render attempts.\n\n    var globalClientIdCounter = 0;\n    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\n    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n    // The list stores the order of hooks used during the initial render (mount).\n    // Subsequent renders (updates) reference this list.\n\n    var hookTypesDev = null;\n    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n    // When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\n    var ignorePreviousDependencies = false;\n\n    function mountHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n\n        if (hookTypesDev === null) {\n          hookTypesDev = [hookName];\n        } else {\n          hookTypesDev.push(hookName);\n        }\n      }\n    }\n\n    function updateHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n\n        if (hookTypesDev !== null) {\n          hookTypesUpdateIndexDev++;\n\n          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n            warnOnHookMismatchInDev(hookName);\n          }\n        }\n      }\n    }\n\n    function checkDepsAreArrayDev(deps) {\n      {\n        if (deps !== undefined && deps !== null && !isArray(deps)) {\n          // Verify deps, but only on mount to avoid extra checks.\n          // It's unlikely their type would change as usually you define them inline.\n          error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n        }\n      }\n    }\n\n    function warnOnHookMismatchInDev(currentHookName) {\n      {\n        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n          didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n          if (hookTypesDev !== null) {\n            var table = '';\n            var secondColumnStart = 30;\n\n            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n              var oldHookName = hookTypesDev[i];\n              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n              var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n              // lol @ IE not supporting String#repeat\n\n              while (row.length < secondColumnStart) {\n                row += ' ';\n              }\n\n              row += newHookName + '\\n';\n              table += row;\n            }\n\n            error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n          }\n        }\n      }\n    }\n\n    function throwInvalidHookError() {\n      throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n    }\n\n    function areHookInputsEqual(nextDeps, prevDeps) {\n      {\n        if (ignorePreviousDependencies) {\n          // Only true when this component is being hot reloaded.\n          return false;\n        }\n      }\n\n      if (prevDeps === null) {\n        {\n          error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n        }\n        return false;\n      }\n\n      {\n        // Don't bother comparing lengths in prod because these arrays should be\n        // passed inline.\n        if (nextDeps.length !== prevDeps.length) {\n          error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n        }\n      }\n\n      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n        if (objectIs(nextDeps[i], prevDeps[i])) {\n          continue;\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n\n    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n      renderLanes = nextRenderLanes;\n      currentlyRenderingFiber$1 = workInProgress;\n      {\n        hookTypesDev = current !== null ? current._debugHookTypes : null;\n        hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n      }\n      workInProgress.memoizedState = null;\n      workInProgress.updateQueue = null;\n      workInProgress.lanes = NoLanes; // The following should have already been reset\n      // currentHook = null;\n      // workInProgressHook = null;\n      // didScheduleRenderPhaseUpdate = false;\n      // localIdCounter = 0;\n      // TODO Warn if no hooks are used at all during mount, then some are used during update.\n      // Currently we will identify the update render as a mount because memoizedState === null.\n      // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n      // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n      // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n      // so memoizedState would be null during updates and mounts.\n\n      {\n        if (current !== null && current.memoizedState !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n        } else if (hookTypesDev !== null) {\n          // This dispatcher handles an edge case where a component is updating,\n          // but no stateful hooks have been used.\n          // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n          // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n          // This dispatcher does that.\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n        } else {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n      var children = Component(props, secondArg); // Check if there was a render phase update\n\n      if (didScheduleRenderPhaseUpdateDuringThisPass) {\n        // Keep rendering in a loop for as long as render phase updates continue to\n        // be scheduled. Use a counter to prevent infinite loops.\n        var numberOfReRenders = 0;\n\n        do {\n          didScheduleRenderPhaseUpdateDuringThisPass = false;\n          localIdCounter = 0;\n\n          if (numberOfReRenders >= RE_RENDER_LIMIT) {\n            throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n          }\n\n          numberOfReRenders += 1;\n          {\n            // Even when hot reloading, allow dependencies to stabilize\n            // after first render to prevent infinite render phase updates.\n            ignorePreviousDependencies = false;\n          } // Start over from the beginning of the list\n\n          currentHook = null;\n          workInProgressHook = null;\n          workInProgress.updateQueue = null;\n          {\n            // Also validate hook order for cascading updates.\n            hookTypesUpdateIndexDev = -1;\n          }\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n          children = Component(props, secondArg);\n        } while (didScheduleRenderPhaseUpdateDuringThisPass);\n      } // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n\n\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n      {\n        workInProgress._debugHookTypes = hookTypesDev;\n      } // This check uses currentHook so that it works the same in DEV and prod bundles.\n      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        currentHookNameInDev = null;\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n        // render. If this fires, it suggests that we incorrectly reset the static\n        // flags in some other part of the codebase. This has happened before, for\n        // example, in the SuspenseList implementation.\n\n        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n        // and creates false positives. To make this work in legacy mode, we'd\n        // need to mark fibers that commit in an incomplete state, somehow. For\n        // now I'll disable the warning that most of the bugs that would trigger\n        // it are either exclusive to concurrent mode or exist in both.\n        (current.mode & ConcurrentMode) !== NoMode) {\n          error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n        }\n      }\n      didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n      // localIdCounter = 0;\n\n      if (didRenderTooFewHooks) {\n        throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n      }\n\n      return children;\n    }\n\n    function checkDidRenderIdHook() {\n      // This should be called immediately after every renderWithHooks call.\n      // Conceptually, it's part of the return value of renderWithHooks; it's only a\n      // separate function to avoid using an array tuple.\n      var didRenderIdHook = localIdCounter !== 0;\n      localIdCounter = 0;\n      return didRenderIdHook;\n    }\n\n    function bailoutHooks(current, workInProgress, lanes) {\n      workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n      // complete phase (bubbleProperties).\n\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n      } else {\n        workInProgress.flags &= ~(Passive | Update);\n      }\n\n      current.lanes = removeLanes(current.lanes, lanes);\n    }\n\n    function resetHooksAfterThrow() {\n      // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n      if (didScheduleRenderPhaseUpdate) {\n        // There were render phase updates. These are only valid for this render\n        // phase, which we are now aborting. Remove the updates from the queues so\n        // they do not persist to the next render. Do not remove updates from hooks\n        // that weren't processed.\n        //\n        // Only reset the updates from the queue if it has a clone. If it does\n        // not have a clone, that means it wasn't processed, and the updates were\n        // scheduled before we entered the render phase.\n        var hook = currentlyRenderingFiber$1.memoizedState;\n\n        while (hook !== null) {\n          var queue = hook.queue;\n\n          if (queue !== null) {\n            queue.pending = null;\n          }\n\n          hook = hook.next;\n        }\n\n        didScheduleRenderPhaseUpdate = false;\n      }\n\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        currentHookNameInDev = null;\n        isUpdatingOpaqueValueInRenderPhase = false;\n      }\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n    }\n\n    function mountWorkInProgressHook() {\n      var hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null\n      };\n\n      if (workInProgressHook === null) {\n        // This is the first hook in the list\n        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n      } else {\n        // Append to the end of the list\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n\n      return workInProgressHook;\n    }\n\n    function updateWorkInProgressHook() {\n      // This function is used both for updates and for re-renders triggered by a\n      // render phase update. It assumes there is either a current hook we can\n      // clone, or a work-in-progress hook from a previous render pass that we can\n      // use as a base. When we reach the end of the base list, we must switch to\n      // the dispatcher used for mounts.\n      var nextCurrentHook;\n\n      if (currentHook === null) {\n        var current = currentlyRenderingFiber$1.alternate;\n\n        if (current !== null) {\n          nextCurrentHook = current.memoizedState;\n        } else {\n          nextCurrentHook = null;\n        }\n      } else {\n        nextCurrentHook = currentHook.next;\n      }\n\n      var nextWorkInProgressHook;\n\n      if (workInProgressHook === null) {\n        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n      } else {\n        nextWorkInProgressHook = workInProgressHook.next;\n      }\n\n      if (nextWorkInProgressHook !== null) {\n        // There's already a work-in-progress. Reuse it.\n        workInProgressHook = nextWorkInProgressHook;\n        nextWorkInProgressHook = workInProgressHook.next;\n        currentHook = nextCurrentHook;\n      } else {\n        // Clone from the current hook.\n        if (nextCurrentHook === null) {\n          throw new Error('Rendered more hooks than during the previous render.');\n        }\n\n        currentHook = nextCurrentHook;\n        var newHook = {\n          memoizedState: currentHook.memoizedState,\n          baseState: currentHook.baseState,\n          baseQueue: currentHook.baseQueue,\n          queue: currentHook.queue,\n          next: null\n        };\n\n        if (workInProgressHook === null) {\n          // This is the first hook in the list.\n          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n        } else {\n          // Append to the end of the list.\n          workInProgressHook = workInProgressHook.next = newHook;\n        }\n      }\n\n      return workInProgressHook;\n    }\n\n    function createFunctionComponentUpdateQueue() {\n      return {\n        lastEffect: null,\n        stores: null\n      };\n    }\n\n    function basicStateReducer(state, action) {\n      // $FlowFixMe: Flow doesn't like mixed types\n      return typeof action === 'function' ? action(state) : action;\n    }\n\n    function mountReducer(reducer, initialArg, init) {\n      var hook = mountWorkInProgressHook();\n      var initialState;\n\n      if (init !== undefined) {\n        initialState = init(initialArg);\n      } else {\n        initialState = initialArg;\n      }\n\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        interleaved: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: reducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n      return [hook.memoizedState, dispatch];\n    }\n\n    function updateReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n\n      if (queue === null) {\n        throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n      }\n\n      queue.lastRenderedReducer = reducer;\n      var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n      var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n      var pendingQueue = queue.pending;\n\n      if (pendingQueue !== null) {\n        // We have new updates that haven't been processed yet.\n        // We'll add them to the base queue.\n        if (baseQueue !== null) {\n          // Merge the pending queue and the base queue.\n          var baseFirst = baseQueue.next;\n          var pendingFirst = pendingQueue.next;\n          baseQueue.next = pendingFirst;\n          pendingQueue.next = baseFirst;\n        }\n\n        {\n          if (current.baseQueue !== baseQueue) {\n            // Internal invariant that should never happen, but feasibly could in\n            // the future if we implement resuming, or some form of that.\n            error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n          }\n        }\n        current.baseQueue = baseQueue = pendingQueue;\n        queue.pending = null;\n      }\n\n      if (baseQueue !== null) {\n        // We have a queue to process.\n        var first = baseQueue.next;\n        var newState = current.baseState;\n        var newBaseState = null;\n        var newBaseQueueFirst = null;\n        var newBaseQueueLast = null;\n        var update = first;\n\n        do {\n          var updateLane = update.lane;\n\n          if (!isSubsetOfLanes(renderLanes, updateLane)) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              lane: updateLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            } // Update the remaining priority in the queue.\n            // TODO: Don't need to accumulate this. Instead, we can remove\n            // renderLanes from the original lanes.\n\n\n            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n            markSkippedUpdateLanes(updateLane);\n          } else {\n            // This update does have sufficient priority.\n            if (newBaseQueueLast !== null) {\n              var _clone = {\n                // This update is going to be committed so we never want uncommit\n                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                // this will never be skipped by the check above.\n                lane: NoLane,\n                action: update.action,\n                hasEagerState: update.hasEagerState,\n                eagerState: update.eagerState,\n                next: null\n              };\n              newBaseQueueLast = newBaseQueueLast.next = _clone;\n            } // Process this update.\n\n\n            if (update.hasEagerState) {\n              // If this update is a state update (not a reducer) and was processed eagerly,\n              // we can use the eagerly computed state\n              newState = update.eagerState;\n            } else {\n              var action = update.action;\n              newState = reducer(newState, action);\n            }\n          }\n\n          update = update.next;\n        } while (update !== null && update !== first);\n\n        if (newBaseQueueLast === null) {\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast.next = newBaseQueueFirst;\n        } // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n\n        hook.memoizedState = newState;\n        hook.baseState = newBaseState;\n        hook.baseQueue = newBaseQueueLast;\n        queue.lastRenderedState = newState;\n      } // Interleaved updates are stored on a separate queue. We aren't going to\n      // process them during this render, but we do need to track which lanes\n      // are remaining.\n\n\n      var lastInterleaved = queue.interleaved;\n\n      if (lastInterleaved !== null) {\n        var interleaved = lastInterleaved;\n\n        do {\n          var interleavedLane = interleaved.lane;\n          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n          markSkippedUpdateLanes(interleavedLane);\n          interleaved = interleaved.next;\n        } while (interleaved !== lastInterleaved);\n      } else if (baseQueue === null) {\n        // `queue.lanes` is used for entangling transitions. We can set it back to\n        // zero once the queue is empty.\n        queue.lanes = NoLanes;\n      }\n\n      var dispatch = queue.dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n\n    function rerenderReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n\n      if (queue === null) {\n        throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n      }\n\n      queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n      // work-in-progress hook.\n\n      var dispatch = queue.dispatch;\n      var lastRenderPhaseUpdate = queue.pending;\n      var newState = hook.memoizedState;\n\n      if (lastRenderPhaseUpdate !== null) {\n        // The queue doesn't persist past this render pass.\n        queue.pending = null;\n        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n        var update = firstRenderPhaseUpdate;\n\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          var action = update.action;\n          newState = reducer(newState, action);\n          update = update.next;\n        } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n\n        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n        // the base state unless the queue is empty.\n        // TODO: Not sure if this is the desired semantics, but it's what we\n        // do for gDSFP. I can't remember why.\n\n        if (hook.baseQueue === null) {\n          hook.baseState = newState;\n        }\n\n        queue.lastRenderedState = newState;\n      }\n\n      return [newState, dispatch];\n    }\n\n    function mountMutableSource(source, getSnapshot, subscribe) {\n      {\n        return undefined;\n      }\n    }\n\n    function updateMutableSource(source, getSnapshot, subscribe) {\n      {\n        return undefined;\n      }\n    }\n\n    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = mountWorkInProgressHook();\n      var nextSnapshot;\n      var isHydrating = getIsHydrating();\n\n      if (isHydrating) {\n        if (getServerSnapshot === undefined) {\n          throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n        }\n\n        nextSnapshot = getServerSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            if (nextSnapshot !== getServerSnapshot()) {\n              error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n      } else {\n        nextSnapshot = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error('The result of getSnapshot should be cached to avoid an infinite loop');\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        } // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n        //\n        // We won't do this if we're hydrating server-rendered content, because if\n        // the content is stale, it's already visible anyway. Instead we'll patch\n        // it up in a passive effect.\n\n        var root = getWorkInProgressRoot();\n\n        if (root === null) {\n          throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n        }\n\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      } // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n\n      hook.memoizedState = nextSnapshot;\n      var inst = {\n        value: nextSnapshot,\n        getSnapshot: getSnapshot\n      };\n      hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n      // this whenever subscribe, getSnapshot, or value changes. Because there's no\n      // clean-up function, and we track the deps correctly, we can call pushEffect\n      // directly, without storing any additional state. For the same reason, we\n      // don't need to set a static flag, either.\n      // TODO: We can move this to the passive phase once we add a pre-commit\n      // consistency check. See the next comment.\n\n      fiber.flags |= Passive;\n      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n      return nextSnapshot;\n    }\n\n    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      var nextSnapshot = getSnapshot();\n      {\n        if (!didWarnUncachedGetSnapshot) {\n          var cachedSnapshot = getSnapshot();\n\n          if (!objectIs(nextSnapshot, cachedSnapshot)) {\n            error('The result of getSnapshot should be cached to avoid an infinite loop');\n            didWarnUncachedGetSnapshot = true;\n          }\n        }\n      }\n      var prevSnapshot = hook.memoizedState;\n      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n      if (snapshotChanged) {\n        hook.memoizedState = nextSnapshot;\n        markWorkInProgressReceivedUpdate();\n      }\n\n      var inst = hook.queue;\n      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n\n      if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n      // checking whether we scheduled a subscription effect above.\n      workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n        fiber.flags |= Passive;\n        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n\n        var root = getWorkInProgressRoot();\n\n        if (root === null) {\n          throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n        }\n\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n\n      return nextSnapshot;\n    }\n\n    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n      fiber.flags |= StoreConsistency;\n      var check = {\n        getSnapshot: getSnapshot,\n        value: renderedSnapshot\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.stores = [check];\n      } else {\n        var stores = componentUpdateQueue.stores;\n\n        if (stores === null) {\n          componentUpdateQueue.stores = [check];\n        } else {\n          stores.push(check);\n        }\n      }\n    }\n\n    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n      // These are updated in the passive phase\n      inst.value = nextSnapshot;\n      inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n      // have been in an event that fired before the passive effects, or it could\n      // have been in a layout effect. In that case, we would have used the old\n      // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceStoreRerender(fiber);\n      }\n    }\n\n    function subscribeToStore(fiber, inst, subscribe) {\n      var handleStoreChange = function () {\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceStoreRerender(fiber);\n        }\n      }; // Subscribe to the store and return a clean-up function.\n\n\n      return subscribe(handleStoreChange);\n    }\n\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      var prevValue = inst.value;\n\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(prevValue, nextValue);\n      } catch (error) {\n        return true;\n      }\n    }\n\n    function forceStoreRerender(fiber) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n\n    function mountState(initialState) {\n      var hook = mountWorkInProgressHook();\n\n      if (typeof initialState === 'function') {\n        // $FlowFixMe: Flow doesn't like mixed types\n        initialState = initialState();\n      }\n\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        interleaved: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n      return [hook.memoizedState, dispatch];\n    }\n\n    function updateState(initialState) {\n      return updateReducer(basicStateReducer);\n    }\n\n    function rerenderState(initialState) {\n      return rerenderReducer(basicStateReducer);\n    }\n\n    function pushEffect(tag, create, destroy, deps) {\n      var effect = {\n        tag: tag,\n        create: create,\n        destroy: destroy,\n        deps: deps,\n        // Circular\n        next: null\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.lastEffect = effect.next = effect;\n      } else {\n        var lastEffect = componentUpdateQueue.lastEffect;\n\n        if (lastEffect === null) {\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var firstEffect = lastEffect.next;\n          lastEffect.next = effect;\n          effect.next = firstEffect;\n          componentUpdateQueue.lastEffect = effect;\n        }\n      }\n\n      return effect;\n    }\n\n    function mountRef(initialValue) {\n      var hook = mountWorkInProgressHook();\n      {\n        var _ref2 = {\n          current: initialValue\n        };\n        hook.memoizedState = _ref2;\n        return _ref2;\n      }\n    }\n\n    function updateRef(initialValue) {\n      var hook = updateWorkInProgressHook();\n      return hook.memoizedState;\n    }\n\n    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n    }\n\n    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var destroy = undefined;\n\n      if (currentHook !== null) {\n        var prevEffect = currentHook.memoizedState;\n        destroy = prevEffect.destroy;\n\n        if (nextDeps !== null) {\n          var prevDeps = prevEffect.deps;\n\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n            return;\n          }\n        }\n      }\n\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n    }\n\n    function mountEffect(create, deps) {\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n      } else {\n        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n      }\n    }\n\n    function updateEffect(create, deps) {\n      return updateEffectImpl(Passive, Passive$1, create, deps);\n    }\n\n    function mountInsertionEffect(create, deps) {\n      return mountEffectImpl(Update, Insertion, create, deps);\n    }\n\n    function updateInsertionEffect(create, deps) {\n      return updateEffectImpl(Update, Insertion, create, deps);\n    }\n\n    function mountLayoutEffect(create, deps) {\n      var fiberFlags = Update;\n      {\n        fiberFlags |= LayoutStatic;\n      }\n\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      return mountEffectImpl(fiberFlags, Layout, create, deps);\n    }\n\n    function updateLayoutEffect(create, deps) {\n      return updateEffectImpl(Update, Layout, create, deps);\n    }\n\n    function imperativeHandleEffect(create, ref) {\n      if (typeof ref === 'function') {\n        var refCallback = ref;\n\n        var _inst = create();\n\n        refCallback(_inst);\n        return function () {\n          refCallback(null);\n        };\n      } else if (ref !== null && ref !== undefined) {\n        var refObject = ref;\n        {\n          if (!refObject.hasOwnProperty('current')) {\n            error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n          }\n        }\n\n        var _inst2 = create();\n\n        refObject.current = _inst2;\n        return function () {\n          refObject.current = null;\n        };\n      }\n    }\n\n    function mountImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== 'function') {\n          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      var fiberFlags = Update;\n      {\n        fiberFlags |= LayoutStatic;\n      }\n\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n\n    function updateImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== 'function') {\n          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n\n    function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n      // The react-debug-hooks package injects its own implementation\n      // so that e.g. DevTools can display custom hook values.\n    }\n\n    var updateDebugValue = mountDebugValue;\n\n    function mountCallback(callback, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n\n    function updateCallback(callback, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n\n      if (prevState !== null) {\n        if (nextDeps !== null) {\n          var prevDeps = prevState[1];\n\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            return prevState[0];\n          }\n        }\n      }\n\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n\n    function mountMemo(nextCreate, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var nextValue = nextCreate();\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n\n    function updateMemo(nextCreate, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n\n      if (prevState !== null) {\n        // Assume these are defined. If they're not, areHookInputsEqual will warn.\n        if (nextDeps !== null) {\n          var prevDeps = prevState[1];\n\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            return prevState[0];\n          }\n        }\n      }\n\n      var nextValue = nextCreate();\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n\n    function mountDeferredValue(value) {\n      var _mountState = mountState(value),\n          prevValue = _mountState[0],\n          setValue = _mountState[1];\n\n      mountEffect(function () {\n        var prevTransition = ReactCurrentBatchConfig$1.transition;\n        ReactCurrentBatchConfig$1.transition = {};\n\n        try {\n          setValue(value);\n        } finally {\n          ReactCurrentBatchConfig$1.transition = prevTransition;\n        }\n      }, [value]);\n      return prevValue;\n    }\n\n    function updateDeferredValue(value) {\n      var _updateState = updateState(),\n          prevValue = _updateState[0],\n          setValue = _updateState[1];\n\n      updateEffect(function () {\n        var prevTransition = ReactCurrentBatchConfig$1.transition;\n        ReactCurrentBatchConfig$1.transition = {};\n\n        try {\n          setValue(value);\n        } finally {\n          ReactCurrentBatchConfig$1.transition = prevTransition;\n        }\n      }, [value]);\n      return prevValue;\n    }\n\n    function rerenderDeferredValue(value) {\n      var _rerenderState = rerenderState(),\n          prevValue = _rerenderState[0],\n          setValue = _rerenderState[1];\n\n      updateEffect(function () {\n        var prevTransition = ReactCurrentBatchConfig$1.transition;\n        ReactCurrentBatchConfig$1.transition = {};\n\n        try {\n          setValue(value);\n        } finally {\n          ReactCurrentBatchConfig$1.transition = prevTransition;\n        }\n      }, [value]);\n      return prevValue;\n    }\n\n    function startTransition(setPending, callback, options) {\n      var previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n      setPending(true);\n      var prevTransition = ReactCurrentBatchConfig$1.transition;\n      ReactCurrentBatchConfig$1.transition = {};\n      var currentTransition = ReactCurrentBatchConfig$1.transition;\n      {\n        ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n      }\n\n      try {\n        setPending(false);\n        callback();\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$1.transition = prevTransition;\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n\n            if (updatedFibersCount > 10) {\n              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n            }\n\n            currentTransition._updatedFibers.clear();\n          }\n        }\n      }\n    }\n\n    function mountTransition() {\n      var _mountState2 = mountState(false),\n          isPending = _mountState2[0],\n          setPending = _mountState2[1]; // The `start` method never changes.\n\n\n      var start = startTransition.bind(null, setPending);\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = start;\n      return [isPending, start];\n    }\n\n    function updateTransition() {\n      var _updateState2 = updateState(),\n          isPending = _updateState2[0];\n\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      return [isPending, start];\n    }\n\n    function rerenderTransition() {\n      var _rerenderState2 = rerenderState(),\n          isPending = _rerenderState2[0];\n\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      return [isPending, start];\n    }\n\n    var isUpdatingOpaqueValueInRenderPhase = false;\n\n    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n      {\n        return isUpdatingOpaqueValueInRenderPhase;\n      }\n    }\n\n    function mountId() {\n      var hook = mountWorkInProgressHook();\n      var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n      // should do this in Fiber, too? Deferring this decision for now because\n      // there's no other place to store the prefix except for an internal field on\n      // the public createRoot object, which the fiber tree does not currently have\n      // a reference to.\n\n      var identifierPrefix = root.identifierPrefix;\n      var id;\n\n      if (getIsHydrating()) {\n        var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n        id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n        // that represents the position of this useId hook among all the useId\n        // hooks for this fiber.\n\n        var localId = localIdCounter++;\n\n        if (localId > 0) {\n          id += 'H' + localId.toString(32);\n        }\n\n        id += ':';\n      } else {\n        // Use a lowercase r prefix for client-generated ids.\n        var globalClientId = globalClientIdCounter++;\n        id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n      }\n\n      hook.memoizedState = id;\n      return id;\n    }\n\n    function updateId() {\n      var hook = updateWorkInProgressHook();\n      var id = hook.memoizedState;\n      return id;\n    }\n\n    function dispatchReducerAction(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === 'function') {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        enqueueUpdate$1(fiber, queue, update);\n        var eventTime = requestEventTime();\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n\n      markUpdateInDevTools(fiber, lane);\n    }\n\n    function dispatchSetState(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === 'function') {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        enqueueUpdate$1(fiber, queue, update);\n        var alternate = fiber.alternate;\n\n        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n          // The queue is currently empty, which means we can eagerly compute the\n          // next state before entering the render phase. If the new state is the\n          // same as the current state, we may be able to bail out entirely.\n          var lastRenderedReducer = queue.lastRenderedReducer;\n\n          if (lastRenderedReducer !== null) {\n            var prevDispatcher;\n            {\n              prevDispatcher = ReactCurrentDispatcher$1.current;\n              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            }\n\n            try {\n              var currentState = queue.lastRenderedState;\n              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n              // it, on the update object. If the reducer hasn't changed by the\n              // time we enter the render phase, then the eager state can be used\n              // without calling the reducer again.\n\n              update.hasEagerState = true;\n              update.eagerState = eagerState;\n\n              if (objectIs(eagerState, currentState)) {\n                // Fast path. We can bail out without scheduling React to re-render.\n                // It's still possible that we'll need to rebase this update later,\n                // if the component re-renders for a different reason and by that\n                // time the reducer has changed.\n                return;\n              }\n            } catch (error) {// Suppress the error. It will throw again in the render phase.\n            } finally {\n              {\n                ReactCurrentDispatcher$1.current = prevDispatcher;\n              }\n            }\n          }\n        }\n\n        var eventTime = requestEventTime();\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n\n      markUpdateInDevTools(fiber, lane);\n    }\n\n    function isRenderPhaseUpdate(fiber) {\n      var alternate = fiber.alternate;\n      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n    }\n\n    function enqueueRenderPhaseUpdate(queue, update) {\n      // This is a render phase update. Stash it in a lazily-created map of\n      // queue -> linked list of updates. After this render pass, we'll restart\n      // and apply the stashed updates on top of the work-in-progress hook.\n      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n      var pending = queue.pending;\n\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n\n      queue.pending = update;\n    }\n\n    function enqueueUpdate$1(fiber, queue, update, lane) {\n      if (isInterleavedUpdate(fiber)) {\n        var interleaved = queue.interleaved;\n\n        if (interleaved === null) {\n          // This is the first update. Create a circular list.\n          update.next = update; // At the end of the current render, this queue's interleaved updates will\n          // be transferred to the pending queue.\n\n          pushInterleavedQueue(queue);\n        } else {\n          update.next = interleaved.next;\n          interleaved.next = update;\n        }\n\n        queue.interleaved = update;\n      } else {\n        var pending = queue.pending;\n\n        if (pending === null) {\n          // This is the first update. Create a circular list.\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n\n        queue.pending = update;\n      }\n    }\n\n    function entangleTransitionUpdate(root, queue, lane) {\n      if (isTransitionLane(lane)) {\n        var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n        // must have finished. We can remove them from the shared queue, which\n        // represents a superset of the actually pending lanes. In some cases we\n        // may entangle more than we need to, but that's OK. In fact it's worse if\n        // we *don't* entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n\n    function markUpdateInDevTools(fiber, lane, action) {\n      {\n        markStateUpdateScheduled(fiber, lane);\n      }\n    }\n\n    var ContextOnlyDispatcher = {\n      readContext: readContext,\n      useCallback: throwInvalidHookError,\n      useContext: throwInvalidHookError,\n      useEffect: throwInvalidHookError,\n      useImperativeHandle: throwInvalidHookError,\n      useInsertionEffect: throwInvalidHookError,\n      useLayoutEffect: throwInvalidHookError,\n      useMemo: throwInvalidHookError,\n      useReducer: throwInvalidHookError,\n      useRef: throwInvalidHookError,\n      useState: throwInvalidHookError,\n      useDebugValue: throwInvalidHookError,\n      useDeferredValue: throwInvalidHookError,\n      useTransition: throwInvalidHookError,\n      useMutableSource: throwInvalidHookError,\n      useSyncExternalStore: throwInvalidHookError,\n      useId: throwInvalidHookError,\n      unstable_isNewReconciler: enableNewReconciler\n    };\n    var HooksDispatcherOnMountInDEV = null;\n    var HooksDispatcherOnMountWithHookTypesInDEV = null;\n    var HooksDispatcherOnUpdateInDEV = null;\n    var HooksDispatcherOnRerenderInDEV = null;\n    var InvalidNestedHooksDispatcherOnMountInDEV = null;\n    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n    {\n      var warnInvalidContextAccess = function () {\n        error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      };\n\n      var warnInvalidHookAccess = function () {\n        error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n      };\n\n      HooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          mountHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          mountHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          mountHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnMountWithHookTypesInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return updateDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return rerenderDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n    }\n    var now$2 = Scheduler.unstable_now;\n    var commitTime = 0;\n    var layoutEffectStartTime = -1;\n    var profilerStartTime = -1;\n    var passiveEffectStartTime = -1;\n    /**\n     * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n     *\n     * The overall sequence is:\n     *   1. render\n     *   2. commit (and call `onRender`, `onCommit`)\n     *   3. check for nested updates\n     *   4. flush passive effects (and call `onPostCommit`)\n     *\n     * Nested updates are identified in step 3 above,\n     * but step 4 still applies to the work that was just committed.\n     * We use two flags to track nested updates then:\n     * one tracks whether the upcoming update is a nested update,\n     * and the other tracks whether the current update was a nested update.\n     * The first value gets synced to the second at the start of the render phase.\n     */\n\n    var currentUpdateIsNested = false;\n    var nestedUpdateScheduled = false;\n\n    function isCurrentUpdateNested() {\n      return currentUpdateIsNested;\n    }\n\n    function markNestedUpdateScheduled() {\n      {\n        nestedUpdateScheduled = true;\n      }\n    }\n\n    function resetNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = false;\n        nestedUpdateScheduled = false;\n      }\n    }\n\n    function syncNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = nestedUpdateScheduled;\n        nestedUpdateScheduled = false;\n      }\n    }\n\n    function getCommitTime() {\n      return commitTime;\n    }\n\n    function recordCommitTime() {\n      commitTime = now$2();\n    }\n\n    function startProfilerTimer(fiber) {\n      profilerStartTime = now$2();\n\n      if (fiber.actualStartTime < 0) {\n        fiber.actualStartTime = now$2();\n      }\n    }\n\n    function stopProfilerTimerIfRunning(fiber) {\n      profilerStartTime = -1;\n    }\n\n    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n      if (profilerStartTime >= 0) {\n        var elapsedTime = now$2() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n\n        if (overrideBaseTime) {\n          fiber.selfBaseDuration = elapsedTime;\n        }\n\n        profilerStartTime = -1;\n      }\n    }\n\n    function recordLayoutEffectDuration(fiber) {\n      if (layoutEffectStartTime >= 0) {\n        var elapsedTime = now$2() - layoutEffectStartTime;\n        layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              root.effectDuration += elapsedTime;\n              return;\n\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += elapsedTime;\n              return;\n          }\n\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n\n    function recordPassiveEffectDuration(fiber) {\n      if (passiveEffectStartTime >= 0) {\n        var elapsedTime = now$2() - passiveEffectStartTime;\n        passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n\n              if (root !== null) {\n                root.passiveEffectDuration += elapsedTime;\n              }\n\n              return;\n\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n\n              if (parentStateNode !== null) {\n                // Detached fibers have their state node cleared out.\n                // In this case, the return pointer is also cleared out,\n                // so we won't be able to report the time spent in this Profiler's subtree.\n                parentStateNode.passiveEffectDuration += elapsedTime;\n              }\n\n              return;\n          }\n\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n\n    function startLayoutEffectTimer() {\n      layoutEffectStartTime = now$2();\n    }\n\n    function startPassiveEffectTimer() {\n      passiveEffectStartTime = now$2();\n    }\n\n    function transferActualDuration(fiber) {\n      // Transfer time spent rendering these children so we don't lose it\n      // after we rerender. This is used as a helper in special cases\n      // where we should count the work of multiple passes.\n      var child = fiber.child;\n\n      while (child) {\n        fiber.actualDuration += child.actualDuration;\n        child = child.sibling;\n      }\n    }\n\n    function createCapturedValue(value, source) {\n      // If the value is an error, call this function immediately after it is thrown\n      // so the stack is accurate.\n      return {\n        value: value,\n        source: source,\n        stack: getStackByFiberInDevAndProd(source)\n      };\n    } // This module is forked in different environments.\n    // By default, return `true` to log errors to the console.\n    // Forks can return `false` if this isn't desirable.\n\n\n    function showErrorDialog(boundary, errorInfo) {\n      return true;\n    }\n\n    function logCapturedError(boundary, errorInfo) {\n      try {\n        var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n        // This enables renderers like ReactNative to better manage redbox behavior.\n\n        if (logError === false) {\n          return;\n        }\n\n        var error = errorInfo.value;\n\n        if (true) {\n          var source = errorInfo.source;\n          var stack = errorInfo.stack;\n          var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n          // `preventDefault()` in window `error` handler.\n          // We record this information as an expando on the error.\n\n          if (error != null && error._suppressLogging) {\n            if (boundary.tag === ClassComponent) {\n              // The error is recoverable and was silenced.\n              // Ignore it and don't print the stack addendum.\n              // This is handy for testing error boundaries without noise.\n              return;\n            } // The error is fatal. Since the silencing might have\n            // been accidental, we'll surface it anyway.\n            // However, the browser would have silenced the original error\n            // so we'll print it first, and then print the stack addendum.\n\n\n            console['error'](error); // Don't transform to our wrapper\n            // For a more detailed description of this block, see:\n            // https://github.com/facebook/react/pull/13384\n          }\n\n          var componentName = source ? getComponentNameFromFiber(source) : null;\n          var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n          var errorBoundaryMessage;\n\n          if (boundary.tag === HostRoot) {\n            errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n          } else {\n            var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n            errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n          }\n\n          var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n          // We don't include the original error message and JS stack because the browser\n          // has already printed it. Even if the application swallows the error, it is still\n          // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n          console['error'](combinedMessage); // Don't transform to our wrapper\n        } else {\n          // In production, we print the error directly.\n          // This will include the message, the JS stack, and anything the browser wants to show.\n          // We pass the error object instead of custom message so that the browser displays the error natively.\n          console['error'](error); // Don't transform to our wrapper\n        }\n      } catch (e) {\n        // This method must not throw, or React internal state will get messed up.\n        // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n        // we want to report this error outside of the normal stack as a last resort.\n        // https://github.com/facebook/react/issues/13188\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n\n    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\n    function createRootErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: null\n      };\n      var error = errorInfo.value;\n\n      update.callback = function () {\n        onUncaughtError(error);\n        logCapturedError(fiber, errorInfo);\n      };\n\n      return update;\n    }\n\n    function createClassErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(NoTimestamp, lane);\n      update.tag = CaptureUpdate;\n      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n      if (typeof getDerivedStateFromError === 'function') {\n        var error$1 = errorInfo.value;\n\n        update.payload = function () {\n          return getDerivedStateFromError(error$1);\n        };\n\n        update.callback = function () {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n        };\n      }\n\n      var inst = fiber.stateNode;\n\n      if (inst !== null && typeof inst.componentDidCatch === 'function') {\n        update.callback = function callback() {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n\n          if (typeof getDerivedStateFromError !== 'function') {\n            // To preserve the preexisting retry behavior of error boundaries,\n            // we keep track of which ones already failed during this batch.\n            // This gets reset before we yield back to the browser.\n            // TODO: Warn in strict mode if getDerivedStateFromError is\n            // not defined.\n            markLegacyErrorBoundaryAsFailed(this);\n          }\n\n          var error$1 = errorInfo.value;\n          var stack = errorInfo.stack;\n          this.componentDidCatch(error$1, {\n            componentStack: stack !== null ? stack : ''\n          });\n          {\n            if (typeof getDerivedStateFromError !== 'function') {\n              // If componentDidCatch is the only error boundary method defined,\n              // then it needs to call setState to recover from errors.\n              // If no state update is scheduled then the boundary will swallow the error.\n              if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n              }\n            }\n          }\n        };\n      }\n\n      return update;\n    }\n\n    function attachPingListener(root, wakeable, lanes) {\n      // Attach a ping listener\n      //\n      // The data might resolve before we have a chance to commit the fallback. Or,\n      // in the case of a refresh, we'll never commit a fallback. So we need to\n      // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n      // try rendering the tree again.\n      //\n      // Only attach a listener if one does not already exist for the lanes\n      // we're currently rendering (which acts like a \"thread ID\" here).\n      //\n      // We only need to do this in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      var pingCache = root.pingCache;\n      var threadIDs;\n\n      if (pingCache === null) {\n        pingCache = root.pingCache = new PossiblyWeakMap$1();\n        threadIDs = new Set();\n        pingCache.set(wakeable, threadIDs);\n      } else {\n        threadIDs = pingCache.get(wakeable);\n\n        if (threadIDs === undefined) {\n          threadIDs = new Set();\n          pingCache.set(wakeable, threadIDs);\n        }\n      }\n\n      if (!threadIDs.has(lanes)) {\n        // Memoize using the thread ID to prevent redundant listeners.\n        threadIDs.add(lanes);\n        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n        {\n          if (isDevToolsPresent) {\n            // If we have pending work still, restore the original updaters\n            restorePendingUpdaters(root, lanes);\n          }\n        }\n        wakeable.then(ping, ping);\n      }\n    }\n\n    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n      // Retry listener\n      //\n      // If the fallback does commit, we need to attach a different type of\n      // listener. This one schedules an update on the Suspense boundary to turn\n      // the fallback state off.\n      //\n      // Stash the wakeable on the boundary fiber so we can access it in the\n      // commit phase.\n      //\n      // When the wakeable resolves, we'll attempt to render the boundary\n      // again (\"retry\").\n      var wakeables = suspenseBoundary.updateQueue;\n\n      if (wakeables === null) {\n        var updateQueue = new Set();\n        updateQueue.add(wakeable);\n        suspenseBoundary.updateQueue = updateQueue;\n      } else {\n        wakeables.add(wakeable);\n      }\n    }\n\n    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n      // A legacy mode Suspense quirk, only relevant to hook components.\n      var tag = sourceFiber.tag;\n\n      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n        var currentSource = sourceFiber.alternate;\n\n        if (currentSource) {\n          sourceFiber.updateQueue = currentSource.updateQueue;\n          sourceFiber.memoizedState = currentSource.memoizedState;\n          sourceFiber.lanes = currentSource.lanes;\n        } else {\n          sourceFiber.updateQueue = null;\n          sourceFiber.memoizedState = null;\n        }\n      }\n    }\n\n    function getNearestSuspenseBoundaryToCapture(returnFiber) {\n      var node = returnFiber;\n\n      do {\n        if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n          return node;\n        } // This boundary already captured during this render. Continue to the next\n        // boundary.\n\n\n        node = node.return;\n      } while (node !== null);\n\n      return null;\n    }\n\n    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n      // This marks a Suspense boundary so that when we're unwinding the stack,\n      // it captures the suspended \"exception\" and does a second (fallback) pass.\n      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n        // Legacy Mode Suspense\n        //\n        // If the boundary is in legacy mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. When the Suspense boundary completes,\n        // we'll do a second pass to render the fallback.\n        if (suspenseBoundary === returnFiber) {\n          // Special case where we suspended while reconciling the children of\n          // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n          // when a React.lazy component is a direct child of a\n          // Suspense boundary.\n          //\n          // Suspense boundaries are implemented as multiple fibers, but they\n          // are a single conceptual unit. The legacy mode behavior where we\n          // pretend the suspended fiber committed as `null` won't work,\n          // because in this case the \"suspended\" fiber is the inner\n          // Offscreen wrapper.\n          //\n          // Because the contents of the boundary haven't started rendering\n          // yet (i.e. nothing in the tree has partially rendered) we can\n          // switch to the regular, concurrent mode behavior: mark the\n          // boundary with ShouldCapture and enter the unwind phase.\n          suspenseBoundary.flags |= ShouldCapture;\n        } else {\n          suspenseBoundary.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (supportsPersistence && enablePersistentOffscreenHostContainer) {\n            // Another legacy Suspense quirk. In persistent mode, if this is the\n            // initial mount, override the props of the host container to hide\n            // its contents.\n            var currentSuspenseBoundary = suspenseBoundary.alternate;\n\n            if (currentSuspenseBoundary === null) {\n              var offscreenFiber = suspenseBoundary.child;\n              var offscreenContainer = offscreenFiber.child;\n\n              if (offscreenContainer !== null) {\n                var children = offscreenContainer.memoizedProps.children;\n                var containerProps = getOffscreenContainerProps('hidden', children);\n                offscreenContainer.pendingProps = containerProps;\n                offscreenContainer.memoizedProps = containerProps;\n              }\n            }\n          }\n\n          if (sourceFiber.tag === ClassComponent) {\n            var currentSourceFiber = sourceFiber.alternate;\n\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              var update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update);\n            }\n          } // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n\n\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n        }\n\n        return suspenseBoundary;\n      } // Confirmed that the boundary is in a concurrent mode tree. Continue\n      // with the normal suspend path.\n      //\n      // After this we'll use a set of heuristics to determine whether this\n      // render pass will run to completion or restart or \"suspend\" the commit.\n      // The actual logic for this is spread out in different places.\n      //\n      // This first principle is that if we're going to suspend when we complete\n      // a root, then we should also restart if we get an update or ping that\n      // might unsuspend it, and vice versa. The only reason to suspend is\n      // because you think you might want to restart before committing. However,\n      // it doesn't make sense to restart only while in the period we're suspended.\n      //\n      // Restarting too aggressively is also not good because it starves out any\n      // intermediate loading state. So we use heuristics to determine when.\n      // Suspense Heuristics\n      //\n      // If nothing threw a Promise or all the same fallbacks are already showing,\n      // then don't suspend/restart.\n      //\n      // If this is an initial render of a new tree of Suspense boundaries and\n      // those trigger a fallback, then don't suspend/restart. We want to ensure\n      // that we can show the initial loading state as quickly as possible.\n      //\n      // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n      // a fallback, then we should always suspend/restart. Transitions apply\n      // to this case. If none is defined, JND is used instead.\n      //\n      // If we're already showing a fallback and it gets \"retried\", allowing us to show\n      // another level, but there's still an inner boundary that would show a fallback,\n      // then we suspend/restart for 500ms since the last time we showed a fallback\n      // anywhere in the tree. This effectively throttles progressive loading into a\n      // consistent train of commits. This also gives us an opportunity to restart to\n      // get to the completed state slightly earlier.\n      //\n      // If there's ambiguity due to batching it's resolved in preference of:\n      // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n      //\n      // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n      // ensure that new initial loading states can commit as soon as possible.\n\n\n      suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n      // the begin phase to prevent an early bailout.\n\n      suspenseBoundary.lanes = rootRenderLanes;\n      return suspenseBoundary;\n    }\n\n    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n      // The source fiber did not complete.\n      sourceFiber.flags |= Incomplete;\n      {\n        if (isDevToolsPresent) {\n          // If we have pending work still, restore the original updaters\n          restorePendingUpdaters(root, rootRenderLanes);\n        }\n      }\n\n      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n        // This is a wakeable. The component suspended.\n        var wakeable = value;\n        resetSuspendedComponent(sourceFiber);\n        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n        if (suspenseBoundary !== null) {\n          suspenseBoundary.flags &= ~ForceClientRender;\n          markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n          // commits fallbacks synchronously, so there are no pings.\n\n          if (suspenseBoundary.mode & ConcurrentMode) {\n            attachPingListener(root, wakeable, rootRenderLanes);\n          }\n\n          attachRetryListener(suspenseBoundary, root, wakeable);\n          return;\n        } else {\n          // No boundary was found. Unless this is a sync update, this is OK.\n          // We can suspend and wait for more data to arrive.\n          if (!includesSyncLane(rootRenderLanes)) {\n            // This is not a sync update. Suspend. Since we're not activating a\n            // Suspense boundary, this will unwind all the way to the root without\n            // performing a second pass to render a fallback. (This is arguably how\n            // refresh transitions should work, too, since we're not going to commit\n            // the fallbacks anyway.)\n            //\n            // This case also applies to initial hydration.\n            attachPingListener(root, wakeable, rootRenderLanes);\n            renderDidSuspendDelayIfPossible();\n            return;\n          } // This is a sync/discrete update. We treat this case like an error\n          // because discrete renders are expected to produce a complete tree\n          // synchronously to maintain consistency with external state.\n\n\n          var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n          // The error will be caught by the nearest suspense boundary.\n\n          value = uncaughtSuspenseError;\n        }\n      } else {\n        // This is a regular error, not a Suspense wakeable.\n        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n          markDidSuspendWhileHydratingDEV();\n\n          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n          // discarding the dehydrated content and switching to a client render.\n          // Instead of surfacing the error, find the nearest Suspense boundary\n          // and render it again without hydration.\n\n\n          if (_suspenseBoundary !== null) {\n            if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n              // Set a flag to indicate that we should try rendering the normal\n              // children again, not the fallback.\n              _suspenseBoundary.flags |= ForceClientRender;\n            }\n\n            markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n            // still log it so it can be fixed.\n\n            queueHydrationError(value);\n            return;\n          }\n        }\n      } // We didn't find a boundary that could handle this type of exception. Start\n      // over and traverse parent path again, this time treating the exception\n      // as an error.\n\n\n      renderDidError(value);\n      value = createCapturedValue(value, sourceFiber);\n      var workInProgress = returnFiber;\n\n      do {\n        switch (workInProgress.tag) {\n          case HostRoot:\n            {\n              var _errorInfo = value;\n              workInProgress.flags |= ShouldCapture;\n              var lane = pickArbitraryLane(rootRenderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n              var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              return;\n            }\n\n          case ClassComponent:\n            // Capture and retry\n            var errorInfo = value;\n            var ctor = workInProgress.type;\n            var instance = workInProgress.stateNode;\n\n            if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n              workInProgress.flags |= ShouldCapture;\n\n              var _lane = pickArbitraryLane(rootRenderLanes);\n\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n              var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n              enqueueCapturedUpdate(workInProgress, _update);\n              return;\n            }\n\n            break;\n        }\n\n        workInProgress = workInProgress.return;\n      } while (workInProgress !== null);\n    }\n\n    function getSuspendedCache() {\n      {\n        return null;\n      } // This function is called when a Suspense boundary suspends. It returns the\n    }\n\n    function markUpdate(workInProgress) {\n      // Tag the fiber with an update effect. This turns a Placement into\n      // a PlacementAndUpdate.\n      workInProgress.flags |= Update;\n    }\n\n    function markRef(workInProgress) {\n      workInProgress.flags |= Ref;\n      {\n        workInProgress.flags |= RefStatic;\n      }\n    }\n\n    function hadNoMutationsEffects(current, completedWork) {\n      var didBailout = current !== null && current.child === completedWork.child;\n\n      if (didBailout) {\n        return true;\n      }\n\n      if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n        return false;\n      } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n      // then we only have to check the `completedWork.subtreeFlags`.\n\n\n      var child = completedWork.child;\n\n      while (child !== null) {\n        if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n          return false;\n        }\n\n        child = child.sibling;\n      }\n\n      return true;\n    }\n\n    var appendAllChildren;\n    var updateHostContainer;\n    var updateHostComponent;\n    var updateHostText;\n\n    if (supportsMutation) {\n      // Mutation mode\n      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n\n        while (node !== null) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            appendInitialChild(parent, node.stateNode);\n          } else if (node.tag === HostPortal) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === workInProgress) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      };\n\n      updateHostContainer = function (current, workInProgress) {// Noop\n      };\n\n      updateHostComponent = function (current, workInProgress, type, newProps, rootContainerInstance) {\n        // If we have an alternate, that means this is an update and we need to\n        // schedule a side-effect to do the updates.\n        var oldProps = current.memoizedProps;\n\n        if (oldProps === newProps) {\n          // In mutation mode, this is sufficient for a bailout because\n          // we won't touch this node even if children changed.\n          return;\n        } // If we get updated because one of our children updated, we don't\n        // have newProps so we'll have to reuse them.\n        // TODO: Split the update API as separate for the props vs. children.\n        // Even better would be if children weren't special cased at all tho.\n\n\n        var instance = workInProgress.stateNode;\n        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n        // component is hitting the resume path. Figure out why. Possibly\n        // related to `hidden`.\n\n        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n        // is a new ref we mark this as an update. All the work is done in commitWork.\n\n        if (updatePayload) {\n          markUpdate(workInProgress);\n        }\n      };\n\n      updateHostText = function (current, workInProgress, oldText, newText) {\n        // If the text differs, mark it as an update. All the work in done in commitWork.\n        if (oldText !== newText) {\n          markUpdate(workInProgress);\n        }\n      };\n    } else if (supportsPersistence) {\n      // Persistent host tree mode\n      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n\n        while (node !== null) {\n          // eslint-disable-next-line no-labels\n          if (node.tag === HostComponent) {\n            var instance = node.stateNode;\n\n            if (needsVisibilityToggle && isHidden) {\n              // This child is inside a timed out tree. Hide it.\n              var props = node.memoizedProps;\n              var type = node.type;\n              instance = cloneHiddenInstance(instance, type, props, node);\n            }\n\n            appendInitialChild(parent, instance);\n          } else if (node.tag === HostText) {\n            var _instance = node.stateNode;\n\n            if (needsVisibilityToggle && isHidden) {\n              // This child is inside a timed out tree. Hide it.\n              var text = node.memoizedProps;\n              _instance = cloneHiddenTextInstance(_instance, text, node);\n            }\n\n            appendInitialChild(parent, _instance);\n          } else if (node.tag === HostPortal) ;else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n            // The children in this boundary are hidden. Toggle their visibility\n            // before appending.\n            var child = node.child;\n\n            if (child !== null) {\n              child.return = node;\n            }\n\n            {\n              appendAllChildren(parent, node, true, true);\n            }\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n          node = node;\n\n          if (node === workInProgress) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n\n      var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n\n        while (node !== null) {\n          // eslint-disable-next-line no-labels\n          if (node.tag === HostComponent) {\n            var instance = node.stateNode;\n\n            if (needsVisibilityToggle && isHidden) {\n              // This child is inside a timed out tree. Hide it.\n              var props = node.memoizedProps;\n              var type = node.type;\n              instance = cloneHiddenInstance(instance, type, props, node);\n            }\n\n            appendChildToContainerChildSet(containerChildSet, instance);\n          } else if (node.tag === HostText) {\n            var _instance2 = node.stateNode;\n\n            if (needsVisibilityToggle && isHidden) {\n              // This child is inside a timed out tree. Hide it.\n              var text = node.memoizedProps;\n              _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n            }\n\n            appendChildToContainerChildSet(containerChildSet, _instance2);\n          } else if (node.tag === HostPortal) ;else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n            // The children in this boundary are hidden. Toggle their visibility\n            // before appending.\n            var child = node.child;\n\n            if (child !== null) {\n              child.return = node;\n            }\n\n            {\n              appendAllChildrenToContainer(containerChildSet, node, true, true);\n            }\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n          node = node;\n\n          if (node === workInProgress) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      };\n\n      updateHostContainer = function (current, workInProgress) {\n        var portalOrRoot = workInProgress.stateNode;\n        var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n        if (childrenUnchanged) ;else {\n          var container = portalOrRoot.containerInfo;\n          var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n          appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n          portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n          markUpdate(workInProgress);\n          finalizeContainerChildren(container, newChildSet);\n        }\n      };\n\n      updateHostComponent = function (current, workInProgress, type, newProps, rootContainerInstance) {\n        var currentInstance = current.stateNode;\n        var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n        // This guarantees that we can reuse all of them.\n\n        var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n        if (childrenUnchanged && oldProps === newProps) {\n          // No changes, just reuse the existing instance.\n          // Note that this might release a previous clone.\n          workInProgress.stateNode = currentInstance;\n          return;\n        }\n\n        var recyclableInstance = workInProgress.stateNode;\n        var currentHostContext = getHostContext();\n        var updatePayload = null;\n\n        if (oldProps !== newProps) {\n          updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n        }\n\n        if (childrenUnchanged && updatePayload === null) {\n          // No changes, just reuse the existing instance.\n          // Note that this might release a previous clone.\n          workInProgress.stateNode = currentInstance;\n          return;\n        }\n\n        var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n\n        if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n          markUpdate(workInProgress);\n        }\n\n        workInProgress.stateNode = newInstance;\n\n        if (childrenUnchanged) {\n          // If there are no other effects in this tree, we need to flag this node as having one.\n          // Even though we're not going to use it for anything.\n          // Otherwise parents won't know that there are new children to propagate upwards.\n          markUpdate(workInProgress);\n        } else {\n          // If children might have changed, we have to add them all to the set.\n          appendAllChildren(newInstance, workInProgress, false, false);\n        }\n      };\n\n      updateHostText = function (current, workInProgress, oldText, newText) {\n        if (oldText !== newText) {\n          // If the text content differs, we'll create a new text instance for it.\n          var rootContainerInstance = getRootHostContainer();\n          var currentHostContext = getHostContext();\n          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n          // This lets the parents know that at least one of their children has changed.\n\n          markUpdate(workInProgress);\n        } else {\n          workInProgress.stateNode = current.stateNode;\n        }\n      };\n    } else {\n      // No host operations\n      updateHostContainer = function (current, workInProgress) {// Noop\n      };\n\n      updateHostComponent = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n      };\n\n      updateHostText = function (current, workInProgress, oldText, newText) {// Noop\n      };\n    }\n\n    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n      if (getIsHydrating()) {\n        // If we're hydrating, we should consume as many items as we can\n        // so we don't leave any behind.\n        return;\n      }\n\n      switch (renderState.tailMode) {\n        case 'hidden':\n          {\n            // Any insertions at the end of the tail list after this point\n            // should be invisible. If there are already mounted boundaries\n            // anything before them are not considered for collapsing.\n            // Therefore we need to go through the whole tail to find if\n            // there are any.\n            var tailNode = renderState.tail;\n            var lastTailNode = null;\n\n            while (tailNode !== null) {\n              if (tailNode.alternate !== null) {\n                lastTailNode = tailNode;\n              }\n\n              tailNode = tailNode.sibling;\n            } // Next we're simply going to delete all insertions after the\n            // last rendered item.\n\n\n            if (lastTailNode === null) {\n              // All remaining items in the tail are insertions.\n              renderState.tail = null;\n            } else {\n              // Detach the insertion after the last node that was already\n              // inserted.\n              lastTailNode.sibling = null;\n            }\n\n            break;\n          }\n\n        case 'collapsed':\n          {\n            // Any insertions at the end of the tail list after this point\n            // should be invisible. If there are already mounted boundaries\n            // anything before them are not considered for collapsing.\n            // Therefore we need to go through the whole tail to find if\n            // there are any.\n            var _tailNode = renderState.tail;\n            var _lastTailNode = null;\n\n            while (_tailNode !== null) {\n              if (_tailNode.alternate !== null) {\n                _lastTailNode = _tailNode;\n              }\n\n              _tailNode = _tailNode.sibling;\n            } // Next we're simply going to delete all insertions after the\n            // last rendered item.\n\n\n            if (_lastTailNode === null) {\n              // All remaining items in the tail are insertions.\n              if (!hasRenderedATailFallback && renderState.tail !== null) {\n                // We suspended during the head. We want to show at least one\n                // row at the tail. So we'll keep on and cut off the rest.\n                renderState.tail.sibling = null;\n              } else {\n                renderState.tail = null;\n              }\n            } else {\n              // Detach the insertion after the last node that was already\n              // inserted.\n              _lastTailNode.sibling = null;\n            }\n\n            break;\n          }\n      }\n    }\n\n    function bubbleProperties(completedWork) {\n      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n      var newChildLanes = NoLanes;\n      var subtreeFlags = NoFlags;\n\n      if (!didBailout) {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var actualDuration = completedWork.actualDuration;\n          var treeBaseDuration = completedWork.selfBaseDuration;\n          var child = completedWork.child;\n\n          while (child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n            subtreeFlags |= child.subtreeFlags;\n            subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n            // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n            // When work is done, it should bubble to the parent's actualDuration. If\n            // the fiber has not been cloned though, (meaning no work was done), then\n            // this value will reflect the amount of time spent working on a previous\n            // render. In that case it should not bubble. We determine whether it was\n            // cloned by comparing the child pointer.\n\n            actualDuration += child.actualDuration;\n            treeBaseDuration += child.treeBaseDuration;\n            child = child.sibling;\n          }\n\n          completedWork.actualDuration = actualDuration;\n          completedWork.treeBaseDuration = treeBaseDuration;\n        } else {\n          var _child = completedWork.child;\n\n          while (_child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n            subtreeFlags |= _child.subtreeFlags;\n            subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child.return = completedWork;\n            _child = _child.sibling;\n          }\n        }\n\n        completedWork.subtreeFlags |= subtreeFlags;\n      } else {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var _treeBaseDuration = completedWork.selfBaseDuration;\n          var _child2 = completedWork.child;\n\n          while (_child2 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child2.subtreeFlags & StaticMask;\n            subtreeFlags |= _child2.flags & StaticMask;\n            _treeBaseDuration += _child2.treeBaseDuration;\n            _child2 = _child2.sibling;\n          }\n\n          completedWork.treeBaseDuration = _treeBaseDuration;\n        } else {\n          var _child3 = completedWork.child;\n\n          while (_child3 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child3.subtreeFlags & StaticMask;\n            subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child3.return = completedWork;\n            _child3 = _child3.sibling;\n          }\n        }\n\n        completedWork.subtreeFlags |= subtreeFlags;\n      }\n\n      completedWork.childLanes = newChildLanes;\n      return didBailout;\n    }\n\n    function completeWork(current, workInProgress, renderLanes) {\n      var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n\n      popTreeContext(workInProgress);\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n        case LazyComponent:\n        case SimpleMemoComponent:\n        case FunctionComponent:\n        case ForwardRef:\n        case Fragment:\n        case Mode:\n        case Profiler:\n        case ContextConsumer:\n        case MemoComponent:\n          bubbleProperties(workInProgress);\n          return null;\n\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n\n            if (isContextProvider(Component)) {\n              popContext(workInProgress);\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case HostRoot:\n          {\n            var fiberRoot = workInProgress.stateNode;\n            popHostContainer(workInProgress);\n            popTopLevelContextObject(workInProgress);\n            resetWorkInProgressVersions();\n\n            if (fiberRoot.pendingContext) {\n              fiberRoot.context = fiberRoot.pendingContext;\n              fiberRoot.pendingContext = null;\n            }\n\n            if (current === null || current.child === null) {\n              // If we hydrated, pop so that we can delete any remaining children\n              // that weren't hydrated.\n              var wasHydrated = popHydrationState(workInProgress);\n\n              if (wasHydrated) {\n                // If we hydrated, then we'll need to schedule an update for\n                // the commit side-effects on the root.\n                markUpdate(workInProgress);\n              } else {\n                if (current !== null) {\n                  var prevState = current.memoizedState;\n\n                  if ( // Check if this is a client root\n                  !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n                  (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                    // Schedule an effect to clear this container at the start of the\n                    // next commit. This handles the case of React rendering into a\n                    // container with previous children. It's also safe to do for\n                    // updates too, because current.child would only be null if the\n                    // previous render was null (so the container would already\n                    // be empty).\n                    workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                    // recoverable errors during first hydration attempt. If so, add\n                    // them to a queue so we can log them in the commit phase.\n\n                    upgradeHydrationErrorsToRecoverable();\n                  }\n                }\n              }\n            }\n\n            updateHostContainer(current, workInProgress);\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case HostComponent:\n          {\n            popHostContext(workInProgress);\n            var rootContainerInstance = getRootHostContainer();\n            var type = workInProgress.type;\n\n            if (current !== null && workInProgress.stateNode != null) {\n              updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance);\n\n              if (current.ref !== workInProgress.ref) {\n                markRef(workInProgress);\n              }\n            } else {\n              if (!newProps) {\n                if (workInProgress.stateNode === null) {\n                  throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                } // This can happen when we abort work.\n\n\n                bubbleProperties(workInProgress);\n                return null;\n              }\n\n              var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n              // \"stack\" as the parent. Then append children as we go in beginWork\n              // or completeWork depending on whether we want to add them top->down or\n              // bottom->up. Top->down is faster in IE11.\n\n              var _wasHydrated = popHydrationState(workInProgress);\n\n              if (_wasHydrated) {\n                // TODO: Move this and createInstance step into the beginPhase\n                // to consolidate.\n                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n                  // If changes to the hydrated node need to be applied at the\n                  // commit-phase we mark this as such.\n                  markUpdate(workInProgress);\n                }\n              } else {\n                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n                appendAllChildren(instance, workInProgress, false, false);\n                workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n                // (eg DOM renderer supports auto-focus for certain elements).\n                // Make sure such renderers get scheduled for later work.\n\n                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n                  markUpdate(workInProgress);\n                }\n              }\n\n              if (workInProgress.ref !== null) {\n                // If there is a ref on a host node we need to schedule a callback\n                markRef(workInProgress);\n              }\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case HostText:\n          {\n            var newText = newProps;\n\n            if (current && workInProgress.stateNode != null) {\n              var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n              // to schedule a side-effect to do the updates.\n\n              updateHostText(current, workInProgress, oldText, newText);\n            } else {\n              if (typeof newText !== 'string') {\n                if (workInProgress.stateNode === null) {\n                  throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                } // This can happen when we abort work.\n\n              }\n\n              var _rootContainerInstance = getRootHostContainer();\n\n              var _currentHostContext = getHostContext();\n\n              var _wasHydrated2 = popHydrationState(workInProgress);\n\n              if (_wasHydrated2) {\n                if (prepareToHydrateHostTextInstance(workInProgress)) {\n                  markUpdate(workInProgress);\n                }\n              } else {\n                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n              }\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case SuspenseComponent:\n          {\n            popSuspenseContext(workInProgress);\n            var nextState = workInProgress.memoizedState;\n            {\n              if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n                warnIfUnhydratedTailNodes(workInProgress);\n                resetHydrationState();\n                workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n                return workInProgress;\n              }\n\n              if (nextState !== null && nextState.dehydrated !== null) {\n                // We might be inside a hydration state the first time we're picking up this\n                // Suspense boundary, and also after we've reentered it for further hydration.\n                var _wasHydrated3 = popHydrationState(workInProgress);\n\n                if (current === null) {\n                  if (!_wasHydrated3) {\n                    throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n                  }\n\n                  prepareToHydrateHostSuspenseInstance(workInProgress);\n                  bubbleProperties(workInProgress);\n                  {\n                    if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                      var isTimedOutSuspense = nextState !== null;\n\n                      if (isTimedOutSuspense) {\n                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                        var primaryChildFragment = workInProgress.child;\n\n                        if (primaryChildFragment !== null) {\n                          // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                          workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                        }\n                      }\n                    }\n                  }\n                  return null;\n                } else {\n                  // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n                  // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n                  resetHydrationState();\n\n                  if ((workInProgress.flags & DidCapture) === NoFlags) {\n                    // This boundary did not suspend so it's now hydrated and unsuspended.\n                    workInProgress.memoizedState = null;\n                  } // If nothing suspended, we need to schedule an effect to mark this boundary\n                  // as having hydrated so events know that they're free to be invoked.\n                  // It's also a signal to replay events and the suspense callback.\n                  // If something suspended, schedule an effect to attach retry listeners.\n                  // So we might as well always mark this.\n\n\n                  workInProgress.flags |= Update;\n                  bubbleProperties(workInProgress);\n                  {\n                    if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                      var _isTimedOutSuspense = nextState !== null;\n\n                      if (_isTimedOutSuspense) {\n                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                        var _primaryChildFragment = workInProgress.child;\n\n                        if (_primaryChildFragment !== null) {\n                          // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                          workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n                        }\n                      }\n                    }\n                  }\n                  return null;\n                }\n              } // Successfully completed this tree. If this was a forced client render,\n              // there may have been recoverable errors during first hydration\n              // attempt. If so, add them to a queue so we can log them in the\n              // commit phase.\n\n\n              upgradeHydrationErrorsToRecoverable();\n            }\n\n            if ((workInProgress.flags & DidCapture) !== NoFlags) {\n              // Something suspended. Re-render with the fallback children.\n              workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              } // Don't bubble properties in this case.\n\n\n              return workInProgress;\n            }\n\n            var nextDidTimeout = nextState !== null;\n            var prevDidTimeout = false;\n\n            if (current === null) {\n              popHydrationState(workInProgress);\n            } else {\n              var _prevState = current.memoizedState;\n              prevDidTimeout = _prevState !== null;\n            } // an effect to toggle the subtree's visibility. When we switch from\n            // fallback -> primary, the inner Offscreen fiber schedules this effect\n            // as part of its normal complete phase. But when we switch from\n            // primary -> fallback, the inner Offscreen fiber does not have a complete\n            // phase. So we need to schedule its effect here.\n            //\n            // We also use this flag to connect/disconnect the effects, but the same\n            // logic applies: when re-connecting, the Offscreen fiber's complete\n            // phase will handle scheduling the effect. It's only when the fallback\n            // is active that we have to do anything special.\n\n\n            if (nextDidTimeout && !prevDidTimeout) {\n              var _offscreenFiber = workInProgress.child;\n              _offscreenFiber.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n              // in the concurrent tree already suspended during this render.\n              // This is a known bug.\n\n              if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n                // TODO: Move this back to throwException because this is too late\n                // if this is a large tree which is common for initial loads. We\n                // don't know if we should restart a render or not until we get\n                // this marker, and this is too late.\n                // If this render already had a ping or lower pri updates,\n                // and this is the first time we know we're going to suspend we\n                // should be able to immediately restart from within throwException.\n                var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n                  // If this was in an invisible tree or a new render, then showing\n                  // this boundary is ok.\n                  renderDidSuspend();\n                } else {\n                  // Otherwise, we're going to have to hide content so we should\n                  // suspend for longer if possible.\n                  renderDidSuspendDelayIfPossible();\n                }\n              }\n            }\n\n            var wakeables = workInProgress.updateQueue;\n\n            if (wakeables !== null) {\n              // Schedule an effect to attach a retry listener to the promise.\n              // TODO: Move to passive phase\n              workInProgress.flags |= Update;\n            }\n\n            bubbleProperties(workInProgress);\n            {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                if (nextDidTimeout) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  var _primaryChildFragment2 = workInProgress.child;\n\n                  if (_primaryChildFragment2 !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;\n                  }\n                }\n              }\n            }\n            return null;\n          }\n\n        case HostPortal:\n          popHostContainer(workInProgress);\n          updateHostContainer(current, workInProgress);\n\n          if (current === null) {\n            preparePortalMount(workInProgress.stateNode.containerInfo);\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n\n        case ContextProvider:\n          // Pop provider fiber\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n\n        case IncompleteClassComponent:\n          {\n            // Same as class component case. I put it down here so that the tags are\n            // sequential to ensure this switch is compiled to a jump table.\n            var _Component = workInProgress.type;\n\n            if (isContextProvider(_Component)) {\n              popContext(workInProgress);\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case SuspenseListComponent:\n          {\n            popSuspenseContext(workInProgress);\n            var renderState = workInProgress.memoizedState;\n\n            if (renderState === null) {\n              // We're running in the default, \"independent\" mode.\n              // We don't do anything in this mode.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n\n            var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n            var renderedTail = renderState.rendering;\n\n            if (renderedTail === null) {\n              // We just rendered the head.\n              if (!didSuspendAlready) {\n                // This is the first pass. We need to figure out if anything is still\n                // suspended in the rendered set.\n                // If new content unsuspended, but there's still some content that\n                // didn't. Then we need to do a second pass that forces everything\n                // to keep showing their fallbacks.\n                // We might be suspended if something in this render pass suspended, or\n                // something in the previous committed pass suspended. Otherwise,\n                // there's no chance so we can skip the expensive call to\n                // findFirstSuspended.\n                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n                if (!cannotBeSuspended) {\n                  var row = workInProgress.child;\n\n                  while (row !== null) {\n                    var suspended = findFirstSuspended(row);\n\n                    if (suspended !== null) {\n                      didSuspendAlready = true;\n                      workInProgress.flags |= DidCapture;\n                      cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                      // part of the second pass. In that case nothing will subscribe to\n                      // its thenables. Instead, we'll transfer its thenables to the\n                      // SuspenseList so that it can retry if they resolve.\n                      // There might be multiple of these in the list but since we're\n                      // going to wait for all of them anyway, it doesn't really matter\n                      // which ones gets to ping. In theory we could get clever and keep\n                      // track of how many dependencies remain but it gets tricky because\n                      // in the meantime, we can add/remove/change items and dependencies.\n                      // We might bail out of the loop before finding any but that\n                      // doesn't matter since that means that the other boundaries that\n                      // we did find already has their listeners attached.\n\n                      var newThenables = suspended.updateQueue;\n\n                      if (newThenables !== null) {\n                        workInProgress.updateQueue = newThenables;\n                        workInProgress.flags |= Update;\n                      } // Rerender the whole list, but this time, we'll force fallbacks\n                      // to stay in place.\n                      // Reset the effect flags before doing the second pass since that's now invalid.\n                      // Reset the child fibers to their original state.\n\n\n                      workInProgress.subtreeFlags = NoFlags;\n                      resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                      // rerender the children.\n\n                      pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                      return workInProgress.child;\n                    }\n\n                    row = row.sibling;\n                  }\n                }\n\n                if (renderState.tail !== null && now$1() > getRenderTargetTime()) {\n                  // We have already passed our CPU deadline but we still have rows\n                  // left in the tail. We'll just give up further attempts to render\n                  // the main content and only render fallbacks.\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                  // to get it started back up to attempt the next item. While in terms\n                  // of priority this work has the same priority as this current render,\n                  // it's not part of the same transition once the transition has\n                  // committed. If it's sync, we still want to yield so that it can be\n                  // painted. Conceptually, this is really the same as pinging.\n                  // We can use any RetryLane even if it's the one currently rendering\n                  // since we're leaving it behind on this node.\n\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              } else {\n                cutOffTailIfNeeded(renderState, false);\n              } // Next we're going to render the tail.\n\n            } else {\n              // Append the rendered row to the child list.\n              if (!didSuspendAlready) {\n                var _suspended = findFirstSuspended(renderedTail);\n\n                if (_suspended !== null) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n                  // get lost if this row ends up dropped during a second pass.\n\n                  var _newThenables = _suspended.updateQueue;\n\n                  if (_newThenables !== null) {\n                    workInProgress.updateQueue = _newThenables;\n                    workInProgress.flags |= Update;\n                  }\n\n                  cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n                  if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n                  ) {\n                    // We're done.\n                    bubbleProperties(workInProgress);\n                    return null;\n                  }\n                } else if ( // The time it took to render last row is greater than the remaining\n                // time we have to render. So rendering one more row would likely\n                // exceed it.\n                now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n                  // We have now passed our CPU deadline and we'll just give up further\n                  // attempts to render the main content and only render fallbacks.\n                  // The assumption is that this is usually faster.\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                  // to get it started back up to attempt the next item. While in terms\n                  // of priority this work has the same priority as this current render,\n                  // it's not part of the same transition once the transition has\n                  // committed. If it's sync, we still want to yield so that it can be\n                  // painted. Conceptually, this is really the same as pinging.\n                  // We can use any RetryLane even if it's the one currently rendering\n                  // since we're leaving it behind on this node.\n\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              }\n\n              if (renderState.isBackwards) {\n                // The effect list of the backwards tail will have been added\n                // to the end. This breaks the guarantee that life-cycles fire in\n                // sibling order but that isn't a strong guarantee promised by React.\n                // Especially since these might also just pop in during future commits.\n                // Append to the beginning of the list.\n                renderedTail.sibling = workInProgress.child;\n                workInProgress.child = renderedTail;\n              } else {\n                var previousSibling = renderState.last;\n\n                if (previousSibling !== null) {\n                  previousSibling.sibling = renderedTail;\n                } else {\n                  workInProgress.child = renderedTail;\n                }\n\n                renderState.last = renderedTail;\n              }\n            }\n\n            if (renderState.tail !== null) {\n              // We still have tail rows to render.\n              // Pop a row.\n              var next = renderState.tail;\n              renderState.rendering = next;\n              renderState.tail = next.sibling;\n              renderState.renderingStartTime = now$1();\n              next.sibling = null; // Restore the context.\n              // TODO: We can probably just avoid popping it instead and only\n              // setting it the first time we go from not suspended to suspended.\n\n              var suspenseContext = suspenseStackCursor.current;\n\n              if (didSuspendAlready) {\n                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n              } else {\n                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n              }\n\n              pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n              // Don't bubble properties in this case.\n\n              return next;\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case ScopeComponent:\n          {\n            break;\n          }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            popRenderLanes(workInProgress);\n            var _nextState = workInProgress.memoizedState;\n            var nextIsHidden = _nextState !== null;\n\n            if (current !== null) {\n              var _prevState2 = current.memoizedState;\n              var prevIsHidden = _prevState2 !== null;\n\n              if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.\n              !enableLegacyHidden) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n\n            if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n              bubbleProperties(workInProgress);\n            } else {\n              // Don't bubble properties for hidden children unless we're rendering\n              // at offscreen priority.\n              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n                bubbleProperties(workInProgress);\n\n                if (supportsMutation) {\n                  // Check if there was an insertion or update in the hidden subtree.\n                  // If so, we need to hide those nodes in the commit phase, so\n                  // schedule a visibility effect.\n                  if (workInProgress.subtreeFlags & (Placement | Update)) {\n                    workInProgress.flags |= Visibility;\n                  }\n                }\n              }\n            }\n\n            return null;\n          }\n\n        case CacheComponent:\n          {\n            return null;\n          }\n\n        case TracingMarkerComponent:\n          {\n            return null;\n          }\n      }\n\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n    }\n\n    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n    var didReceiveUpdate = false;\n    var didWarnAboutBadClass;\n    var didWarnAboutModulePatternComponent;\n    var didWarnAboutContextTypeOnFunctionComponent;\n    var didWarnAboutGetDerivedStateOnFunctionComponent;\n    var didWarnAboutFunctionRefs;\n    var didWarnAboutReassigningProps;\n    var didWarnAboutRevealOrder;\n    var didWarnAboutTailOptions;\n    {\n      didWarnAboutBadClass = {};\n      didWarnAboutModulePatternComponent = {};\n      didWarnAboutContextTypeOnFunctionComponent = {};\n      didWarnAboutGetDerivedStateOnFunctionComponent = {};\n      didWarnAboutFunctionRefs = {};\n      didWarnAboutReassigningProps = false;\n      didWarnAboutRevealOrder = {};\n      didWarnAboutTailOptions = {};\n    }\n\n    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n      if (current === null) {\n        // If this is a fresh new component that hasn't been rendered yet, we\n        // won't update its child set by applying minimal side-effects. Instead,\n        // we will add them all to the child before it gets rendered. That means\n        // we can optimize this reconciliation pass by not tracking side-effects.\n        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        // If the current child is the same as the work in progress, it means that\n        // we haven't yet started any work on these children. Therefore, we use\n        // the clone algorithm to create a copy of all the current children.\n        // If we had any progressed work already, that is invalid at this point so\n        // let's throw it out.\n        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n      }\n    }\n\n    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n      // This function is fork of reconcileChildren. It's used in cases where we\n      // want to reconcile without matching against the existing set. This has the\n      // effect of all current children being unmounted; even if the type and key\n      // are the same, the old child is unmounted and a new child is created.\n      //\n      // To do this, we're going to go through the reconcile algorithm twice. In\n      // the first pass, we schedule a deletion for all the current children by\n      // passing null.\n      workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n      // pass null in place of where we usually pass the current child set. This has\n      // the effect of remounting all children regardless of whether their\n      // identities match.\n\n      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n    }\n\n    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens after the first render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      }\n      var render = Component.render;\n      var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n      var nextChildren;\n      var hasId;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        markComponentRenderStarted(workInProgress);\n      }\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n        hasId = checkDidRenderIdHook();\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n\n          try {\n            nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n            hasId = checkDidRenderIdHook();\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n\n        setIsRendering(false);\n      }\n      {\n        markComponentRenderStopped();\n      }\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n\n      if (getIsHydrating() && hasId) {\n        pushMaterializedTreeId(workInProgress);\n      } // React DevTools reads this flag.\n\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      if (current === null) {\n        var type = Component.type;\n\n        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n        Component.defaultProps === undefined) {\n          var resolvedType = type;\n          {\n            resolvedType = resolveFunctionForHotReloading(type);\n          } // If this is a plain function component without default props,\n          // and with only the default shallow comparison, we upgrade it\n          // to a SimpleMemoComponent to allow fast path updates.\n\n          workInProgress.tag = SimpleMemoComponent;\n          workInProgress.type = resolvedType;\n          {\n            validateFunctionComponentInDev(workInProgress, type);\n          }\n          return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n        }\n\n        {\n          var innerPropTypes = type.propTypes;\n\n          if (innerPropTypes) {\n            // Inner memo component props aren't currently validated in createElement.\n            // We could move it there, but we'd still need this for lazy code path.\n            checkPropTypes(innerPropTypes, nextProps, // Resolved props\n            'prop', getComponentNameFromType(type));\n          }\n        }\n        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n        child.ref = workInProgress.ref;\n        child.return = workInProgress;\n        workInProgress.child = child;\n        return child;\n      }\n\n      {\n        var _type = Component.type;\n        var _innerPropTypes = _type.propTypes;\n\n        if (_innerPropTypes) {\n          // Inner memo component props aren't currently validated in createElement.\n          // We could move it there, but we'd still need this for lazy code path.\n          checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n          'prop', getComponentNameFromType(_type));\n        }\n      }\n      var currentChild = current.child; // This is always exactly one child\n\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n      if (!hasScheduledUpdateOrContext) {\n        // This will be the props with resolved defaultProps,\n        // unlike current.memoizedProps which will be the unresolved ones.\n        var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n        var compare = Component.compare;\n        compare = compare !== null ? compare : shallowEqual;\n\n        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } // React DevTools reads this flag.\n\n\n      workInProgress.flags |= PerformedWork;\n      var newChild = createWorkInProgress(currentChild, nextProps);\n      newChild.ref = workInProgress.ref;\n      newChild.return = workInProgress;\n      workInProgress.child = newChild;\n      return newChild;\n    }\n\n    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens when the inner render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var outerMemoType = workInProgress.elementType;\n\n          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n            // We warn when you define propTypes on lazy()\n            // so let's just skip over it to find memo() outer wrapper.\n            // Inner props for memo are validated later.\n            var lazyComponent = outerMemoType;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n\n            try {\n              outerMemoType = init(payload);\n            } catch (x) {\n              outerMemoType = null;\n            } // Inner propTypes will be validated in the function component path.\n\n\n            var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n              'prop', getComponentNameFromType(outerMemoType));\n            }\n          }\n        }\n      }\n\n      if (current !== null) {\n        var prevProps = current.memoizedProps;\n\n        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.\n        workInProgress.type === current.type) {\n          didReceiveUpdate = false;\n\n          if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n            // The pending lanes were cleared at the beginning of beginWork. We're\n            // about to bail out, but there might be other lanes that weren't\n            // included in the current render. Usually, the priority level of the\n            // remaining updates is accumulated during the evaluation of the\n            // component (i.e. when processing the update queue). But since since\n            // we're bailing out early *without* evaluating the component, we need\n            // to account for it here, too. Reset to the value of the current fiber.\n            // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n            // because a MemoComponent fiber does not have hooks or an update queue;\n            // rather, it wraps around an inner component, which may or may not\n            // contains hooks.\n            // TODO: Move the reset at in beginWork out of the common path so that\n            // this is no longer necessary.\n            workInProgress.lanes = current.lanes;\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n          } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          }\n        }\n      }\n\n      return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n    }\n\n    function updateOffscreenComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      var prevState = current !== null ? current.memoizedState : null;\n\n      if (nextProps.mode === 'hidden' || enableLegacyHidden) {\n        // Rendering a hidden tree.\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          // In legacy sync mode, don't defer the subtree. Render it now.\n          var nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = nextState;\n          pushRenderLanes(workInProgress, renderLanes);\n        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n          var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n          // and resume this tree later.\n\n          var nextBaseLanes;\n\n          if (prevState !== null) {\n            var prevBaseLanes = prevState.baseLanes;\n            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n          } else {\n            nextBaseLanes = renderLanes;\n          } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n          workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n          var _nextState = {\n            baseLanes: nextBaseLanes,\n            cachePool: spawnedCachePool\n          };\n          workInProgress.memoizedState = _nextState;\n          workInProgress.updateQueue = null; // to avoid a push/pop misalignment.\n\n          pushRenderLanes(workInProgress, nextBaseLanes);\n          return null;\n        } else {\n          // This is the second render. The surrounding visible content has already\n          // committed. Now we resume rendering the hidden tree.\n          // Rendering at offscreen, so we can clear the base lanes.\n          var _nextState2 = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n          var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n          pushRenderLanes(workInProgress, subtreeRenderLanes);\n        }\n      } else {\n        // Rendering a visible tree.\n        var _subtreeRenderLanes;\n\n        if (prevState !== null) {\n          // We're going from hidden -> visible.\n          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n          workInProgress.memoizedState = null;\n        } else {\n          // We weren't previously hidden, and we still aren't, so there's nothing\n          // special to do. Need to push to the stack regardless, though, to avoid\n          // a push/pop misalignment.\n          _subtreeRenderLanes = renderLanes;\n        }\n\n        pushRenderLanes(workInProgress, _subtreeRenderLanes);\n      }\n\n      {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n    }\n\n    function updateFragment(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateMode(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateProfiler(current, workInProgress, renderLanes) {\n      {\n        workInProgress.flags |= Update;\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function markRef$1(current, workInProgress) {\n      var ref = workInProgress.ref;\n\n      if (current === null && ref !== null || current !== null && current.ref !== ref) {\n        // Schedule a Ref effect\n        workInProgress.flags |= Ref;\n        {\n          workInProgress.flags |= RefStatic;\n        }\n      }\n    }\n\n    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      }\n      var context;\n      {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      var nextChildren;\n      var hasId;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        markComponentRenderStarted(workInProgress);\n      }\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        hasId = checkDidRenderIdHook();\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n\n          try {\n            nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n            hasId = checkDidRenderIdHook();\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n\n        setIsRendering(false);\n      }\n      {\n        markComponentRenderStopped();\n      }\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n\n      if (getIsHydrating() && hasId) {\n        pushMaterializedTreeId(workInProgress);\n      } // React DevTools reads this flag.\n\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        // This is used by DevTools to force a boundary to error.\n        switch (shouldError(workInProgress)) {\n          case false:\n            {\n              var _instance = workInProgress.stateNode;\n              var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n              // Is there a better way to do this?\n\n              var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n              var state = tempInstance.state;\n\n              _instance.updater.enqueueSetState(_instance, state, null);\n\n              break;\n            }\n\n          case true:\n            {\n              workInProgress.flags |= DidCapture;\n              workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n              var error$1 = new Error('Simulated error coming from DevTools');\n              var lane = pickArbitraryLane(renderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n              var update = createClassErrorUpdate(workInProgress, createCapturedValue(error$1, workInProgress), lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              break;\n            }\n        }\n\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      } // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      var instance = workInProgress.stateNode;\n      var shouldUpdate;\n\n      if (instance === null) {\n        if (current !== null) {\n          // A class component without an instance only mounts if it suspended\n          // inside a non-concurrent tree, in an inconsistent state. We want to\n          // treat it like a new mount, even though an empty version of it already\n          // committed. Disconnect the alternate pointers.\n          current.alternate = null;\n          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n          workInProgress.flags |= Placement;\n        } // In the initial pass we might need to construct the instance.\n\n\n        constructClassInstance(workInProgress, Component, nextProps);\n        mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        shouldUpdate = true;\n      } else if (current === null) {\n        // In a resume, we'll already have an instance we can reuse.\n        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      } else {\n        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n      }\n\n      var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n      {\n        var inst = workInProgress.stateNode;\n\n        if (shouldUpdate && inst.props !== nextProps) {\n          if (!didWarnAboutReassigningProps) {\n            error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n          }\n\n          didWarnAboutReassigningProps = true;\n        }\n      }\n      return nextUnitOfWork;\n    }\n\n    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n      // Refs should update even if shouldComponentUpdate returns false\n      markRef$1(current, workInProgress);\n      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      if (!shouldUpdate && !didCaptureError) {\n        // Context providers should defer to sCU for rendering\n        if (hasContext) {\n          invalidateContextProvider(workInProgress, Component, false);\n        }\n\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n\n      var instance = workInProgress.stateNode; // Rerender\n\n      ReactCurrentOwner$1.current = workInProgress;\n      var nextChildren;\n\n      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n        // If we captured an error, but getDerivedStateFromError is not defined,\n        // unmount all the children. componentDidCatch will schedule an update to\n        // re-render a fallback. This is temporary until we migrate everyone to\n        // the new API.\n        // TODO: Warn in a future release.\n        nextChildren = null;\n        {\n          stopProfilerTimerIfRunning();\n        }\n      } else {\n        {\n          markComponentRenderStarted(workInProgress);\n        }\n        {\n          setIsRendering(true);\n          nextChildren = instance.render();\n\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n\n            try {\n              instance.render();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n\n          setIsRendering(false);\n        }\n        {\n          markComponentRenderStopped();\n        }\n      } // React DevTools reads this flag.\n\n\n      workInProgress.flags |= PerformedWork;\n\n      if (current !== null && didCaptureError) {\n        // If we're recovering from an error, reconcile without reusing any of\n        // the existing children. Conceptually, the normal children and the children\n        // that are shown on error are two different sets, so we shouldn't reuse\n        // normal children even if their identities match.\n        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      } // Memoize state using the values we just used to render.\n      // TODO: Restructure so we never read values from the instance.\n\n\n      workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n      if (hasContext) {\n        invalidateContextProvider(workInProgress, Component, true);\n      }\n\n      return workInProgress.child;\n    }\n\n    function pushHostRootContext(workInProgress) {\n      var root = workInProgress.stateNode;\n\n      if (root.pendingContext) {\n        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n      } else if (root.context) {\n        // Should always be set\n        pushTopLevelContextObject(workInProgress, root.context, false);\n      }\n\n      pushHostContainer(workInProgress, root.containerInfo);\n    }\n\n    function updateHostRoot(current, workInProgress, renderLanes) {\n      pushHostRootContext(workInProgress);\n\n      if (current === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      var nextProps = workInProgress.pendingProps;\n      var prevState = workInProgress.memoizedState;\n      var prevChildren = prevState.element;\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n      var nextState = workInProgress.memoizedState;\n      var root = workInProgress.stateNode; // being called \"element\".\n\n      var nextChildren = nextState.element;\n\n      if (supportsHydration && prevState.isDehydrated) {\n        // This is a hydration root whose shell has not yet hydrated. We should\n        // attempt to hydrate.\n        // Flip isDehydrated to false to indicate that when this render\n        // finishes, the root will no longer be dehydrated.\n        var overrideState = {\n          element: nextChildren,\n          isDehydrated: false,\n          cache: nextState.cache,\n          transitions: nextState.transitions\n        };\n        var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n        // have reducer functions so it doesn't need rebasing.\n\n        updateQueue.baseState = overrideState;\n        workInProgress.memoizedState = overrideState;\n\n        if (workInProgress.flags & ForceClientRender) {\n          // Something errored during a previous attempt to hydrate the shell, so we\n          // forced a client render.\n          var recoverableError = new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.');\n          return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n        } else if (nextChildren !== prevChildren) {\n          var _recoverableError = new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.');\n\n          return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n        } else {\n          // The outermost shell has not hydrated yet. Start hydrating.\n          enterHydrationState(workInProgress);\n          var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n          workInProgress.child = child;\n          var node = child;\n\n          while (node) {\n            // Mark each child as hydrating. This is a fast path to know whether this\n            // tree is part of a hydrating tree. This is used to determine if a child\n            // node has fully mounted yet, and for scheduling event replaying.\n            // Conceptually this is similar to Placement in that a new subtree is\n            // inserted into the React tree here. It just happens to not need DOM\n            // mutations because it already exists.\n            node.flags = node.flags & ~Placement | Hydrating;\n            node = node.sibling;\n          }\n        }\n      } else {\n        // Root is not dehydrated. Either this is a client-only root, or it\n        // already hydrated.\n        resetHydrationState();\n\n        if (nextChildren === prevChildren) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n\n      return workInProgress.child;\n    }\n\n    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n      // Revert to client rendering.\n      resetHydrationState();\n      queueHydrationError(recoverableError);\n      workInProgress.flags |= ForceClientRender;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateHostComponent$1(current, workInProgress, renderLanes) {\n      pushHostContext(workInProgress);\n\n      if (current === null) {\n        tryToClaimNextHydratableInstance(workInProgress);\n      }\n\n      var type = workInProgress.type;\n      var nextProps = workInProgress.pendingProps;\n      var prevProps = current !== null ? current.memoizedProps : null;\n      var nextChildren = nextProps.children;\n      var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n      if (isDirectTextChild) {\n        // We special case a direct text child of a host node. This is a common\n        // case. We won't handle it as a reified child. We will instead handle\n        // this in the host environment that also has access to this prop. That\n        // avoids allocating another HostText fiber and traversing it.\n        nextChildren = null;\n      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n        // If we're switching from a direct text child to a normal child, or to\n        // empty, we need to schedule the text content to be reset.\n        workInProgress.flags |= ContentReset;\n      }\n\n      markRef$1(current, workInProgress);\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateHostText$1(current, workInProgress) {\n      if (current === null) {\n        tryToClaimNextHydratableInstance(workInProgress);\n      } // Nothing to do here. This is terminal. We'll do the completion step\n      // immediately after.\n\n\n      return null;\n    }\n\n    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n      if (_current !== null) {\n        // A lazy component only mounts if it suspended inside a non-\n        // concurrent tree, in an inconsistent state. We want to treat it like\n        // a new mount, even though an empty version of it already committed.\n        // Disconnect the alternate pointers.\n        _current.alternate = null;\n        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n        workInProgress.flags |= Placement;\n      }\n\n      var props = workInProgress.pendingProps;\n      var lazyComponent = elementType;\n      var payload = lazyComponent._payload;\n      var init = lazyComponent._init;\n      var Component = init(payload); // Store the unwrapped component in the type.\n\n      workInProgress.type = Component;\n      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n      var resolvedProps = resolveDefaultProps(Component, props);\n      var child;\n\n      switch (resolvedTag) {\n        case FunctionComponent:\n          {\n            {\n              validateFunctionComponentInDev(workInProgress, Component);\n              workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n            }\n            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n\n        case ClassComponent:\n          {\n            {\n              workInProgress.type = Component = resolveClassForHotReloading(Component);\n            }\n            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n\n        case ForwardRef:\n          {\n            {\n              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n            }\n            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n\n        case MemoComponent:\n          {\n            {\n              if (workInProgress.type !== workInProgress.elementType) {\n                var outerPropTypes = Component.propTypes;\n\n                if (outerPropTypes) {\n                  checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n                  'prop', getComponentNameFromType(Component));\n                }\n              }\n            }\n            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n            renderLanes);\n            return child;\n          }\n      }\n\n      var hint = '';\n      {\n        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n          hint = ' Did you wrap a component in React.lazy() more than once?';\n        }\n      } // This message intentionally doesn't mention ForwardRef or MemoComponent\n      // because the fact that it's a separate type of work is an\n      // implementation detail.\n\n      throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n    }\n\n    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n      if (_current !== null) {\n        // An incomplete component only mounts if it suspended inside a non-\n        // concurrent tree, in an inconsistent state. We want to treat it like\n        // a new mount, even though an empty version of it already committed.\n        // Disconnect the alternate pointers.\n        _current.alternate = null;\n        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n        workInProgress.flags |= Placement;\n      } // Promote the fiber to a class and try rendering again.\n\n\n      workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n      // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      constructClassInstance(workInProgress, Component, nextProps);\n      mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n    }\n\n    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n      if (_current !== null) {\n        // An indeterminate component only mounts if it suspended inside a non-\n        // concurrent tree, in an inconsistent state. We want to treat it like\n        // a new mount, even though an empty version of it already committed.\n        // Disconnect the alternate pointers.\n        _current.alternate = null;\n        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n        workInProgress.flags |= Placement;\n      }\n\n      var props = workInProgress.pendingProps;\n      var context;\n      {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var value;\n      var hasId;\n      {\n        markComponentRenderStarted(workInProgress);\n      }\n      {\n        if (Component.prototype && typeof Component.prototype.render === 'function') {\n          var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutBadClass[componentName]) {\n            error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n            didWarnAboutBadClass[componentName] = true;\n          }\n        }\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n        }\n\n        setIsRendering(true);\n        ReactCurrentOwner$1.current = workInProgress;\n        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n        hasId = checkDidRenderIdHook();\n        setIsRendering(false);\n      }\n      {\n        markComponentRenderStopped();\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      {\n        // Support for module components is deprecated and is removed behind a flag.\n        // Whether or not it would crash later, we want to show a good message in DEV first.\n        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n          var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutModulePatternComponent[_componentName]) {\n            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n            didWarnAboutModulePatternComponent[_componentName] = true;\n          }\n        }\n      }\n\n      if ( // Run these checks in production only if the flag is off.\n      // Eventually we'll delete this branch altogether.\n      typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n        {\n          var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutModulePatternComponent[_componentName2]) {\n            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n            didWarnAboutModulePatternComponent[_componentName2] = true;\n          }\n        } // Proceed under the assumption that this is a class instance\n\n        workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n\n        var hasContext = false;\n\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n\n        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n        initializeUpdateQueue(workInProgress);\n        adoptClassInstance(workInProgress, value);\n        mountClassInstance(workInProgress, Component, props, renderLanes);\n        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n      } else {\n        // Proceed under the assumption that this is a function component\n        workInProgress.tag = FunctionComponent;\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n\n            try {\n              value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n              hasId = checkDidRenderIdHook();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n        }\n\n        if (getIsHydrating() && hasId) {\n          pushMaterializedTreeId(workInProgress);\n        }\n\n        reconcileChildren(null, workInProgress, value, renderLanes);\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n        }\n        return workInProgress.child;\n      }\n    }\n\n    function validateFunctionComponentInDev(workInProgress, Component) {\n      {\n        if (Component) {\n          if (Component.childContextTypes) {\n            error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          var info = '';\n          var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n\n          var warningKey = ownerName || '';\n          var debugSource = workInProgress._debugSource;\n\n          if (debugSource) {\n            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n          }\n\n          if (!didWarnAboutFunctionRefs[warningKey]) {\n            didWarnAboutFunctionRefs[warningKey] = true;\n            error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n          }\n        }\n\n        if (typeof Component.getDerivedStateFromProps === 'function') {\n          var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n            error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n          }\n        }\n\n        if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n          var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n            error('%s: Function components do not support contextType.', _componentName4);\n            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n          }\n        }\n      }\n    }\n\n    var SUSPENDED_MARKER = {\n      dehydrated: null,\n      treeContext: null,\n      retryLane: NoLane\n    };\n\n    function mountSuspenseOffscreenState(renderLanes) {\n      return {\n        baseLanes: renderLanes,\n        cachePool: getSuspendedCache()\n      };\n    }\n\n    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n      var cachePool = null;\n      return {\n        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n        cachePool: cachePool\n      };\n    } // TODO: Probably should inline this back\n\n\n    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n      // If we're already showing a fallback, there are cases where we need to\n      // remain on that fallback regardless of whether the content has resolved.\n      // For example, SuspenseList coordinates when nested content appears.\n      if (current !== null) {\n        var suspenseState = current.memoizedState;\n\n        if (suspenseState === null) {\n          // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n          // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n          // Note: This is a factoring smell. Can't remain on a fallback if there's\n          // no fallback to remain on.\n          return false;\n        }\n      } // Not currently showing content. Consult the Suspense context.\n\n\n      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    }\n\n    function getRemainingWorkInPrimaryTree(current, renderLanes) {\n      // TODO: Should not remove render lanes that were pinged during this render\n      return removeLanes(current.childLanes, renderLanes);\n    }\n\n    function updateSuspenseComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n      {\n        if (shouldSuspend(workInProgress)) {\n          workInProgress.flags |= DidCapture;\n        }\n      }\n      var suspenseContext = suspenseStackCursor.current;\n      var showFallback = false;\n      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n        // Something in this boundary's subtree already suspended. Switch to\n        // rendering the fallback children.\n        showFallback = true;\n        workInProgress.flags &= ~DidCapture;\n      } else {\n        // Attempting the main content\n        if (current === null || current.memoizedState !== null) {\n          // This is a new mount or this boundary is already showing a fallback state.\n          // Mark this subtree context as having at least one invisible parent that could\n          // handle the fallback state.\n          // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n          {\n            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n          }\n        }\n      }\n\n      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n      pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n      // boundary's children. This involves some custom reconciliation logic. Two\n      // main reasons this is so complicated.\n      //\n      // First, Legacy Mode has different semantics for backwards compatibility. The\n      // primary tree will commit in an inconsistent state, so when we do the\n      // second pass to render the fallback, we do some exceedingly, uh, clever\n      // hacks to make that not totally break. Like transferring effects and\n      // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n      // because we bailout on the primary tree completely and leave it in its old\n      // state, no effects. Same as what we do for Offscreen (except that\n      // Offscreen doesn't have the first render pass).\n      //\n      // Second is hydration. During hydration, the Suspense fiber has a slightly\n      // different layout, where the child points to a dehydrated fragment, which\n      // contains the DOM rendered by the server.\n      //\n      // Third, even if you set all that aside, Suspense is like error boundaries in\n      // that we first we try to render one tree, and if that fails, we render again\n      // and switch to a different tree. Like a try/catch block. So we have to track\n      // which branch we're currently rendering. Ideally we would model this using\n      // a stack.\n\n      if (current === null) {\n        // Initial mount\n        // If we're currently hydrating, try to hydrate this boundary.\n        tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n        {\n          var suspenseState = workInProgress.memoizedState;\n\n          if (suspenseState !== null) {\n            var dehydrated = suspenseState.dehydrated;\n\n            if (dehydrated !== null) {\n              return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n            }\n          }\n        }\n        var nextPrimaryChildren = nextProps.children;\n        var nextFallbackChildren = nextProps.fallback;\n\n        if (showFallback) {\n          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n          var primaryChildFragment = workInProgress.child;\n          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackFragment;\n        } else {\n          return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n        }\n      } else {\n        // This is an update.\n        // If the current fiber has a SuspenseState, that means it's already showing\n        // a fallback.\n        var prevState = current.memoizedState;\n\n        if (prevState !== null) {\n          // The current tree is already showing a fallback\n          // Special path for hydration\n          {\n            var _dehydrated = prevState.dehydrated;\n\n            if (_dehydrated !== null) {\n              if (!didSuspend) {\n                return updateDehydratedSuspenseComponent(current, workInProgress, _dehydrated, prevState, renderLanes);\n              } else if (workInProgress.flags & ForceClientRender) {\n                // Something errored during hydration. Try again without hydrating.\n                workInProgress.flags &= ~ForceClientRender;\n                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n              } else if (workInProgress.memoizedState !== null) {\n                // Something suspended and we should still be in dehydrated mode.\n                // Leave the existing child in place.\n                workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n                // but the normal suspense pass doesn't.\n\n                workInProgress.flags |= DidCapture;\n                return null;\n              } else {\n                // Suspended but we should no longer be in dehydrated mode.\n                // Therefore we now have to render the fallback.\n                var _nextPrimaryChildren = nextProps.children;\n                var _nextFallbackChildren = nextProps.fallback;\n                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n                var _primaryChildFragment2 = workInProgress.child;\n                _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes);\n                workInProgress.memoizedState = SUSPENDED_MARKER;\n                return fallbackChildFragment;\n              }\n            }\n          }\n\n          if (showFallback) {\n            var _nextFallbackChildren2 = nextProps.fallback;\n            var _nextPrimaryChildren2 = nextProps.children;\n\n            var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);\n\n            var _primaryChildFragment3 = workInProgress.child;\n            var prevOffscreenState = current.child.memoizedState;\n            _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n            _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return _fallbackChildFragment;\n          } else {\n            var _nextPrimaryChildren3 = nextProps.children;\n\n            var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);\n\n            workInProgress.memoizedState = null;\n            return _primaryChildFragment4;\n          }\n        } else {\n          // The current tree is not already showing a fallback.\n          if (showFallback) {\n            // Timed out.\n            var _nextFallbackChildren3 = nextProps.fallback;\n            var _nextPrimaryChildren4 = nextProps.children;\n\n            var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);\n\n            var _primaryChildFragment5 = workInProgress.child;\n            var _prevOffscreenState = current.child.memoizedState;\n            _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);\n            _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the\n            // fallback children.\n\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return _fallbackChildFragment2;\n          } else {\n            // Still haven't timed out. Continue rendering the children, like we\n            // normally do.\n            var _nextPrimaryChildren5 = nextProps.children;\n\n            var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);\n\n            workInProgress.memoizedState = null;\n            return _primaryChildFragment6;\n          }\n        }\n      }\n    }\n\n    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: 'visible',\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n      primaryChildFragment.return = workInProgress;\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n\n    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var progressedPrimaryFragment = workInProgress.child;\n      var primaryChildProps = {\n        mode: 'hidden',\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      var fallbackChildFragment;\n\n      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n        // In legacy mode, we commit the primary tree as if it successfully\n        // completed, even though it's in an inconsistent state.\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = 0;\n          primaryChildFragment.treeBaseDuration = 0;\n        }\n\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      } else {\n        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      }\n\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n\n    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n      // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n      // this wrapper function to constrain it.\n      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n    }\n\n    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n      // The props argument to `createWorkInProgress` is `any` typed, so we use this\n      // wrapper function to constrain it.\n      return createWorkInProgress(current, offscreenProps);\n    }\n\n    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n        mode: 'visible',\n        children: primaryChildren\n      });\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        primaryChildFragment.lanes = renderLanes;\n      }\n\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = null;\n\n      if (currentFallbackChildFragment !== null) {\n        // Delete the fallback child fragment\n        var deletions = workInProgress.deletions;\n\n        if (deletions === null) {\n          workInProgress.deletions = [currentFallbackChildFragment];\n          workInProgress.flags |= ChildDeletion;\n        } else {\n          deletions.push(currentFallbackChildFragment);\n        }\n      }\n\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n\n    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildProps = {\n        mode: 'hidden',\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n\n      if ( // In legacy mode, we commit the primary tree as if it successfully\n      // completed, even though it's in an inconsistent state.\n      (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n      // already cloned. In legacy mode, the only case where this isn't true is\n      // when DevTools forces us to display a fallback; we skip the first render\n      // pass entirely and go straight to rendering the fallback. (In Concurrent\n      // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n      // only codepath.)\n      workInProgress.child !== currentPrimaryChildFragment) {\n        var progressedPrimaryFragment = workInProgress.child;\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n        } // However, since we're going to remain on the fallback, we no longer want\n        // to delete it.\n\n\n        workInProgress.deletions = null;\n      } else {\n        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // (We don't do this in legacy mode, because in legacy mode we don't re-use\n        // the current tree; see previous branch.)\n\n        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n      }\n\n      var fallbackChildFragment;\n\n      if (currentFallbackChildFragment !== null) {\n        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n      } else {\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n        // mounted but this is a new fiber.\n\n        fallbackChildFragment.flags |= Placement;\n      }\n\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n\n    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n      // Falling back to client rendering. Because this has performance\n      // implications, it's considered a recoverable error, even though the user\n      // likely won't observe anything wrong with the UI.\n      //\n      // The error is passed in as an argument to enforce that every caller provide\n      // a custom message, or explicitly opt out (currently the only path that opts\n      // out is legacy mode; every concurrent path provides an error).\n      if (recoverableError !== null) {\n        queueHydrationError(recoverableError);\n      } // This will add the old fiber to the deletion list\n\n\n      reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n      var nextProps = workInProgress.pendingProps;\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n      // mounted but this is a new fiber.\n\n      primaryChildFragment.flags |= Placement;\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n\n    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var fiberMode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: 'visible',\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n      var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n      // boundary) already mounted but this is a new fiber.\n\n      fallbackChildFragment.flags |= Placement;\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n\n      if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n        // We will have dropped the effect list which contains the\n        // deletion. We need to reconcile to delete the current child.\n        reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      }\n\n      return fallbackChildFragment;\n    }\n\n    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n      // During the first pass, we'll bail out and not drill into the children.\n      // Instead, we'll leave the content in place and try to hydrate it later.\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        {\n          error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n        }\n        workInProgress.lanes = laneToLanes(SyncLane);\n      } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n        // This is a client-only boundary. Since we won't get any content from the server\n        // for this, we need to schedule that at a higher priority based on when it would\n        // have timed out. In theory we could render it in this pass but it would have the\n        // wrong priority associated with it and will prevent hydration of parent path.\n        // Instead, we'll leave work left on it to render it in a separate commit.\n        // TODO This time should be the time at which the server rendered response that is\n        // a parent to this boundary was displayed. However, since we currently don't have\n        // a protocol to transfer that time, we'll just estimate it by using the current\n        // time. This will mean that Suspense timeouts are slightly shifted to later than\n        // they should be.\n        // Schedule a normal pri update to render this content.\n        workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n      } else {\n        // We'll continue hydrating the rest at offscreen priority since we'll already\n        // be showing the right content coming from the server, it is no rush.\n        workInProgress.lanes = laneToLanes(OffscreenLane);\n      }\n\n      return null;\n    }\n\n    function updateDehydratedSuspenseComponent(current, workInProgress, suspenseInstance, suspenseState, renderLanes) {\n      // We should never be hydrating at this point because it is the first pass,\n      // but after we've already committed once.\n      warnIfHydrating();\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument\n        // required — every concurrent mode path that causes hydration to\n        // de-opt to client rendering should have an error message.\n        null);\n      }\n\n      if (isSuspenseInstanceFallback(suspenseInstance)) {\n        // This boundary is in a permanent fallback state. In this case, we'll never\n        // get an update and we'll never be able to hydrate the final content. Let's just try the\n        // client side render instead.\n        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: The server should serialize the error message so we can log it\n        // here on the client. Or, in production, a hash/id that corresponds to\n        // the error.\n        new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.'));\n      } // any context has changed, we need to treat is as if the input might have changed.\n\n\n      var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n\n      if (didReceiveUpdate || hasContextChanged) {\n        // This boundary has changed since the first render. This means that we are now unable to\n        // hydrate it. We might still be able to hydrate it using a higher priority lane.\n        var root = getWorkInProgressRoot();\n\n        if (root !== null) {\n          var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n\n          if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n            // Intentionally mutating since this render will get interrupted. This\n            // is one of the very rare times where we mutate the current tree\n            // during the render phase.\n            suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n            var eventTime = NoTimestamp;\n            scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n          }\n        } // If we have scheduled higher pri work above, this will probably just abort the render\n        // since we now have higher priority work, but in case it doesn't, we need to prepare to\n        // render something, if we time out. Even if that requires us to delete everything and\n        // skip hydration.\n        // Delay having to do this as long as the suspense timeout allows us.\n\n\n        renderDidSuspendDelayIfPossible();\n        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n      } else if (isSuspenseInstancePending(suspenseInstance)) {\n        // This component is still pending more data from the server, so we can't hydrate its\n        // content. We treat it as if this component suspended itself. It might seem as if\n        // we could just try to render it client-side instead. However, this will perform a\n        // lot of unnecessary work and is unlikely to complete since it often will suspend\n        // on missing data anyway. Additionally, the server might be able to render more\n        // than we can on the client yet. In that case we'd end up with more fallback states\n        // on the client than if we just leave it alone. If the server times out or errors\n        // these should update this boundary to the permanent Fallback state instead.\n        // Mark it as having captured (i.e. suspended).\n        workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n        workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n        var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n        registerSuspenseInstanceRetry(suspenseInstance, retry);\n        return null;\n      } else {\n        // This is the first attempt.\n        reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n        var nextProps = workInProgress.pendingProps;\n        var primaryChildren = nextProps.children;\n        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n\n        primaryChildFragment.flags |= Hydrating;\n        return primaryChildFragment;\n      }\n    }\n\n    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n\n      scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n    }\n\n    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n      // Mark any Suspense boundaries with fallbacks as having work to do.\n      // If they were previously forced into fallbacks, they may now be able\n      // to unblock.\n      var node = firstChild;\n\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n\n          if (state !== null) {\n            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n          }\n        } else if (node.tag === SuspenseListComponent) {\n          // If the tail is hidden there might not be an Suspense boundaries\n          // to schedule work on. In this case we have to schedule it on the\n          // list itself.\n          // We don't have to traverse to the children of the list since\n          // the list will propagate the change when it rerenders.\n          scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === workInProgress) {\n          return;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === workInProgress) {\n            return;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n\n    function findLastContentRow(firstChild) {\n      // This is going to find the last row among these children that is already\n      // showing content on the screen, as opposed to being in fallback state or\n      // new. If a row has multiple Suspense boundaries, any of them being in the\n      // fallback state, counts as the whole row being in a fallback state.\n      // Note that the \"rows\" will be workInProgress, but any nested children\n      // will still be current since we haven't rendered them yet. The mounted\n      // order may not be the same as the new order. We use the new order.\n      var row = firstChild;\n      var lastContentRow = null;\n\n      while (row !== null) {\n        var currentRow = row.alternate; // New rows can't be content rows.\n\n        if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n          lastContentRow = row;\n        }\n\n        row = row.sibling;\n      }\n\n      return lastContentRow;\n    }\n\n    function validateRevealOrder(revealOrder) {\n      {\n        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n          didWarnAboutRevealOrder[revealOrder] = true;\n\n          if (typeof revealOrder === 'string') {\n            switch (revealOrder.toLowerCase()) {\n              case 'together':\n              case 'forwards':\n              case 'backwards':\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n\n              case 'forward':\n              case 'backward':\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n\n              default:\n                error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                break;\n            }\n          } else {\n            error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n          }\n        }\n      }\n    }\n\n    function validateTailOptions(tailMode, revealOrder) {\n      {\n        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n          if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n          } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n          }\n        }\n      }\n    }\n\n    function validateSuspenseListNestedChild(childSlot, index) {\n      {\n        var isAnArray = isArray(childSlot);\n        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n        if (isAnArray || isIterable) {\n          var type = isAnArray ? 'array' : 'iterable';\n          error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n          return false;\n        }\n      }\n      return true;\n    }\n\n    function validateSuspenseListChildren(children, revealOrder) {\n      {\n        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              if (!validateSuspenseListNestedChild(children[i], i)) {\n                return;\n              }\n            }\n          } else {\n            var iteratorFn = getIteratorFn(children);\n\n            if (typeof iteratorFn === 'function') {\n              var childrenIterator = iteratorFn.call(children);\n\n              if (childrenIterator) {\n                var step = childrenIterator.next();\n                var _i = 0;\n\n                for (; !step.done; step = childrenIterator.next()) {\n                  if (!validateSuspenseListNestedChild(step.value, _i)) {\n                    return;\n                  }\n\n                  _i++;\n                }\n              }\n            } else {\n              error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n            }\n          }\n        }\n      }\n    }\n\n    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n      var renderState = workInProgress.memoizedState;\n\n      if (renderState === null) {\n        workInProgress.memoizedState = {\n          isBackwards: isBackwards,\n          rendering: null,\n          renderingStartTime: 0,\n          last: lastContentRow,\n          tail: tail,\n          tailMode: tailMode\n        };\n      } else {\n        // We can reuse the existing object from previous renders.\n        renderState.isBackwards = isBackwards;\n        renderState.rendering = null;\n        renderState.renderingStartTime = 0;\n        renderState.last = lastContentRow;\n        renderState.tail = tail;\n        renderState.tailMode = tailMode;\n      }\n    } // This can end up rendering this component multiple passes.\n    // The first pass splits the children fibers into two sets. A head and tail.\n    // We first render the head. If anything is in fallback state, we do another\n    // pass through beginWork to rerender all children (including the tail) with\n    // the force suspend context. If the first render didn't have anything in\n    // in fallback state. Then we render each row in the tail one-by-one.\n    // That happens in the completeWork phase without going back to beginWork.\n\n\n    function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var revealOrder = nextProps.revealOrder;\n      var tailMode = nextProps.tail;\n      var newChildren = nextProps.children;\n      validateRevealOrder(revealOrder);\n      validateTailOptions(tailMode, revealOrder);\n      validateSuspenseListChildren(newChildren, revealOrder);\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      var suspenseContext = suspenseStackCursor.current;\n      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n      if (shouldForceFallback) {\n        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n        workInProgress.flags |= DidCapture;\n      } else {\n        var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n        if (didSuspendBefore) {\n          // If we previously forced a fallback, we need to schedule work\n          // on any nested boundaries to let them know to try to render\n          // again. This is the same as context updating.\n          propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n        }\n\n        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n      }\n\n      pushSuspenseContext(workInProgress, suspenseContext);\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        // In legacy mode, SuspenseList doesn't work so we just\n        // use make it a noop by treating it as the default revealOrder.\n        workInProgress.memoizedState = null;\n      } else {\n        switch (revealOrder) {\n          case 'forwards':\n            {\n              var lastContentRow = findLastContentRow(workInProgress.child);\n              var tail;\n\n              if (lastContentRow === null) {\n                // The whole list is part of the tail.\n                // TODO: We could fast path by just rendering the tail now.\n                tail = workInProgress.child;\n                workInProgress.child = null;\n              } else {\n                // Disconnect the tail rows after the content row.\n                // We're going to render them separately later.\n                tail = lastContentRow.sibling;\n                lastContentRow.sibling = null;\n              }\n\n              initSuspenseListRenderState(workInProgress, false, // isBackwards\n              tail, lastContentRow, tailMode);\n              break;\n            }\n\n          case 'backwards':\n            {\n              // We're going to find the first row that has existing content.\n              // At the same time we're going to reverse the list of everything\n              // we pass in the meantime. That's going to be our tail in reverse\n              // order.\n              var _tail = null;\n              var row = workInProgress.child;\n              workInProgress.child = null;\n\n              while (row !== null) {\n                var currentRow = row.alternate; // New rows can't be content rows.\n\n                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                  // This is the beginning of the main content.\n                  workInProgress.child = row;\n                  break;\n                }\n\n                var nextRow = row.sibling;\n                row.sibling = _tail;\n                _tail = row;\n                row = nextRow;\n              } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n              initSuspenseListRenderState(workInProgress, true, // isBackwards\n              _tail, null, // last\n              tailMode);\n              break;\n            }\n\n          case 'together':\n            {\n              initSuspenseListRenderState(workInProgress, false, // isBackwards\n              null, // tail\n              null, // last\n              undefined);\n              break;\n            }\n\n          default:\n            {\n              // The default reveal order is the same as not having\n              // a boundary.\n              workInProgress.memoizedState = null;\n            }\n        }\n      }\n\n      return workInProgress.child;\n    }\n\n    function updatePortalComponent(current, workInProgress, renderLanes) {\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      var nextChildren = workInProgress.pendingProps;\n\n      if (current === null) {\n        // Portals are special because we don't append the children during mount\n        // but at commit. Therefore we need to track insertions which the normal\n        // flow doesn't do during mount. This doesn't happen at the root because\n        // the root always starts with a \"current\" with a null child.\n        // TODO: Consider unifying this with how the root works.\n        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n\n      return workInProgress.child;\n    }\n\n    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\n    function updateContextProvider(current, workInProgress, renderLanes) {\n      var providerType = workInProgress.type;\n      var context = providerType._context;\n      var newProps = workInProgress.pendingProps;\n      var oldProps = workInProgress.memoizedProps;\n      var newValue = newProps.value;\n      {\n        if (!('value' in newProps)) {\n          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n            hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n            error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n          }\n        }\n\n        var providerPropTypes = workInProgress.type.propTypes;\n\n        if (providerPropTypes) {\n          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n        }\n      }\n      pushProvider(workInProgress, context, newValue);\n      {\n        if (oldProps !== null) {\n          var oldValue = oldProps.value;\n\n          if (objectIs(oldValue, newValue)) {\n            // No change. Bailout early if children are the same.\n            if (oldProps.children === newProps.children && !hasContextChanged()) {\n              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n          } else {\n            // The context value changed. Search for matching consumers and schedule\n            // them to update.\n            propagateContextChange(workInProgress, context, renderLanes);\n          }\n        }\n      }\n      var newChildren = newProps.children;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    var hasWarnedAboutUsingContextAsConsumer = false;\n\n    function updateContextConsumer(current, workInProgress, renderLanes) {\n      var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n      // DEV mode, we create a separate object for Context.Consumer that acts\n      // like a proxy to Context. This proxy object adds unnecessary code in PROD\n      // so we use the old behaviour (Context.Consumer references Context) to\n      // reduce size and overhead. The separate object references context via\n      // a property called \"_context\", which also gives us the ability to check\n      // in DEV mode if this property exists or not and warn if it does not.\n\n      {\n        if (context._context === undefined) {\n          // This may be because it's a Context (rather than a Consumer).\n          // Or it may be because it's older React where they're the same thing.\n          // We only want to warn if we're sure it's a new React.\n          if (context !== context.Consumer) {\n            if (!hasWarnedAboutUsingContextAsConsumer) {\n              hasWarnedAboutUsingContextAsConsumer = true;\n              error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n            }\n          }\n        } else {\n          context = context._context;\n        }\n      }\n      var newProps = workInProgress.pendingProps;\n      var render = newProps.children;\n      {\n        if (typeof render !== 'function') {\n          error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n        }\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var newValue = readContext(context);\n      {\n        markComponentRenderStarted(workInProgress);\n      }\n      var newChildren;\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        newChildren = render(newValue);\n        setIsRendering(false);\n      }\n      {\n        markComponentRenderStopped();\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function markWorkInProgressReceivedUpdate() {\n      didReceiveUpdate = true;\n    }\n\n    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n      if (current !== null) {\n        // Reuse previous dependencies\n        workInProgress.dependencies = current.dependencies;\n      }\n\n      {\n        // Don't update \"base\" render times for bailouts.\n        stopProfilerTimerIfRunning();\n      }\n      markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        // The children don't have any work either. We can skip them.\n        // TODO: Once we add back resuming, we should check if the children are\n        // a work-in-progress set. If so, we need to transfer their effects.\n        {\n          return null;\n        }\n      } // This fiber doesn't have work, but its subtree does. Clone the child\n      // fibers and continue.\n\n\n      cloneChildFibers(current, workInProgress);\n      return workInProgress.child;\n    }\n\n    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n      {\n        var returnFiber = oldWorkInProgress.return;\n\n        if (returnFiber === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Cannot swap the root fiber.');\n        } // Disconnect from the old current.\n        // It will get deleted.\n\n\n        current.alternate = null;\n        oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n        newWorkInProgress.index = oldWorkInProgress.index;\n        newWorkInProgress.sibling = oldWorkInProgress.sibling;\n        newWorkInProgress.return = oldWorkInProgress.return;\n        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n        if (oldWorkInProgress === returnFiber.child) {\n          returnFiber.child = newWorkInProgress;\n        } else {\n          var prevSibling = returnFiber.child;\n\n          if (prevSibling === null) {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            throw new Error('Expected parent to have a child.');\n          }\n\n          while (prevSibling.sibling !== oldWorkInProgress) {\n            prevSibling = prevSibling.sibling;\n\n            if (prevSibling === null) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              throw new Error('Expected to find the previous sibling.');\n            }\n          }\n\n          prevSibling.sibling = newWorkInProgress;\n        } // Delete the old fiber and place the new one.\n        // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n        var deletions = returnFiber.deletions;\n\n        if (deletions === null) {\n          returnFiber.deletions = [current];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(current);\n        }\n\n        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n        return newWorkInProgress;\n      }\n    }\n\n    function checkScheduledUpdateOrContext(current, renderLanes) {\n      // Before performing an early bailout, we must check if there are pending\n      // updates or context.\n      var updateLanes = current.lanes;\n\n      if (includesSomeLane(updateLanes, renderLanes)) {\n        return true;\n      } // No pending update, but because context is propagated lazily, we need\n\n\n      return false;\n    }\n\n    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          var root = workInProgress.stateNode;\n          resetHydrationState();\n          break;\n\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n\n            if (isContextProvider(Component)) {\n              pushContextProvider(workInProgress);\n            }\n\n            break;\n          }\n\n        case HostPortal:\n          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n          break;\n\n        case ContextProvider:\n          {\n            var newValue = workInProgress.memoizedProps.value;\n            var context = workInProgress.type._context;\n            pushProvider(workInProgress, context, newValue);\n            break;\n          }\n\n        case Profiler:\n          {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n\n            {\n              // Reset effect durations for the next eventual effect phase.\n              // These are reset during render to allow the DevTools commit hook a chance to read them,\n              var stateNode = workInProgress.stateNode;\n              stateNode.effectDuration = 0;\n              stateNode.passiveEffectDuration = 0;\n            }\n          }\n          break;\n\n        case SuspenseComponent:\n          {\n            var state = workInProgress.memoizedState;\n\n            if (state !== null) {\n              {\n                if (state.dehydrated !== null) {\n                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n                  // been unsuspended it has committed as a resolved Suspense component.\n                  // If it needs to be retried, it should have work scheduled on it.\n\n                  workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n                  // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n                  return null;\n                }\n              } // If this boundary is currently timed out, we need to decide\n              // whether to retry the primary children, or to skip over it and\n              // go straight to the fallback. Check the priority of the primary\n              // child fragment.\n\n              var primaryChildFragment = workInProgress.child;\n              var primaryChildLanes = primaryChildFragment.childLanes;\n\n              if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                // The primary children have pending work. Use the normal path\n                // to attempt to render the primary children again.\n                return updateSuspenseComponent(current, workInProgress, renderLanes);\n              } else {\n                // The primary child fragment does not have pending work marked\n                // on it\n                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n                // priority. Bailout.\n\n                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n                if (child !== null) {\n                  // The fallback children have pending work. Skip over the\n                  // primary children and work on the fallback.\n                  return child.sibling;\n                } else {\n                  // Note: We can return `null` here because we already checked\n                  // whether there were nested context consumers, via the call to\n                  // `bailoutOnAlreadyFinishedWork` above.\n                  return null;\n                }\n              }\n            } else {\n              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n            }\n\n            break;\n          }\n\n        case SuspenseListComponent:\n          {\n            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n            if (didSuspendBefore) {\n              if (_hasChildWork) {\n                // If something was in fallback state last time, and we have all the\n                // same children then we're still in progressive loading state.\n                // Something might get unblocked by state updates or retries in the\n                // tree which will affect the tail. So we need to use the normal\n                // path to compute the correct tail.\n                return updateSuspenseListComponent(current, workInProgress, renderLanes);\n              } // If none of the children had any work, that means that none of\n              // them got retried so they'll still be blocked in the same way\n              // as before. We can fast bail out.\n\n\n              workInProgress.flags |= DidCapture;\n            } // If nothing suspended before and we're rendering the same children,\n            // then the tail doesn't matter. Anything new that suspends will work\n            // in the \"together\" mode, so we can continue from the state we had.\n\n\n            var renderState = workInProgress.memoizedState;\n\n            if (renderState !== null) {\n              // Reset to the \"together\" mode in case we've started a different\n              // update in the past but didn't complete it.\n              renderState.rendering = null;\n              renderState.tail = null;\n              renderState.lastEffect = null;\n            }\n\n            pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n            if (_hasChildWork) {\n              break;\n            } else {\n              // If none of the children had any work, that means that none of\n              // them got retried so they'll still be blocked in the same way\n              // as before. We can fast bail out.\n              return null;\n            }\n          }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            // Need to check if the tree still needs to be deferred. This is\n            // almost identical to the logic used in the normal update path,\n            // so we'll just enter that. The only difference is we'll bail out\n            // at the next level instead of this one, because the child props\n            // have not changed. Which is fine.\n            // TODO: Probably should refactor `beginWork` to split the bailout\n            // path from the normal path. I'm tempted to do a labeled break here\n            // but I won't :)\n            workInProgress.lanes = NoLanes;\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    function beginWork(current, workInProgress, renderLanes) {\n      {\n        if (workInProgress._debugNeedsRemount && current !== null) {\n          // This will restart the begin phase with a new fiber.\n          return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n        }\n      }\n\n      if (current !== null) {\n        var oldProps = current.memoizedProps;\n        var newProps = workInProgress.pendingProps;\n\n        if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:\n        workInProgress.type !== current.type) {\n          // If props or context changed, mark the fiber as having performed work.\n          // This may be unset if the props are determined to be equal later (memo).\n          didReceiveUpdate = true;\n        } else {\n          // Neither props nor legacy context changes. Check if there's a pending\n          // update or context change.\n          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n          if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n          // may not be work scheduled on `current`, so we check for this flag.\n          (workInProgress.flags & DidCapture) === NoFlags) {\n            // No pending updates or context. Bail out now.\n            didReceiveUpdate = false;\n            return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n          }\n\n          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          } else {\n            // An update was scheduled on this fiber, but there are no new props\n            // nor legacy context. Set this to false. If an update queue or context\n            // consumer produces a changed value, it will set this to true. Otherwise,\n            // the component will assume the children have not changed and bail out.\n            didReceiveUpdate = false;\n          }\n        }\n      } else {\n        didReceiveUpdate = false;\n\n        if (getIsHydrating() && isForkedChild(workInProgress)) {\n          // Check if this child belongs to a list of muliple children in\n          // its parent.\n          //\n          // In a true multi-threaded implementation, we would render children on\n          // parallel threads. This would represent the beginning of a new render\n          // thread for this subtree.\n          //\n          // We only use this for id generation during hydration, which is why the\n          // logic is located in this special branch.\n          var slotIndex = workInProgress.index;\n          var numberOfForks = getForksAtLevel();\n          pushTreeId(workInProgress, numberOfForks, slotIndex);\n        }\n      } // Before entering the begin phase, clear pending update priority.\n      // TODO: This assumes that we're about to evaluate the component and process\n      // the update queue. However, there's an exception: SimpleMemoComponent\n      // sometimes bails out later in the begin phase. This indicates that we should\n      // move this assignment out of the common path and into each branch.\n\n\n      workInProgress.lanes = NoLanes;\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n          {\n            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n          }\n\n        case LazyComponent:\n          {\n            var elementType = workInProgress.elementType;\n            return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n          }\n\n        case FunctionComponent:\n          {\n            var Component = workInProgress.type;\n            var unresolvedProps = workInProgress.pendingProps;\n            var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n            return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n          }\n\n        case ClassComponent:\n          {\n            var _Component = workInProgress.type;\n            var _unresolvedProps = workInProgress.pendingProps;\n\n            var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n            return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n          }\n\n        case HostRoot:\n          return updateHostRoot(current, workInProgress, renderLanes);\n\n        case HostComponent:\n          return updateHostComponent$1(current, workInProgress, renderLanes);\n\n        case HostText:\n          return updateHostText$1(current, workInProgress);\n\n        case SuspenseComponent:\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n        case HostPortal:\n          return updatePortalComponent(current, workInProgress, renderLanes);\n\n        case ForwardRef:\n          {\n            var type = workInProgress.type;\n            var _unresolvedProps2 = workInProgress.pendingProps;\n\n            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n          }\n\n        case Fragment:\n          return updateFragment(current, workInProgress, renderLanes);\n\n        case Mode:\n          return updateMode(current, workInProgress, renderLanes);\n\n        case Profiler:\n          return updateProfiler(current, workInProgress, renderLanes);\n\n        case ContextProvider:\n          return updateContextProvider(current, workInProgress, renderLanes);\n\n        case ContextConsumer:\n          return updateContextConsumer(current, workInProgress, renderLanes);\n\n        case MemoComponent:\n          {\n            var _type2 = workInProgress.type;\n            var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n            {\n              if (workInProgress.type !== workInProgress.elementType) {\n                var outerPropTypes = _type2.propTypes;\n\n                if (outerPropTypes) {\n                  checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n                  'prop', getComponentNameFromType(_type2));\n                }\n              }\n            }\n            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n            return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n          }\n\n        case SimpleMemoComponent:\n          {\n            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n          }\n\n        case IncompleteClassComponent:\n          {\n            var _Component2 = workInProgress.type;\n            var _unresolvedProps4 = workInProgress.pendingProps;\n\n            var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n            return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n          }\n\n        case SuspenseListComponent:\n          {\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          }\n\n        case ScopeComponent:\n          {\n            break;\n          }\n\n        case OffscreenComponent:\n          {\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n    }\n\n    function unwindWork(current, workInProgress, renderLanes) {\n      // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n      popTreeContext(workInProgress);\n\n      switch (workInProgress.tag) {\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n\n            if (isContextProvider(Component)) {\n              popContext(workInProgress);\n            }\n\n            var flags = workInProgress.flags;\n\n            if (flags & ShouldCapture) {\n              workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n\n              return workInProgress;\n            }\n\n            return null;\n          }\n\n        case HostRoot:\n          {\n            popHostContainer(workInProgress);\n            popTopLevelContextObject(workInProgress);\n            resetWorkInProgressVersions();\n            var _flags = workInProgress.flags;\n\n            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n              // There was an error during render that wasn't captured by a suspense\n              // boundary. Do a second pass on the root to unmount the children.\n              workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n              return workInProgress;\n            } // We unwound to the root without completing it. Exit.\n\n\n            return null;\n          }\n\n        case HostComponent:\n          {\n            // TODO: popHydrationState\n            popHostContext(workInProgress);\n            return null;\n          }\n\n        case SuspenseComponent:\n          {\n            popSuspenseContext(workInProgress);\n            {\n              var suspenseState = workInProgress.memoizedState;\n\n              if (suspenseState !== null && suspenseState.dehydrated !== null) {\n                if (workInProgress.alternate === null) {\n                  throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n                }\n\n                resetHydrationState();\n              }\n            }\n            var _flags2 = workInProgress.flags;\n\n            if (_flags2 & ShouldCapture) {\n              workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n\n              return workInProgress;\n            }\n\n            return null;\n          }\n\n        case SuspenseListComponent:\n          {\n            popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n            // caught by a nested boundary. If not, it should bubble through.\n\n            return null;\n          }\n\n        case HostPortal:\n          popHostContainer(workInProgress);\n          return null;\n\n        case ContextProvider:\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          return null;\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popRenderLanes(workInProgress);\n          return null;\n\n        case CacheComponent:\n          return null;\n\n        default:\n          return null;\n      }\n    }\n\n    function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n      // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n      popTreeContext(interruptedWork);\n\n      switch (interruptedWork.tag) {\n        case ClassComponent:\n          {\n            var childContextTypes = interruptedWork.type.childContextTypes;\n\n            if (childContextTypes !== null && childContextTypes !== undefined) {\n              popContext(interruptedWork);\n            }\n\n            break;\n          }\n\n        case HostRoot:\n          {\n            popHostContainer(interruptedWork);\n            popTopLevelContextObject(interruptedWork);\n            resetWorkInProgressVersions();\n            break;\n          }\n\n        case HostComponent:\n          {\n            popHostContext(interruptedWork);\n            break;\n          }\n\n        case HostPortal:\n          popHostContainer(interruptedWork);\n          break;\n\n        case SuspenseComponent:\n          popSuspenseContext(interruptedWork);\n          break;\n\n        case SuspenseListComponent:\n          popSuspenseContext(interruptedWork);\n          break;\n\n        case ContextProvider:\n          var context = interruptedWork.type._context;\n          popProvider(context, interruptedWork);\n          break;\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popRenderLanes(interruptedWork);\n          break;\n      }\n    }\n\n    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n      try {\n        func.apply(context, funcArgs);\n      } catch (error) {\n        this.onError(error);\n      }\n    }\n\n    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n    {\n      // In DEV mode, we swap out invokeGuardedCallback for a special version\n      // that plays more nicely with the browser's DevTools. The idea is to preserve\n      // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n      // functions in invokeGuardedCallback, and the production version of\n      // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n      // like caught exceptions, and the DevTools won't pause unless the developer\n      // takes the extra step of enabling pause on caught exceptions. This is\n      // unintuitive, though, because even though React has caught the error, from\n      // the developer's perspective, the error is uncaught.\n      //\n      // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n      // DOM node, and call the user-provided callback from inside an event handler\n      // for that fake event. If the callback throws, the error is \"captured\" using\n      // a global event handler. But because the error happens in a different\n      // event loop context, it does not interrupt the normal program flow.\n      // Effectively, this gives us try-catch behavior without actually using\n      // try-catch. Neat!\n      // Check that the browser supports the APIs we need to implement our special\n      // DEV version of invokeGuardedCallback\n      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n        var fakeNode = document.createElement('react');\n\n        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n          // If document doesn't exist we know for sure we will crash in this method\n          // when we call document.createEvent(). However this can cause confusing\n          // errors: https://github.com/facebook/create-react-app/issues/3482\n          // So we preemptively throw with a better message instead.\n          if (typeof document === 'undefined' || document === null) {\n            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n          }\n\n          var evt = document.createEvent('Event');\n          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n          // set this to true at the beginning, then set it to false right after\n          // calling the function. If the function errors, `didError` will never be\n          // set to false. This strategy works even if the browser is flaky and\n          // fails to call our global error handler, because it doesn't rely on\n          // the error event at all.\n\n          var didError = true; // Keeps track of the value of window.event so that we can reset it\n          // during the callback to let user code access window.event in the\n          // browsers that support it.\n\n          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n          // dispatching: https://github.com/facebook/react/issues/13688\n\n          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n          function restoreAfterDispatch() {\n            // We immediately remove the callback from event listeners so that\n            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n            // nested call would trigger the fake event handlers of any call higher\n            // in the stack.\n            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n            // window.event assignment in both IE <= 10 as they throw an error\n            // \"Member not found\" in strict mode, and in Firefox which does not\n            // support window.event.\n\n            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n              window.event = windowEvent;\n            }\n          } // Create an event handler for our fake event. We will synchronously\n          // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n          // call the user-provided callback.\n\n\n          var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n          function callCallback() {\n            didCall = true;\n            restoreAfterDispatch();\n            func.apply(context, funcArgs);\n            didError = false;\n          } // Create a global error event handler. We use this to capture the value\n          // that was thrown. It's possible that this error handler will fire more\n          // than once; for example, if non-React code also calls `dispatchEvent`\n          // and a handler for that event throws. We should be resilient to most of\n          // those cases. Even if our error event handler fires more than once, the\n          // last error event is always used. If the callback actually does error,\n          // we know that the last error event is the correct one, because it's not\n          // possible for anything else to have happened in between our callback\n          // erroring and the code that follows the `dispatchEvent` call below. If\n          // the callback doesn't error, but the error event was fired, we know to\n          // ignore it because `didError` will be false, as described above.\n\n\n          var error; // Use this to track whether the error event is ever called.\n\n          var didSetError = false;\n          var isCrossOriginError = false;\n\n          function handleWindowError(event) {\n            error = event.error;\n            didSetError = true;\n\n            if (error === null && event.colno === 0 && event.lineno === 0) {\n              isCrossOriginError = true;\n            }\n\n            if (event.defaultPrevented) {\n              // Some other error handler has prevented default.\n              // Browsers silence the error report if this happens.\n              // We'll remember this to later decide whether to log it or not.\n              if (error != null && typeof error === 'object') {\n                try {\n                  error._suppressLogging = true;\n                } catch (inner) {// Ignore.\n                }\n              }\n            }\n          } // Create a fake event type.\n\n\n          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n          window.addEventListener('error', handleWindowError);\n          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n          // errors, it will trigger our global error handler.\n\n          evt.initEvent(evtType, false, false);\n          fakeNode.dispatchEvent(evt);\n\n          if (windowEventDescriptor) {\n            Object.defineProperty(window, 'event', windowEventDescriptor);\n          }\n\n          if (didCall && didError) {\n            if (!didSetError) {\n              // The callback errored, but the error event never fired.\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n            } else if (isCrossOriginError) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n            }\n\n            this.onError(error);\n          } // Remove our event listeners\n\n\n          window.removeEventListener('error', handleWindowError);\n\n          if (!didCall) {\n            // Something went really wrong, and our event was not dispatched.\n            // https://github.com/facebook/react/issues/16734\n            // https://github.com/facebook/react/issues/16585\n            // Fall back to the production implementation.\n            restoreAfterDispatch();\n            return invokeGuardedCallbackProd.apply(this, arguments);\n          }\n        };\n      }\n    }\n    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n    var hasError = false;\n    var caughtError = null; // Used by event system to capture/rethrow the first error.\n\n    var reporter = {\n      onError: function (error) {\n        hasError = true;\n        caughtError = error;\n      }\n    };\n    /**\n     * Call a function while guarding against errors that happens within it.\n     * Returns an error if it throws, otherwise null.\n     *\n     * In production, this is implemented using a try-catch. The reason we don't\n     * use a try-catch directly is so that we can swap out a different\n     * implementation in DEV mode.\n     *\n     * @param {String} name of the guard to use for logging or debugging\n     * @param {Function} func The function to invoke\n     * @param {*} context The context to use when calling the function\n     * @param {...*} args Arguments for function\n     */\n\n    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n      hasError = false;\n      caughtError = null;\n      invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n    }\n\n    function hasCaughtError() {\n      return hasError;\n    }\n\n    function clearCaughtError() {\n      if (hasError) {\n        var error = caughtError;\n        hasError = false;\n        caughtError = null;\n        return error;\n      } else {\n        throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n      }\n    }\n\n    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n    {\n      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n    } // Used during the commit phase to track the state of the Offscreen component stack.\n    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n    // Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n    var offscreenSubtreeIsHidden = false;\n    var offscreenSubtreeWasHidden = false;\n    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n    var nextEffect = null; // Used for Profiling builds to track updaters.\n\n    var inProgressLanes = null;\n    var inProgressRoot = null;\n\n    function reportUncaughtErrorInDEV(error) {\n      // Wrapping each small part of the commit phase into a guarded\n      // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n      // But we rely on it to surface errors to DEV tools like overlays\n      // (https://github.com/facebook/react/issues/21712).\n      // As a compromise, rethrow only caught errors in a guard.\n      {\n        invokeGuardedCallback(null, function () {\n          throw error;\n        });\n        clearCaughtError();\n      }\n    }\n\n    var callComponentWillUnmountWithTimer = function (current, instance) {\n      instance.props = current.memoizedProps;\n      instance.state = current.memoizedState;\n\n      if (current.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          instance.componentWillUnmount();\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        instance.componentWillUnmount();\n      }\n    }; // Capture errors so they don't interrupt mounting.\n\n\n    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n      try {\n        commitHookEffectListMount(Layout, current);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt unmounting.\n\n\n    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n      try {\n        callComponentWillUnmountWithTimer(current, instance);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt mounting.\n\n\n    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n      try {\n        instance.componentDidMount();\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt mounting.\n\n\n    function safelyAttachRef(current, nearestMountedAncestor) {\n      try {\n        commitAttachRef(current);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n\n    function safelyDetachRef(current, nearestMountedAncestor) {\n      var ref = current.ref;\n\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          var retVal;\n\n          try {\n            if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                retVal = ref(null);\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              retVal = ref(null);\n            }\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n\n          {\n            if (typeof retVal === 'function') {\n              error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n            }\n          }\n        } else {\n          ref.current = null;\n        }\n      }\n    }\n\n    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n      try {\n        destroy();\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n\n    var focusedInstanceHandle = null;\n    var shouldFireAfterActiveInstanceBlur = false;\n\n    function commitBeforeMutationEffects(root, firstChild) {\n      focusedInstanceHandle = prepareForCommit(root.containerInfo);\n      nextEffect = firstChild;\n      commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n      var shouldFire = shouldFireAfterActiveInstanceBlur;\n      shouldFireAfterActiveInstanceBlur = false;\n      focusedInstanceHandle = null;\n      return shouldFire;\n    }\n\n    function commitBeforeMutationEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n        var child = fiber.child;\n\n        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n          ensureCorrectReturnPointer(child, fiber);\n          nextEffect = child;\n        } else {\n          commitBeforeMutationEffects_complete();\n        }\n      }\n    }\n\n    function commitBeforeMutationEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n\n        try {\n          commitBeforeMutationEffectsOnFiber(fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitBeforeMutationEffectsOnFiber(finishedWork) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n\n      if ((flags & Snapshot) !== NoFlags) {\n        setCurrentFiber(finishedWork);\n\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              break;\n            }\n\n          case ClassComponent:\n            {\n              if (current !== null) {\n                var prevProps = current.memoizedProps;\n                var prevState = current.memoizedState;\n                var instance = finishedWork.stateNode; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n                {\n                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                    didWarnSet.add(finishedWork.type);\n                    error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n                  }\n                }\n                instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n              }\n\n              break;\n            }\n\n          case HostRoot:\n            {\n              if (supportsMutation) {\n                var root = finishedWork.stateNode;\n                clearContainer(root.containerInfo);\n              }\n\n              break;\n            }\n\n          case HostComponent:\n          case HostText:\n          case HostPortal:\n          case IncompleteClassComponent:\n            // Nothing to do for these component types\n            break;\n\n          default:\n            {\n              throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n            }\n        }\n\n        resetCurrentFiber();\n      }\n    }\n\n    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n\n        do {\n          if ((effect.tag & flags) === flags) {\n            // Unmount\n            var destroy = effect.destroy;\n            effect.destroy = undefined;\n\n            if (destroy !== undefined) {\n              {\n                if ((flags & Passive$1) !== NoFlags$1) {\n                  markComponentPassiveEffectUnmountStarted(finishedWork);\n                } else if ((flags & Layout) !== NoFlags$1) {\n                  markComponentLayoutEffectUnmountStarted(finishedWork);\n                }\n              }\n              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n              {\n                if ((flags & Passive$1) !== NoFlags$1) {\n                  markComponentPassiveEffectUnmountStopped();\n                } else if ((flags & Layout) !== NoFlags$1) {\n                  markComponentLayoutEffectUnmountStopped();\n                }\n              }\n            }\n          }\n\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n\n    function commitHookEffectListMount(flags, finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n\n        do {\n          if ((effect.tag & flags) === flags) {\n            {\n              if ((flags & Passive$1) !== NoFlags$1) {\n                markComponentPassiveEffectMountStarted(finishedWork);\n              } else if ((flags & Layout) !== NoFlags$1) {\n                markComponentLayoutEffectMountStarted(finishedWork);\n              }\n            } // Mount\n\n            var create = effect.create;\n            effect.destroy = create();\n            {\n              if ((flags & Passive$1) !== NoFlags$1) {\n                markComponentPassiveEffectMountStopped();\n              } else if ((flags & Layout) !== NoFlags$1) {\n                markComponentLayoutEffectMountStopped();\n              }\n            }\n            {\n              var destroy = effect.destroy;\n\n              if (destroy !== undefined && typeof destroy !== 'function') {\n                var hookName = void 0;\n\n                if ((effect.tag & Layout) !== NoFlags) {\n                  hookName = 'useLayoutEffect';\n                } else if ((effect.tag & Insertion) !== NoFlags) {\n                  hookName = 'useInsertionEffect';\n                } else {\n                  hookName = 'useEffect';\n                }\n\n                var addendum = void 0;\n\n                if (destroy === null) {\n                  addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n                } else if (typeof destroy.then === 'function') {\n                  addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n                } else {\n                  addendum = ' You returned: ' + destroy;\n                }\n\n                error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n              }\n            }\n          }\n\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n\n    function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n      {\n        // Only Profilers with work in their subtree will have an Update effect scheduled.\n        if ((finishedWork.flags & Update) !== NoFlags) {\n          switch (finishedWork.tag) {\n            case Profiler:\n              {\n                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n                var _finishedWork$memoize = finishedWork.memoizedProps,\n                    id = _finishedWork$memoize.id,\n                    onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n                // It does not get reset until the start of the next commit phase.\n\n                var commitTime = getCommitTime();\n                var phase = finishedWork.alternate === null ? 'mount' : 'update';\n                {\n                  if (isCurrentUpdateNested()) {\n                    phase = 'nested-update';\n                  }\n                }\n\n                if (typeof onPostCommit === 'function') {\n                  onPostCommit(id, phase, passiveEffectDuration, commitTime);\n                } // Bubble times to the next nearest ancestor Profiler.\n                // After we process that Profiler, we'll bubble further up.\n\n\n                var parentFiber = finishedWork.return;\n\n                outer: while (parentFiber !== null) {\n                  switch (parentFiber.tag) {\n                    case HostRoot:\n                      var root = parentFiber.stateNode;\n                      root.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n\n                    case Profiler:\n                      var parentStateNode = parentFiber.stateNode;\n                      parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n                  }\n\n                  parentFiber = parentFiber.return;\n                }\n\n                break;\n              }\n          }\n        }\n      }\n    }\n\n    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n      if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              if (!offscreenSubtreeWasHidden) {\n                // At this point layout effects have already been destroyed (during mutation phase).\n                // This is done to prevent sibling component effects from interfering with each other,\n                // e.g. a destroy function in one component should never override a ref set\n                // by a create function in another component during the same commit.\n                if (finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                }\n              }\n\n              break;\n            }\n\n          case ClassComponent:\n            {\n              var instance = finishedWork.stateNode;\n\n              if (finishedWork.flags & Update) {\n                if (!offscreenSubtreeWasHidden) {\n                  if (current === null) {\n                    // We could update instance props and state here,\n                    // but instead we rely on them being set during last render.\n                    // TODO: revisit this when we implement resuming.\n                    {\n                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                          error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n\n                        if (instance.state !== finishedWork.memoizedState) {\n                          error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                      }\n                    }\n\n                    if (finishedWork.mode & ProfileMode) {\n                      try {\n                        startLayoutEffectTimer();\n                        instance.componentDidMount();\n                      } finally {\n                        recordLayoutEffectDuration(finishedWork);\n                      }\n                    } else {\n                      instance.componentDidMount();\n                    }\n                  } else {\n                    var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                    var prevState = current.memoizedState; // We could update instance props and state here,\n                    // but instead we rely on them being set during last render.\n                    // TODO: revisit this when we implement resuming.\n\n                    {\n                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                          error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n\n                        if (instance.state !== finishedWork.memoizedState) {\n                          error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                      }\n                    }\n\n                    if (finishedWork.mode & ProfileMode) {\n                      try {\n                        startLayoutEffectTimer();\n                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                      } finally {\n                        recordLayoutEffectDuration(finishedWork);\n                      }\n                    } else {\n                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                    }\n                  }\n                }\n              } // TODO: I think this is now always non-null by the time it reaches the\n              // commit phase. Consider removing the type check.\n\n\n              var updateQueue = finishedWork.updateQueue;\n\n              if (updateQueue !== null) {\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                } // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                commitUpdateQueue(finishedWork, updateQueue, instance);\n              }\n\n              break;\n            }\n\n          case HostRoot:\n            {\n              // TODO: I think this is now always non-null by the time it reaches the\n              // commit phase. Consider removing the type check.\n              var _updateQueue = finishedWork.updateQueue;\n\n              if (_updateQueue !== null) {\n                var _instance = null;\n\n                if (finishedWork.child !== null) {\n                  switch (finishedWork.child.tag) {\n                    case HostComponent:\n                      _instance = getPublicInstance(finishedWork.child.stateNode);\n                      break;\n\n                    case ClassComponent:\n                      _instance = finishedWork.child.stateNode;\n                      break;\n                  }\n                }\n\n                commitUpdateQueue(finishedWork, _updateQueue, _instance);\n              }\n\n              break;\n            }\n\n          case HostComponent:\n            {\n              var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n              // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n              // These effects should only be committed when components are first mounted,\n              // aka when there is no current/alternate.\n\n              if (current === null && finishedWork.flags & Update) {\n                var type = finishedWork.type;\n                var props = finishedWork.memoizedProps;\n                commitMount(_instance2, type, props, finishedWork);\n              }\n\n              break;\n            }\n\n          case HostText:\n            {\n              // We have no life-cycles associated with text.\n              break;\n            }\n\n          case HostPortal:\n            {\n              // We have no life-cycles associated with portals.\n              break;\n            }\n\n          case Profiler:\n            {\n              {\n                var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                    onCommit = _finishedWork$memoize2.onCommit,\n                    onRender = _finishedWork$memoize2.onRender;\n                var effectDuration = finishedWork.stateNode.effectDuration;\n                var commitTime = getCommitTime();\n                var phase = current === null ? 'mount' : 'update';\n                {\n                  if (isCurrentUpdateNested()) {\n                    phase = 'nested-update';\n                  }\n                }\n\n                if (typeof onRender === 'function') {\n                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n                }\n\n                {\n                  if (typeof onCommit === 'function') {\n                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n                  } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n                  // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n                  // because the effect is also where times bubble to parent Profilers.\n\n\n                  enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n                  // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n                  var parentFiber = finishedWork.return;\n\n                  outer: while (parentFiber !== null) {\n                    switch (parentFiber.tag) {\n                      case HostRoot:\n                        var root = parentFiber.stateNode;\n                        root.effectDuration += effectDuration;\n                        break outer;\n\n                      case Profiler:\n                        var parentStateNode = parentFiber.stateNode;\n                        parentStateNode.effectDuration += effectDuration;\n                        break outer;\n                    }\n\n                    parentFiber = parentFiber.return;\n                  }\n                }\n              }\n              break;\n            }\n\n          case SuspenseComponent:\n            {\n              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n              break;\n            }\n\n          case SuspenseListComponent:\n          case IncompleteClassComponent:\n          case ScopeComponent:\n          case OffscreenComponent:\n          case LegacyHiddenComponent:\n            {\n              break;\n            }\n\n          default:\n            throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n      }\n\n      if (!offscreenSubtreeWasHidden) {\n        {\n          if (finishedWork.flags & Ref) {\n            commitAttachRef(finishedWork);\n          }\n        }\n      }\n    }\n\n    function reappearLayoutEffectsOnFiber(node) {\n      // Turn on layout effects in a tree that previously disappeared.\n      // TODO (Offscreen) Check: flags & LayoutStatic\n      switch (node.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (node.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                safelyCallCommitHookLayoutEffectListMount(node, node.return);\n              } finally {\n                recordLayoutEffectDuration(node);\n              }\n            } else {\n              safelyCallCommitHookLayoutEffectListMount(node, node.return);\n            }\n\n            break;\n          }\n\n        case ClassComponent:\n          {\n            var instance = node.stateNode;\n\n            if (typeof instance.componentDidMount === 'function') {\n              safelyCallComponentDidMount(node, node.return, instance);\n            }\n\n            safelyAttachRef(node, node.return);\n            break;\n          }\n\n        case HostComponent:\n          {\n            safelyAttachRef(node, node.return);\n            break;\n          }\n      }\n    }\n\n    function hideOrUnhideAllChildren(finishedWork, isHidden) {\n      // Only hide or unhide the top-most host nodes.\n      var hostSubtreeRoot = null;\n\n      if (supportsMutation) {\n        // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n        var node = finishedWork;\n\n        while (true) {\n          if (node.tag === HostComponent) {\n            if (hostSubtreeRoot === null) {\n              hostSubtreeRoot = node;\n              var instance = node.stateNode;\n\n              if (isHidden) {\n                hideInstance(instance);\n              } else {\n                unhideInstance(node.stateNode, node.memoizedProps);\n              }\n            }\n          } else if (node.tag === HostText) {\n            if (hostSubtreeRoot === null) {\n              var _instance3 = node.stateNode;\n\n              if (isHidden) {\n                hideTextInstance(_instance3);\n              } else {\n                unhideTextInstance(_instance3, node.memoizedProps);\n              }\n            }\n          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === finishedWork) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === finishedWork) {\n              return;\n            }\n\n            if (hostSubtreeRoot === node) {\n              hostSubtreeRoot = null;\n            }\n\n            node = node.return;\n          }\n\n          if (hostSubtreeRoot === node) {\n            hostSubtreeRoot = null;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    }\n\n    function commitAttachRef(finishedWork) {\n      var ref = finishedWork.ref;\n\n      if (ref !== null) {\n        var instance = finishedWork.stateNode;\n        var instanceToUse;\n\n        switch (finishedWork.tag) {\n          case HostComponent:\n            instanceToUse = getPublicInstance(instance);\n            break;\n\n          default:\n            instanceToUse = instance;\n        } // Moved outside to ensure DCE works with this flag\n\n\n        if (typeof ref === 'function') {\n          var retVal;\n\n          if (finishedWork.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              retVal = ref(instanceToUse);\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            retVal = ref(instanceToUse);\n          }\n\n          {\n            if (typeof retVal === 'function') {\n              error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n            }\n          }\n        } else {\n          {\n            if (!ref.hasOwnProperty('current')) {\n              error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n            }\n          }\n          ref.current = instanceToUse;\n        }\n      }\n    }\n\n    function commitDetachRef(current) {\n      var currentRef = current.ref;\n\n      if (currentRef !== null) {\n        if (typeof currentRef === 'function') {\n          if (current.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              currentRef(null);\n            } finally {\n              recordLayoutEffectDuration(current);\n            }\n          } else {\n            currentRef(null);\n          }\n        } else {\n          currentRef.current = null;\n        }\n      }\n    } // User-originating errors (lifecycles and refs) should not interrupt\n    // deletion, so don't let them throw. Host-originating errors should\n    // interrupt deletion, so it's okay\n\n\n    function commitUnmount(finishedRoot, current, nearestMountedAncestor) {\n      onCommitUnmount(current);\n\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            var updateQueue = current.updateQueue;\n\n            if (updateQueue !== null) {\n              var lastEffect = updateQueue.lastEffect;\n\n              if (lastEffect !== null) {\n                var firstEffect = lastEffect.next;\n                var effect = firstEffect;\n\n                do {\n                  var _effect = effect,\n                      destroy = _effect.destroy,\n                      tag = _effect.tag;\n\n                  if (destroy !== undefined) {\n                    if ((tag & Insertion) !== NoFlags$1) {\n                      safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                    } else if ((tag & Layout) !== NoFlags$1) {\n                      {\n                        markComponentLayoutEffectUnmountStarted(current);\n                      }\n\n                      if (current.mode & ProfileMode) {\n                        startLayoutEffectTimer();\n                        safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                        recordLayoutEffectDuration(current);\n                      } else {\n                        safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                      }\n\n                      {\n                        markComponentLayoutEffectUnmountStopped();\n                      }\n                    }\n                  }\n\n                  effect = effect.next;\n                } while (effect !== firstEffect);\n              }\n            }\n\n            return;\n          }\n\n        case ClassComponent:\n          {\n            safelyDetachRef(current, nearestMountedAncestor);\n            var instance = current.stateNode;\n\n            if (typeof instance.componentWillUnmount === 'function') {\n              safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance);\n            }\n\n            return;\n          }\n\n        case HostComponent:\n          {\n            safelyDetachRef(current, nearestMountedAncestor);\n            return;\n          }\n\n        case HostPortal:\n          {\n            // TODO: this is recursive.\n            // We are also not using this parent because\n            // the portal will get pushed immediately.\n            if (supportsMutation) {\n              unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n            } else if (supportsPersistence) {\n              emptyPortalContainer(current);\n            }\n\n            return;\n          }\n\n        case DehydratedFragment:\n          {\n            return;\n          }\n\n        case ScopeComponent:\n          {\n            return;\n          }\n      }\n    }\n\n    function commitNestedUnmounts(finishedRoot, root, nearestMountedAncestor) {\n      // While we're inside a removed host node we don't want to call\n      // removeChild on the inner nodes because they're removed by the top\n      // call anyway. We also want to call componentWillUnmount on all\n      // composites before this host node is removed from the tree. Therefore\n      // we do an inner loop while we're still inside the host node.\n      var node = root;\n\n      while (true) {\n        commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because they may contain more composite or host nodes.\n        // Skip portals because commitUnmount() currently visits them recursively.\n\n        if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.\n        // If we don't use mutation we drill down into portals here instead.\n        !supportsMutation || node.tag !== HostPortal)) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === root) {\n          return;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === root) {\n            return;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n\n    function detachFiberMutation(fiber) {\n      // Cut off the return pointer to disconnect it from the tree.\n      // This enables us to detect and warn against state updates on an unmounted component.\n      // It also prevents events from bubbling from within disconnected components.\n      //\n      // Ideally, we should also clear the child pointer of the parent alternate to let this\n      // get GC:ed but we don't know which for sure which parent is the current\n      // one so we'll settle for GC:ing the subtree of this child.\n      // This child itself will be GC:ed when the parent updates the next time.\n      //\n      // Note that we can't clear child or sibling pointers yet.\n      // They're needed for passive effects and for findDOMNode.\n      // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n      //\n      // Don't reset the alternate yet, either. We need that so we can detach the\n      // alternate's fields in the passive phase. Clearing the return pointer is\n      // sufficient for findDOMNode semantics.\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.return = null;\n      }\n\n      fiber.return = null;\n    }\n\n    function detachFiberAfterEffects(fiber) {\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        fiber.alternate = null;\n        detachFiberAfterEffects(alternate);\n      } // Note: Defensively using negation instead of < in case\n      // `deletedTreeCleanUpLevel` is undefined.\n\n\n      {\n        // Clear cyclical Fiber fields. This level alone is designed to roughly\n        // approximate the planned Fiber refactor. In that world, `setState` will be\n        // bound to a special \"instance\" object instead of a Fiber. The Instance\n        // object will not have any of these fields. It will only be connected to\n        // the fiber tree via a single link at the root. So if this level alone is\n        // sufficient to fix memory issues, that bodes well for our plans.\n        fiber.child = null;\n        fiber.deletions = null;\n        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n        // tree, which has its own pointers to children, parents, and siblings.\n        // The other host nodes also point back to fibers, so we should detach that\n        // one, too.\n\n        if (fiber.tag === HostComponent) {\n          var hostInstance = fiber.stateNode;\n\n          if (hostInstance !== null) {\n            detachDeletedInstance(hostInstance);\n          }\n        }\n\n        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n        // already disconnect the `return` pointer at the root of the deleted\n        // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n        // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n        // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n        {\n          fiber._debugOwner = null;\n        }\n        {\n          // Theoretically, nothing in here should be necessary, because we already\n          // disconnected the fiber from the tree. So even if something leaks this\n          // particular fiber, it won't leak anything else\n          //\n          // The purpose of this branch is to be super aggressive so we can measure\n          // if there's any difference in memory impact. If there is, that could\n          // indicate a React leak we don't know about.\n          fiber.return = null;\n          fiber.dependencies = null;\n          fiber.memoizedProps = null;\n          fiber.memoizedState = null;\n          fiber.pendingProps = null;\n          fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n          fiber.updateQueue = null;\n        }\n      }\n    }\n\n    function emptyPortalContainer(current) {\n      if (!supportsPersistence) {\n        return;\n      }\n\n      var portal = current.stateNode;\n      var containerInfo = portal.containerInfo;\n      var emptyChildSet = createContainerChildSet(containerInfo);\n      replaceContainerChildren(containerInfo, emptyChildSet);\n    }\n\n    function commitContainer(finishedWork) {\n      if (!supportsPersistence) {\n        return;\n      }\n\n      switch (finishedWork.tag) {\n        case ClassComponent:\n        case HostComponent:\n        case HostText:\n          {\n            return;\n          }\n\n        case HostRoot:\n        case HostPortal:\n          {\n            var portalOrRoot = finishedWork.stateNode;\n            var containerInfo = portalOrRoot.containerInfo,\n                pendingChildren = portalOrRoot.pendingChildren;\n            replaceContainerChildren(containerInfo, pendingChildren);\n            return;\n          }\n      }\n\n      throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n\n    function getHostParentFiber(fiber) {\n      var parent = fiber.return;\n\n      while (parent !== null) {\n        if (isHostParent(parent)) {\n          return parent;\n        }\n\n        parent = parent.return;\n      }\n\n      throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n    }\n\n    function isHostParent(fiber) {\n      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n    }\n\n    function getHostSibling(fiber) {\n      // We're going to search forward into the tree until we find a sibling host\n      // node. Unfortunately, if multiple insertions are done in a row we have to\n      // search past them. This leads to exponential search for the next sibling.\n      // TODO: Find a more efficient way to do this.\n      var node = fiber;\n\n      siblings: while (true) {\n        // If we didn't find anything, let's try the next sibling.\n        while (node.sibling === null) {\n          if (node.return === null || isHostParent(node.return)) {\n            // If we pop out of the root or hit the parent the fiber we are the\n            // last sibling.\n            return null;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n\n        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n          // If it is not host node and, we might have a host node inside it.\n          // Try to search down until we find one.\n          if (node.flags & Placement) {\n            // If we don't have a child, try the siblings instead.\n            continue siblings;\n          } // If we don't have a child, try the siblings instead.\n          // We also skip portals because they are not part of this host tree.\n\n\n          if (node.child === null || node.tag === HostPortal) {\n            continue siblings;\n          } else {\n            node.child.return = node;\n            node = node.child;\n          }\n        } // Check if this host node is stable or about to be placed.\n\n\n        if (!(node.flags & Placement)) {\n          // Found it!\n          return node.stateNode;\n        }\n      }\n    }\n\n    function commitPlacement(finishedWork) {\n      if (!supportsMutation) {\n        return;\n      } // Recursively insert all host nodes into the parent.\n\n\n      var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n      switch (parentFiber.tag) {\n        case HostComponent:\n          {\n            var parent = parentFiber.stateNode;\n\n            if (parentFiber.flags & ContentReset) {\n              // Reset the text content of the parent before doing any insertions\n              resetTextContent(parent); // Clear ContentReset from the effect tag\n\n              parentFiber.flags &= ~ContentReset;\n            }\n\n            var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n            // children to find all the terminal nodes.\n\n            insertOrAppendPlacementNode(finishedWork, before, parent);\n            break;\n          }\n\n        case HostRoot:\n        case HostPortal:\n          {\n            var _parent = parentFiber.stateNode.containerInfo;\n\n            var _before = getHostSibling(finishedWork);\n\n            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n            break;\n          }\n        // eslint-disable-next-line-no-fallthrough\n\n        default:\n          throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n      }\n    }\n\n    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n\n      if (isHost) {\n        var stateNode = node.stateNode;\n\n        if (before) {\n          insertInContainerBefore(parent, stateNode, before);\n        } else {\n          appendChildToContainer(parent, stateNode);\n        }\n      } else if (tag === HostPortal) ;else {\n        var child = node.child;\n\n        if (child !== null) {\n          insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n          var sibling = child.sibling;\n\n          while (sibling !== null) {\n            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    }\n\n    function insertOrAppendPlacementNode(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n\n      if (isHost) {\n        var stateNode = node.stateNode;\n\n        if (before) {\n          insertBefore(parent, stateNode, before);\n        } else {\n          appendChild(parent, stateNode);\n        }\n      } else if (tag === HostPortal) ;else {\n        var child = node.child;\n\n        if (child !== null) {\n          insertOrAppendPlacementNode(child, before, parent);\n          var sibling = child.sibling;\n\n          while (sibling !== null) {\n            insertOrAppendPlacementNode(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    }\n\n    function unmountHostComponents(finishedRoot, current, nearestMountedAncestor) {\n      // We only have the top Fiber that was deleted but we need to recurse down its\n      // children to find all the terminal nodes.\n      var node = current; // Each iteration, currentParent is populated with node's host parent if not\n      // currentParentIsValid.\n\n      var currentParentIsValid = false; // Note: these two variables *must* always be updated together.\n\n      var currentParent;\n      var currentParentIsContainer;\n\n      while (true) {\n        if (!currentParentIsValid) {\n          var parent = node.return;\n\n          findParent: while (true) {\n            if (parent === null) {\n              throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n            }\n\n            var parentStateNode = parent.stateNode;\n\n            switch (parent.tag) {\n              case HostComponent:\n                currentParent = parentStateNode;\n                currentParentIsContainer = false;\n                break findParent;\n\n              case HostRoot:\n                currentParent = parentStateNode.containerInfo;\n                currentParentIsContainer = true;\n                break findParent;\n\n              case HostPortal:\n                currentParent = parentStateNode.containerInfo;\n                currentParentIsContainer = true;\n                break findParent;\n            }\n\n            parent = parent.return;\n          }\n\n          currentParentIsValid = true;\n        }\n\n        if (node.tag === HostComponent || node.tag === HostText) {\n          commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor); // After all the children have unmounted, it is now safe to remove the\n          // node from the tree.\n\n          if (currentParentIsContainer) {\n            removeChildFromContainer(currentParent, node.stateNode);\n          } else {\n            removeChild(currentParent, node.stateNode);\n          } // Don't visit children because we already visited them.\n\n        } else if (node.tag === DehydratedFragment) {\n          if (currentParentIsContainer) {\n            clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);\n          } else {\n            clearSuspenseBoundary(currentParent, node.stateNode);\n          }\n        } else if (node.tag === HostPortal) {\n          if (node.child !== null) {\n            // When we go into a portal, it becomes the parent to remove from.\n            // We will reassign it back when we pop the portal on the way up.\n            currentParent = node.stateNode.containerInfo;\n            currentParentIsContainer = true; // Visit children because portals might contain host components.\n\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n        } else {\n          commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because we may find more host components below.\n\n          if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n        }\n\n        if (node === current) {\n          return;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === current) {\n            return;\n          }\n\n          node = node.return;\n\n          if (node.tag === HostPortal) {\n            // When we go out of the portal, we need to restore the parent.\n            // Since we don't keep a stack of them, we will search for it.\n            currentParentIsValid = false;\n          }\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n\n    function commitDeletion(finishedRoot, current, nearestMountedAncestor) {\n      if (supportsMutation) {\n        // Recursively delete all host nodes from the parent.\n        // Detach refs and call componentWillUnmount() on the whole subtree.\n        unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n      } else {\n        // Detach refs and call componentWillUnmount() on the whole subtree.\n        commitNestedUnmounts(finishedRoot, current, nearestMountedAncestor);\n      }\n\n      detachFiberMutation(current);\n    }\n\n    function commitWork(current, finishedWork) {\n      if (!supportsMutation) {\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n              commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all\n              // destroy functions for all fibers are called before any create functions.\n              // This prevents sibling component effects from interfering with each other,\n              // e.g. a destroy function in one component should never override a ref set\n              // by a create function in another component during the same commit.\n              // TODO: Check if we're inside an Offscreen subtree that disappeared\n              // during this commit. If so, we would have already unmounted its\n              // layout hooks. (However, since we null out the `destroy` function\n              // right before calling it, the behavior is already correct, so this\n              // would mostly be for modeling purposes.)\n\n              if (finishedWork.mode & ProfileMode) {\n                try {\n                  startLayoutEffectTimer();\n                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n              }\n\n              return;\n            }\n\n          case Profiler:\n            {\n              return;\n            }\n\n          case SuspenseComponent:\n            {\n              commitSuspenseCallback(finishedWork);\n              attachSuspenseRetryListeners(finishedWork);\n              return;\n            }\n\n          case SuspenseListComponent:\n            {\n              attachSuspenseRetryListeners(finishedWork);\n              return;\n            }\n\n          case HostRoot:\n            {\n              if (supportsHydration) {\n                if (current !== null) {\n                  var prevRootState = current.memoizedState;\n\n                  if (prevRootState.isDehydrated) {\n                    var root = finishedWork.stateNode;\n                    commitHydratedContainer(root.containerInfo);\n                  }\n                }\n              }\n\n              break;\n            }\n\n          case OffscreenComponent:\n          case LegacyHiddenComponent:\n            {\n              return;\n            }\n        }\n\n        commitContainer(finishedWork);\n        return;\n      }\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n            commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all\n            // destroy functions for all fibers are called before any create functions.\n            // This prevents sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n\n            if (finishedWork.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            }\n\n            return;\n          }\n\n        case ClassComponent:\n          {\n            return;\n          }\n\n        case HostComponent:\n          {\n            var instance = finishedWork.stateNode;\n\n            if (instance != null) {\n              // Commit the work prepared earlier.\n              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n              // as the newProps. The updatePayload will contain the real change in\n              // this case.\n\n              var oldProps = current !== null ? current.memoizedProps : newProps;\n              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n              var updatePayload = finishedWork.updateQueue;\n              finishedWork.updateQueue = null;\n\n              if (updatePayload !== null) {\n                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);\n              }\n            }\n\n            return;\n          }\n\n        case HostText:\n          {\n            if (finishedWork.stateNode === null) {\n              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            }\n\n            var textInstance = finishedWork.stateNode;\n            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n\n            var oldText = current !== null ? current.memoizedProps : newText;\n            commitTextUpdate(textInstance, oldText, newText);\n            return;\n          }\n\n        case HostRoot:\n          {\n            if (supportsHydration) {\n              if (current !== null) {\n                var _prevRootState = current.memoizedState;\n\n                if (_prevRootState.isDehydrated) {\n                  var _root = finishedWork.stateNode;\n                  commitHydratedContainer(_root.containerInfo);\n                }\n              }\n            }\n\n            return;\n          }\n\n        case Profiler:\n          {\n            return;\n          }\n\n        case SuspenseComponent:\n          {\n            commitSuspenseCallback(finishedWork);\n            attachSuspenseRetryListeners(finishedWork);\n            return;\n          }\n\n        case SuspenseListComponent:\n          {\n            attachSuspenseRetryListeners(finishedWork);\n            return;\n          }\n\n        case IncompleteClassComponent:\n          {\n            return;\n          }\n      }\n\n      throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n\n    function commitSuspenseCallback(finishedWork) {\n      // TODO: Move this to passive phase\n      var newState = finishedWork.memoizedState;\n    }\n\n    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n      if (!supportsHydration) {\n        return;\n      }\n\n      var newState = finishedWork.memoizedState;\n\n      if (newState === null) {\n        var current = finishedWork.alternate;\n\n        if (current !== null) {\n          var prevState = current.memoizedState;\n\n          if (prevState !== null) {\n            var suspenseInstance = prevState.dehydrated;\n\n            if (suspenseInstance !== null) {\n              commitHydratedSuspenseInstance(suspenseInstance);\n            }\n          }\n        }\n      }\n    }\n\n    function attachSuspenseRetryListeners(finishedWork) {\n      // If this boundary just timed out, then it will have a set of wakeables.\n      // For each wakeable, attach a listener so that when it resolves, React\n      // attempts to re-render the boundary in the primary (pre-timeout) state.\n      var wakeables = finishedWork.updateQueue;\n\n      if (wakeables !== null) {\n        finishedWork.updateQueue = null;\n        var retryCache = finishedWork.stateNode;\n\n        if (retryCache === null) {\n          retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n        }\n\n        wakeables.forEach(function (wakeable) {\n          // Memoize using the boundary fiber to prevent redundant listeners.\n          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n          if (!retryCache.has(wakeable)) {\n            retryCache.add(wakeable);\n            {\n              if (isDevToolsPresent) {\n                if (inProgressLanes !== null && inProgressRoot !== null) {\n                  // If we have pending work still, associate the original updaters with it.\n                  restorePendingUpdaters(inProgressRoot, inProgressLanes);\n                } else {\n                  throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n                }\n              }\n            }\n            wakeable.then(retry, retry);\n          }\n        });\n      }\n    } // This function detects when a Suspense boundary goes from visible to hidden.\n\n\n    function commitResetTextContent(current) {\n      if (!supportsMutation) {\n        return;\n      }\n\n      resetTextContent(current.stateNode);\n    }\n\n    function commitMutationEffects(root, firstChild, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      nextEffect = firstChild;\n      commitMutationEffects_begin(root, committedLanes);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n\n    function commitMutationEffects_begin(root, lanes) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // TODO: Should wrap this in flags check, too, as optimization\n\n        var deletions = fiber.deletions;\n\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n\n            try {\n              commitDeletion(root, childToDelete, fiber);\n            } catch (error) {\n              reportUncaughtErrorInDEV(error);\n              captureCommitPhaseError(childToDelete, fiber, error);\n            }\n          }\n        }\n\n        var child = fiber.child;\n\n        if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {\n          ensureCorrectReturnPointer(child, fiber);\n          nextEffect = child;\n        } else {\n          commitMutationEffects_complete(root, lanes);\n        }\n      }\n    }\n\n    function commitMutationEffects_complete(root, lanes) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n\n        try {\n          commitMutationEffectsOnFiber(fiber, root, lanes);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n      // TODO: The factoring of this phase could probably be improved. Consider\n      // switching on the type of work before checking the flags. That's what\n      // we do in all the other phases. I think this one is only different\n      // because of the shared reconciliation logic below.\n      var flags = finishedWork.flags;\n\n      if (flags & ContentReset) {\n        commitResetTextContent(finishedWork);\n      }\n\n      if (flags & Ref) {\n        var current = finishedWork.alternate;\n\n        if (current !== null) {\n          commitDetachRef(current);\n        }\n      }\n\n      if (flags & Visibility) {\n        switch (finishedWork.tag) {\n          case SuspenseComponent:\n            {\n              var newState = finishedWork.memoizedState;\n              var isHidden = newState !== null;\n\n              if (isHidden) {\n                var _current = finishedWork.alternate;\n                var wasHidden = _current !== null && _current.memoizedState !== null;\n\n                if (!wasHidden) {\n                  // TODO: Move to passive phase\n                  markCommitTimeOfFallback();\n                }\n              }\n\n              break;\n            }\n\n          case OffscreenComponent:\n            {\n              var _newState = finishedWork.memoizedState;\n\n              var _isHidden = _newState !== null;\n\n              var _current2 = finishedWork.alternate;\n\n              var _wasHidden = _current2 !== null && _current2.memoizedState !== null;\n\n              var offscreenBoundary = finishedWork;\n\n              if (supportsMutation) {\n                // TODO: This needs to run whenever there's an insertion or update\n                // inside a hidden Offscreen tree.\n                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n              }\n\n              {\n                if (_isHidden) {\n                  if (!_wasHidden) {\n                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                      nextEffect = offscreenBoundary;\n                      var offscreenChild = offscreenBoundary.child;\n\n                      while (offscreenChild !== null) {\n                        nextEffect = offscreenChild;\n                        disappearLayoutEffects_begin(offscreenChild);\n                        offscreenChild = offscreenChild.sibling;\n                      }\n                    }\n                  }\n                }\n\n                break;\n              }\n            }\n        }\n      } // The following switch statement is only concerned about placement,\n      // updates, and deletions. To avoid needing to add a case for every possible\n      // bitmap value, we remove the secondary effects from the effect tag and\n      // switch on that value.\n\n\n      var primaryFlags = flags & (Placement | Update | Hydrating);\n\n      switch (primaryFlags) {\n        case Placement:\n          {\n            commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n            // inserted, before any life-cycles like componentDidMount gets called.\n            // TODO: findDOMNode doesn't rely on this any more but isMounted does\n            // and isMounted is deprecated anyway so we should be able to kill this.\n\n            finishedWork.flags &= ~Placement;\n            break;\n          }\n\n        case PlacementAndUpdate:\n          {\n            // Placement\n            commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n            // inserted, before any life-cycles like componentDidMount gets called.\n\n            finishedWork.flags &= ~Placement; // Update\n\n            var _current3 = finishedWork.alternate;\n            commitWork(_current3, finishedWork);\n            break;\n          }\n\n        case Hydrating:\n          {\n            finishedWork.flags &= ~Hydrating;\n            break;\n          }\n\n        case HydratingAndUpdate:\n          {\n            finishedWork.flags &= ~Hydrating; // Update\n\n            var _current4 = finishedWork.alternate;\n            commitWork(_current4, finishedWork);\n            break;\n          }\n\n        case Update:\n          {\n            var _current5 = finishedWork.alternate;\n            commitWork(_current5, finishedWork);\n            break;\n          }\n      }\n    }\n\n    function commitLayoutEffects(finishedWork, root, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      nextEffect = finishedWork;\n      commitLayoutEffects_begin(finishedWork, root, committedLanes);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n\n    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n      // Suspense layout effects semantics don't change for legacy roots.\n      var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child;\n\n        if (fiber.tag === OffscreenComponent && isModernRoot) {\n          // Keep track of the current Offscreen stack's state.\n          var isHidden = fiber.memoizedState !== null;\n          var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n\n          if (newOffscreenSubtreeIsHidden) {\n            // The Offscreen tree is hidden. Skip over its layout effects.\n            commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n            continue;\n          } else {\n            // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n            var current = fiber.alternate;\n            var wasHidden = current !== null && current.memoizedState !== null;\n            var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n            offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n            offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n            if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n              // This is the root of a reappearing boundary. Turn its layout effects\n              // back on.\n              nextEffect = fiber;\n              reappearLayoutEffects_begin(fiber);\n            }\n\n            var child = firstChild;\n\n            while (child !== null) {\n              nextEffect = child;\n              commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.\n              root, committedLanes);\n              child = child.sibling;\n            } // Restore Offscreen state and resume in our-progress traversal.\n\n\n            nextEffect = fiber;\n            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n            continue;\n          }\n        }\n\n        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n          ensureCorrectReturnPointer(firstChild, fiber);\n          nextEffect = firstChild;\n        } else {\n          commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        }\n      }\n    }\n\n    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n\n        if ((fiber.flags & LayoutMask) !== NoFlags) {\n          var current = fiber.alternate;\n          setCurrentFiber(fiber);\n\n          try {\n            commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          resetCurrentFiber();\n        }\n\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function disappearLayoutEffects_begin(subtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              if (fiber.mode & ProfileMode) {\n                try {\n                  startLayoutEffectTimer();\n                  commitHookEffectListUnmount(Layout, fiber, fiber.return);\n                } finally {\n                  recordLayoutEffectDuration(fiber);\n                }\n              } else {\n                commitHookEffectListUnmount(Layout, fiber, fiber.return);\n              }\n\n              break;\n            }\n\n          case ClassComponent:\n            {\n              // TODO (Offscreen) Check: flags & RefStatic\n              safelyDetachRef(fiber, fiber.return);\n              var instance = fiber.stateNode;\n\n              if (typeof instance.componentWillUnmount === 'function') {\n                safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n              }\n\n              break;\n            }\n\n          case HostComponent:\n            {\n              safelyDetachRef(fiber, fiber.return);\n              break;\n            }\n\n          case OffscreenComponent:\n            {\n              // Check if this is a\n              var isHidden = fiber.memoizedState !== null;\n\n              if (isHidden) {\n                // Nested Offscreen tree is already hidden. Don't disappear\n                // its effects.\n                disappearLayoutEffects_complete(subtreeRoot);\n                continue;\n              }\n\n              break;\n            }\n        } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n        if (firstChild !== null) {\n          firstChild.return = fiber;\n          nextEffect = firstChild;\n        } else {\n          disappearLayoutEffects_complete(subtreeRoot);\n        }\n      }\n    }\n\n    function disappearLayoutEffects_complete(subtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function reappearLayoutEffects_begin(subtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child;\n\n        if (fiber.tag === OffscreenComponent) {\n          var isHidden = fiber.memoizedState !== null;\n\n          if (isHidden) {\n            // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n            reappearLayoutEffects_complete(subtreeRoot);\n            continue;\n          }\n        } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n        if (firstChild !== null) {\n          // This node may have been reused from a previous render, so we can't\n          // assume its return pointer is correct.\n          firstChild.return = fiber;\n          nextEffect = firstChild;\n        } else {\n          reappearLayoutEffects_complete(subtreeRoot);\n        }\n      }\n    }\n\n    function reappearLayoutEffects_complete(subtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n        setCurrentFiber(fiber);\n\n        try {\n          reappearLayoutEffectsOnFiber(fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n\n        resetCurrentFiber();\n\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          // This node may have been reused from a previous render, so we can't\n          // assume its return pointer is correct.\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitPassiveMountEffects(root, finishedWork) {\n      nextEffect = finishedWork;\n      commitPassiveMountEffects_begin(finishedWork, root);\n    }\n\n    function commitPassiveMountEffects_begin(subtreeRoot, root) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child;\n\n        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n          ensureCorrectReturnPointer(firstChild, fiber);\n          nextEffect = firstChild;\n        } else {\n          commitPassiveMountEffects_complete(subtreeRoot, root);\n        }\n      }\n    }\n\n    function commitPassiveMountEffects_complete(subtreeRoot, root) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n\n        if ((fiber.flags & Passive) !== NoFlags) {\n          setCurrentFiber(fiber);\n\n          try {\n            commitPassiveMountOnFiber(root, fiber);\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          resetCurrentFiber();\n        }\n\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitPassiveMountOnFiber(finishedRoot, finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (finishedWork.mode & ProfileMode) {\n              startPassiveEffectTimer();\n\n              try {\n                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n              } finally {\n                recordPassiveEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n            }\n\n            break;\n          }\n      }\n    }\n\n    function commitPassiveUnmountEffects(firstChild) {\n      nextEffect = firstChild;\n      commitPassiveUnmountEffects_begin();\n    }\n\n    function commitPassiveUnmountEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var child = fiber.child;\n\n        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n          var deletions = fiber.deletions;\n\n          if (deletions !== null) {\n            for (var i = 0; i < deletions.length; i++) {\n              var fiberToDelete = deletions[i];\n              nextEffect = fiberToDelete;\n              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n            }\n\n            {\n              // A fiber was deleted from this parent fiber, but it's still part of\n              // the previous (alternate) parent fiber's list of children. Because\n              // children are a linked list, an earlier sibling that's still alive\n              // will be connected to the deleted fiber via its `alternate`:\n              //\n              //   live fiber\n              //   --alternate--> previous live fiber\n              //   --sibling--> deleted fiber\n              //\n              // We can't disconnect `alternate` on nodes that haven't been deleted\n              // yet, but we can disconnect the `sibling` and `child` pointers.\n              var previousFiber = fiber.alternate;\n\n              if (previousFiber !== null) {\n                var detachedChild = previousFiber.child;\n\n                if (detachedChild !== null) {\n                  previousFiber.child = null;\n\n                  do {\n                    var detachedSibling = detachedChild.sibling;\n                    detachedChild.sibling = null;\n                    detachedChild = detachedSibling;\n                  } while (detachedChild !== null);\n                }\n              }\n            }\n            nextEffect = fiber;\n          }\n        }\n\n        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n          ensureCorrectReturnPointer(child, fiber);\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffects_complete();\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n\n        if ((fiber.flags & Passive) !== NoFlags) {\n          setCurrentFiber(fiber);\n          commitPassiveUnmountOnFiber(fiber);\n          resetCurrentFiber();\n        }\n\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitPassiveUnmountOnFiber(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (finishedWork.mode & ProfileMode) {\n              startPassiveEffectTimer();\n              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n              recordPassiveEffectDuration(finishedWork);\n            } else {\n              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n            }\n\n            break;\n          }\n      }\n    }\n\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // Deletion effects fire in parent -> child order\n        // TODO: Check if fiber has a PassiveStatic flag\n\n        setCurrentFiber(fiber);\n        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n        resetCurrentFiber();\n        var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n        // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n        if (child !== null) {\n          ensureCorrectReturnPointer(child, fiber);\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var sibling = fiber.sibling;\n        var returnFiber = fiber.return;\n        {\n          // Recursively traverse the entire deleted tree and clean up fiber fields.\n          // This is more aggressive than ideal, and the long term goal is to only\n          // have to detach the deleted tree at the root.\n          detachFiberAfterEffects(fiber);\n\n          if (fiber === deletedSubtreeRoot) {\n            nextEffect = null;\n            return;\n          }\n        }\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, returnFiber);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = returnFiber;\n      }\n    }\n\n    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (current.mode & ProfileMode) {\n              startPassiveEffectTimer();\n              commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n              recordPassiveEffectDuration(current);\n            } else {\n              commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n            }\n\n            break;\n          }\n      }\n    }\n\n    var didWarnWrongReturnPointer = false;\n\n    function ensureCorrectReturnPointer(fiber, expectedReturnFiber) {\n      {\n        if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {\n          didWarnWrongReturnPointer = true;\n          error('Internal React error: Return pointer is inconsistent ' + 'with parent.');\n        }\n      } // TODO: Remove this assignment once we're confident that it won't break\n      // anything, by checking the warning logs for the above invariant\n\n      fiber.return = expectedReturnFiber;\n    } // TODO: Reuse reappearLayoutEffects traversal here?\n\n\n    function invokeLayoutEffectMountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListMount(Layout | HasEffect, fiber);\n              } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n\n              break;\n            }\n\n          case ClassComponent:\n            {\n              var instance = fiber.stateNode;\n\n              try {\n                instance.componentDidMount();\n              } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    function invokePassiveEffectMountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n              } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    function invokeLayoutEffectUnmountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n              } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n\n              break;\n            }\n\n          case ClassComponent:\n            {\n              var instance = fiber.stateNode;\n\n              if (typeof instance.componentWillUnmount === 'function') {\n                safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    function invokePassiveEffectUnmountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n              } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n            }\n        }\n      }\n    }\n\n    var COMPONENT_TYPE = 0;\n    var HAS_PSEUDO_CLASS_TYPE = 1;\n    var ROLE_TYPE = 2;\n    var TEST_NAME_TYPE = 3;\n    var TEXT_TYPE = 4;\n\n    if (typeof Symbol === 'function' && Symbol.for) {\n      var symbolFor = Symbol.for;\n      COMPONENT_TYPE = symbolFor('selector.component');\n      HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n      ROLE_TYPE = symbolFor('selector.role');\n      TEST_NAME_TYPE = symbolFor('selector.test_id');\n      TEXT_TYPE = symbolFor('selector.text');\n    }\n\n    function createComponentSelector(component) {\n      return {\n        $$typeof: COMPONENT_TYPE,\n        value: component\n      };\n    }\n\n    function createHasPseudoClassSelector(selectors) {\n      return {\n        $$typeof: HAS_PSEUDO_CLASS_TYPE,\n        value: selectors\n      };\n    }\n\n    function createRoleSelector(role) {\n      return {\n        $$typeof: ROLE_TYPE,\n        value: role\n      };\n    }\n\n    function createTextSelector(text) {\n      return {\n        $$typeof: TEXT_TYPE,\n        value: text\n      };\n    }\n\n    function createTestNameSelector(id) {\n      return {\n        $$typeof: TEST_NAME_TYPE,\n        value: id\n      };\n    }\n\n    function findFiberRootForHostRoot(hostRoot) {\n      var maybeFiber = getInstanceFromNode(hostRoot);\n\n      if (maybeFiber != null) {\n        if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n          throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n        }\n\n        return maybeFiber;\n      } else {\n        var fiberRoot = findFiberRoot(hostRoot);\n\n        if (fiberRoot === null) {\n          throw new Error('Could not find React container within specified host subtree.');\n        } // The Flow type for FiberRoot is a little funky.\n        // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n\n        return fiberRoot.stateNode.current;\n      }\n    }\n\n    function matchSelector(fiber, selector) {\n      switch (selector.$$typeof) {\n        case COMPONENT_TYPE:\n          if (fiber.type === selector.value) {\n            return true;\n          }\n\n          break;\n\n        case HAS_PSEUDO_CLASS_TYPE:\n          return hasMatchingPaths(fiber, selector.value);\n\n        case ROLE_TYPE:\n          if (fiber.tag === HostComponent) {\n            var node = fiber.stateNode;\n\n            if (matchAccessibilityRole(node, selector.value)) {\n              return true;\n            }\n          }\n\n          break;\n\n        case TEXT_TYPE:\n          if (fiber.tag === HostComponent || fiber.tag === HostText) {\n            var textContent = getTextContent(fiber);\n\n            if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n              return true;\n            }\n          }\n\n          break;\n\n        case TEST_NAME_TYPE:\n          if (fiber.tag === HostComponent) {\n            var dataTestID = fiber.memoizedProps['data-testname'];\n\n            if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n              return true;\n            }\n          }\n\n          break;\n\n        default:\n          throw new Error('Invalid selector type specified.');\n      }\n\n      return false;\n    }\n\n    function selectorToString(selector) {\n      switch (selector.$$typeof) {\n        case COMPONENT_TYPE:\n          var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n          return \"<\" + displayName + \">\";\n\n        case HAS_PSEUDO_CLASS_TYPE:\n          return \":has(\" + (selectorToString(selector) || '') + \")\";\n\n        case ROLE_TYPE:\n          return \"[role=\\\"\" + selector.value + \"\\\"]\";\n\n        case TEXT_TYPE:\n          return \"\\\"\" + selector.value + \"\\\"\";\n\n        case TEST_NAME_TYPE:\n          return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n\n        default:\n          throw new Error('Invalid selector type specified.');\n      }\n    }\n\n    function findPaths(root, selectors) {\n      var matchingFibers = [];\n      var stack = [root, 0];\n      var index = 0;\n\n      while (index < stack.length) {\n        var fiber = stack[index++];\n        var selectorIndex = stack[index++];\n        var selector = selectors[selectorIndex];\n\n        if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n          continue;\n        } else {\n          while (selector != null && matchSelector(fiber, selector)) {\n            selectorIndex++;\n            selector = selectors[selectorIndex];\n          }\n        }\n\n        if (selectorIndex === selectors.length) {\n          matchingFibers.push(fiber);\n        } else {\n          var child = fiber.child;\n\n          while (child !== null) {\n            stack.push(child, selectorIndex);\n            child = child.sibling;\n          }\n        }\n      }\n\n      return matchingFibers;\n    } // Same as findPaths but with eager bailout on first match\n\n\n    function hasMatchingPaths(root, selectors) {\n      var stack = [root, 0];\n      var index = 0;\n\n      while (index < stack.length) {\n        var fiber = stack[index++];\n        var selectorIndex = stack[index++];\n        var selector = selectors[selectorIndex];\n\n        if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n          continue;\n        } else {\n          while (selector != null && matchSelector(fiber, selector)) {\n            selectorIndex++;\n            selector = selectors[selectorIndex];\n          }\n        }\n\n        if (selectorIndex === selectors.length) {\n          return true;\n        } else {\n          var child = fiber.child;\n\n          while (child !== null) {\n            stack.push(child, selectorIndex);\n            child = child.sibling;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    function findAllNodes(hostRoot, selectors) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n\n      var root = findFiberRootForHostRoot(hostRoot);\n      var matchingFibers = findPaths(root, selectors);\n      var instanceRoots = [];\n      var stack = Array.from(matchingFibers);\n      var index = 0;\n\n      while (index < stack.length) {\n        var node = stack[index++];\n\n        if (node.tag === HostComponent) {\n          if (isHiddenSubtree(node)) {\n            continue;\n          }\n\n          instanceRoots.push(node.stateNode);\n        } else {\n          var child = node.child;\n\n          while (child !== null) {\n            stack.push(child);\n            child = child.sibling;\n          }\n        }\n      }\n\n      return instanceRoots;\n    }\n\n    function getFindAllNodesFailureDescription(hostRoot, selectors) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n\n      var root = findFiberRootForHostRoot(hostRoot);\n      var maxSelectorIndex = 0;\n      var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n      var stack = [root, 0];\n      var index = 0;\n\n      while (index < stack.length) {\n        var fiber = stack[index++];\n        var selectorIndex = stack[index++];\n        var selector = selectors[selectorIndex];\n\n        if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n          continue;\n        } else if (matchSelector(fiber, selector)) {\n          matchedNames.push(selectorToString(selector));\n          selectorIndex++;\n\n          if (selectorIndex > maxSelectorIndex) {\n            maxSelectorIndex = selectorIndex;\n          }\n        }\n\n        if (selectorIndex < selectors.length) {\n          var child = fiber.child;\n\n          while (child !== null) {\n            stack.push(child, selectorIndex);\n            child = child.sibling;\n          }\n        }\n      }\n\n      if (maxSelectorIndex < selectors.length) {\n        var unmatchedNames = [];\n\n        for (var i = maxSelectorIndex; i < selectors.length; i++) {\n          unmatchedNames.push(selectorToString(selectors[i]));\n        }\n\n        return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n      }\n\n      return null;\n    }\n\n    function findBoundingRects(hostRoot, selectors) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n\n      var instanceRoots = findAllNodes(hostRoot, selectors);\n      var boundingRects = [];\n\n      for (var i = 0; i < instanceRoots.length; i++) {\n        boundingRects.push(getBoundingRect(instanceRoots[i]));\n      }\n\n      for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n        var targetRect = boundingRects[_i];\n        var targetLeft = targetRect.x;\n        var targetRight = targetLeft + targetRect.width;\n        var targetTop = targetRect.y;\n        var targetBottom = targetTop + targetRect.height;\n\n        for (var j = _i - 1; j >= 0; j--) {\n          if (_i !== j) {\n            var otherRect = boundingRects[j];\n            var otherLeft = otherRect.x;\n            var otherRight = otherLeft + otherRect.width;\n            var otherTop = otherRect.y;\n            var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n            // but we can handle the most common cases:\n            // 1. completely overlapping rects\n            // 2. adjacent rects that are the same width or height (e.g. items in a list)\n            //\n            // Even given the above constraints,\n            // we still won't end up with the fewest possible rects without doing multiple passes,\n            // but it's good enough for this purpose.\n\n            if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n              // Complete overlapping rects; remove the inner one.\n              boundingRects.splice(_i, 1);\n              break;\n            } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n              // Adjacent vertical rects; merge them.\n              if (otherTop > targetTop) {\n                otherRect.height += otherTop - targetTop;\n                otherRect.y = targetTop;\n              }\n\n              if (otherBottom < targetBottom) {\n                otherRect.height = targetBottom - otherTop;\n              }\n\n              boundingRects.splice(_i, 1);\n              break;\n            } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n              // Adjacent horizontal rects; merge them.\n              if (otherLeft > targetLeft) {\n                otherRect.width += otherLeft - targetLeft;\n                otherRect.x = targetLeft;\n              }\n\n              if (otherRight < targetRight) {\n                otherRect.width = targetRight - otherLeft;\n              }\n\n              boundingRects.splice(_i, 1);\n              break;\n            }\n          }\n        }\n      }\n\n      return boundingRects;\n    }\n\n    function focusWithin(hostRoot, selectors) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n\n      var root = findFiberRootForHostRoot(hostRoot);\n      var matchingFibers = findPaths(root, selectors);\n      var stack = Array.from(matchingFibers);\n      var index = 0;\n\n      while (index < stack.length) {\n        var fiber = stack[index++];\n\n        if (isHiddenSubtree(fiber)) {\n          continue;\n        }\n\n        if (fiber.tag === HostComponent) {\n          var node = fiber.stateNode;\n\n          if (setFocusIfFocusable(node)) {\n            return true;\n          }\n        }\n\n        var child = fiber.child;\n\n        while (child !== null) {\n          stack.push(child);\n          child = child.sibling;\n        }\n      }\n\n      return false;\n    }\n\n    var commitHooks = [];\n\n    function onCommitRoot$1() {\n      if (supportsTestSelectors) {\n        commitHooks.forEach(function (commitHook) {\n          return commitHook();\n        });\n      }\n    }\n\n    function observeVisibleRects(hostRoot, selectors, callback, options) {\n      if (!supportsTestSelectors) {\n        throw new Error('Test selector API is not supported by this renderer.');\n      }\n\n      var instanceRoots = findAllNodes(hostRoot, selectors);\n\n      var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n          disconnect = _setupIntersectionObs.disconnect,\n          observe = _setupIntersectionObs.observe,\n          unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n\n      var commitHook = function () {\n        var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n        instanceRoots.forEach(function (target) {\n          if (nextInstanceRoots.indexOf(target) < 0) {\n            unobserve(target);\n          }\n        });\n        nextInstanceRoots.forEach(function (target) {\n          if (instanceRoots.indexOf(target) < 0) {\n            observe(target);\n          }\n        });\n      };\n\n      commitHooks.push(commitHook);\n      return {\n        disconnect: function () {\n          // Stop listening for React mutations:\n          var index = commitHooks.indexOf(commitHook);\n\n          if (index >= 0) {\n            commitHooks.splice(index, 1);\n          } // Disconnect the host observer:\n\n\n          disconnect();\n        }\n      };\n    }\n\n    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n\n    function isLegacyActEnvironment(fiber) {\n      {\n        // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n        // act environment whenever `jest` is defined, but you can still turn off\n        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n        // to false.\n        var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n        typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n        var jestIsDefined = typeof jest !== 'undefined';\n        return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n      }\n    }\n\n    function isConcurrentActEnvironment() {\n      {\n        var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n        typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n          // TODO: Include link to relevant documentation page.\n          error('The current testing environment is not configured to support ' + 'act(...)');\n        }\n\n        return isReactActEnvironmentGlobal;\n      }\n    }\n\n    var ceil = Math.ceil;\n    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n        ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n        ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n        ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n    var NoContext =\n    /*             */\n    0;\n    var BatchedContext =\n    /*               */\n    1;\n    var RenderContext =\n    /*                */\n    2;\n    var CommitContext =\n    /*                */\n    4;\n    var RootInProgress = 0;\n    var RootFatalErrored = 1;\n    var RootErrored = 2;\n    var RootSuspended = 3;\n    var RootSuspendedWithDelay = 4;\n    var RootCompleted = 5;\n    var RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\n    var executionContext = NoContext; // The root we're working on\n\n    var workInProgressRoot = null; // The fiber we're working on\n\n    var workInProgress = null; // The lanes we're rendering\n\n    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n    // This is a superset of the lanes we started working on at the root. The only\n    // case where it's different from `workInProgressRootRenderLanes` is when we\n    // enter a subtree that is hidden and needs to be unhidden: Suspense and\n    // Offscreen component.\n    //\n    // Most things in the work loop should deal with workInProgressRootRenderLanes.\n    // Most things in begin/complete phases should deal with subtreeRenderLanes.\n\n    var subtreeRenderLanes = NoLanes;\n    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\n    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\n    var workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n    // slightly different than `renderLanes` because `renderLanes` can change as you\n    // enter and exit an Offscreen tree. This value is the combination of all render\n    // lanes for the entire render phase.\n\n    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n    // includes unprocessed updates, not work in bailed out children.\n\n    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\n    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\n    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\n    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n    // We will log them once the tree commits.\n\n    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n    // model where we don't commit new loading states in too quick succession.\n\n    var globalMostRecentFallbackTime = 0;\n    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n    // more and prefer CPU suspense heuristics instead.\n\n    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n    // suspense heuristics and opt out of rendering more content.\n\n    var RENDER_TIMEOUT_MS = 500;\n\n    function resetRenderTimer() {\n      workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n    }\n\n    function getRenderTargetTime() {\n      return workInProgressRootRenderTargetTime;\n    }\n\n    var hasUncaughtError = false;\n    var firstUncaughtError = null;\n    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\n\n    var rootDoesHavePassiveEffects = false;\n    var rootWithPendingPassiveEffects = null;\n    var pendingPassiveEffectsLanes = NoLanes;\n    var pendingPassiveProfilerEffects = [];\n    var NESTED_UPDATE_LIMIT = 50;\n    var nestedUpdateCount = 0;\n    var rootWithNestedUpdates = null;\n    var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n    var nestedPassiveUpdateCount = 0; // If two updates are scheduled within the same event, we should treat their\n    // event times as simultaneous, even if the actual clock time has advanced\n    // between the first and second call.\n\n    var currentEventTime = NoTimestamp;\n    var currentEventTransitionLane = NoLanes;\n\n    function getWorkInProgressRoot() {\n      return workInProgressRoot;\n    }\n\n    function requestEventTime() {\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        // We're inside React, so it's fine to read the actual time.\n        return now$1();\n      } // We're not inside React, so we may be in the middle of a browser event.\n\n\n      if (currentEventTime !== NoTimestamp) {\n        // Use the same start time for all updates until we enter React again.\n        return currentEventTime;\n      } // This is the first update since React yielded. Compute a new start time.\n\n\n      currentEventTime = now$1();\n      return currentEventTime;\n    }\n\n    function requestUpdateLane(fiber) {\n      // Special cases\n      var mode = fiber.mode;\n\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n        // This is a render phase update. These are not officially supported. The\n        // old behavior is to give this the same \"thread\" (lanes) as\n        // whatever is currently rendering. So if you call `setState` on a component\n        // that happens later in the same render, it will flush. Ideally, we want to\n        // remove the special case and treat them as if they came from an\n        // interleaved event. Regardless, this pattern is not officially supported.\n        // This behavior is only a fallback. The flag only exists until we can roll\n        // out the setState warning, since existing code might accidentally rely on\n        // the current behavior.\n        return pickArbitraryLane(workInProgressRootRenderLanes);\n      }\n\n      var isTransition = requestCurrentTransition() !== NoTransition;\n\n      if (isTransition) {\n        if (ReactCurrentBatchConfig$2.transition !== null) {\n          var transition = ReactCurrentBatchConfig$2.transition;\n\n          if (!transition._updatedFibers) {\n            transition._updatedFibers = new Set();\n          }\n\n          transition._updatedFibers.add(fiber);\n        } // The algorithm for assigning an update to a lane should be stable for all\n        // updates at the same priority within the same event. To do this, the\n        // inputs to the algorithm must be the same.\n        //\n        // The trick we use is to cache the first of each of these inputs within an\n        // event. Then reset the cached values once we can be sure the event is\n        // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n        if (currentEventTransitionLane === NoLane) {\n          // All transitions within the same event are assigned the same lane.\n          currentEventTransitionLane = claimNextTransitionLane();\n        }\n\n        return currentEventTransitionLane;\n      } // Updates originating inside certain React methods, like flushSync, have\n      // their priority set by tracking it with a context variable.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n\n      var updateLane = getCurrentUpdatePriority();\n\n      if (updateLane !== NoLane) {\n        return updateLane;\n      } // This update originated outside React. Ask the host environment for an\n      // appropriate priority, based on the type of event.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n\n      var eventLane = getCurrentEventPriority();\n      return eventLane;\n    }\n\n    function requestRetryLane(fiber) {\n      // This is a fork of `requestUpdateLane` designed specifically for Suspense\n      // \"retries\" — a special update that attempts to flip a Suspense boundary\n      // from its placeholder state to its primary/resolved state.\n      // Special cases\n      var mode = fiber.mode;\n\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      }\n\n      return claimNextRetryLane();\n    }\n\n    function scheduleUpdateOnFiber(fiber, lane, eventTime) {\n      checkForNestedUpdates();\n      var root = markUpdateLaneFromFiberToRoot(fiber, lane);\n\n      if (root === null) {\n        return null;\n      } // Mark that the root has a pending update.\n\n\n      markRootUpdated(root, lane, eventTime);\n\n      if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n        // This update was dispatched during the render phase. This is a mistake\n        // if the update originates from user space (with the exception of local\n        // hook updates, which are handled differently and don't reach this\n        // function), but there are some internal React features that use this as\n        // an implementation detail, like selective hydration.\n        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n      } else {\n        // This is a normal update, scheduled from outside the render phase. For\n        // example, during an input event.\n        {\n          if (isDevToolsPresent) {\n            addFiberToLanesMap(root, fiber, lane);\n          }\n        }\n        warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n        if (root === workInProgressRoot) {\n          // TODO: Consolidate with `isInterleavedUpdate` check\n          // Received an update to a tree that's in the middle of rendering. Mark\n          // that there was an interleaved update work on this root. Unless the\n          // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n          // phase update. In that case, we don't treat render phase updates as if\n          // they were interleaved, for backwards compat reasons.\n          if ((executionContext & RenderContext) === NoContext) {\n            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n          }\n\n          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n            // The root already suspended with a delay, which means this render\n            // definitely won't finish. Since we have a new update, let's mark it as\n            // suspended now, right before marking the incoming update. This has the\n            // effect of interrupting the current render and switching to the update.\n            // TODO: Make sure this doesn't override pings that happen while we've\n            // already started rendering.\n            markRootSuspended$1(root, workInProgressRootRenderLanes);\n          }\n        }\n\n        ensureRootIsScheduled(root, eventTime);\n\n        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n        !ReactCurrentActQueue$1.isBatchingLegacy) {\n          // Flush the synchronous work now, unless we're already working or inside\n          // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n          // scheduleCallbackForFiber to preserve the ability to schedule a callback\n          // without immediately flushing it. We only do this for user-initiated\n          // updates, to preserve historical behavior of legacy mode.\n          resetRenderTimer();\n          flushSyncCallbacksOnlyInLegacyMode();\n        }\n      }\n\n      return root;\n    }\n\n    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n      // This is a special fork of scheduleUpdateOnFiber that is only used to\n      // schedule the initial hydration of a root that has just been created. Most\n      // of the stuff in scheduleUpdateOnFiber can be skipped.\n      //\n      // The main reason for this separate path, though, is to distinguish the\n      // initial children from subsequent updates. In fully client-rendered roots\n      // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n      // updates, but hydration roots are special because the initial render must\n      // match what was rendered on the server.\n      var current = root.current;\n      current.lanes = lane;\n      markRootUpdated(root, lane, eventTime);\n      ensureRootIsScheduled(root, eventTime);\n    } // This is split into a separate function so we can mark a fiber with pending\n    // work without treating it as a typical update that originates from an event;\n    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n    // on a fiber.\n\n\n    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n      // Update the source fiber's lanes\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n      var alternate = sourceFiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n\n      {\n        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      } // Walk the parent path to the root and update the child lanes.\n\n      var node = sourceFiber;\n      var parent = sourceFiber.return;\n\n      while (parent !== null) {\n        parent.childLanes = mergeLanes(parent.childLanes, lane);\n        alternate = parent.alternate;\n\n        if (alternate !== null) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n        } else {\n          {\n            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n            }\n          }\n        }\n\n        node = parent;\n        parent = parent.return;\n      }\n\n      if (node.tag === HostRoot) {\n        var root = node.stateNode;\n        return root;\n      } else {\n        return null;\n      }\n    }\n\n    function isInterleavedUpdate(fiber, lane) {\n      return (// TODO: Optimize slightly by comparing to root that fiber belongs to.\n        // Requires some refactoring. Not a big deal though since it's rare for\n        // concurrent apps to have more than a single root.\n        workInProgressRoot !== null && (fiber.mode & ConcurrentMode) !== NoMode && // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),\n        // then don't treat this as an interleaved update. This pattern is\n        // accompanied by a warning but we haven't fully deprecated it yet. We can\n        // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.\n        (executionContext & RenderContext) === NoContext\n      );\n    } // Use this function to schedule a task for a root. There's only one task per\n    // root; if a task was already scheduled, we'll check to make sure the priority\n    // of the existing task is the same as the priority of the next level that the\n    // root has work on. This function is called on every update, and right before\n    // exiting a task.\n\n\n    function ensureRootIsScheduled(root, currentTime) {\n      var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n      // expired so we know to work on those next.\n\n      markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n      var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n      if (nextLanes === NoLanes) {\n        // Special case: There's nothing to work on.\n        if (existingCallbackNode !== null) {\n          cancelCallback$1(existingCallbackNode);\n        }\n\n        root.callbackNode = null;\n        root.callbackPriority = NoLane;\n        return;\n      } // We use the highest priority lane to represent the priority of the callback.\n\n\n      var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n      var existingCallbackPriority = root.callbackPriority;\n\n      if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n      // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n      // on the `act` queue.\n      !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n        {\n          // If we're going to re-use an existing task, it needs to exist.\n          // Assume that discrete update microtasks are non-cancellable and null.\n          // TODO: Temporary until we confirm this warning is not fired.\n          if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n            error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n          }\n        } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n        return;\n      }\n\n      if (existingCallbackNode != null) {\n        // Cancel the existing callback. We'll schedule a new one below.\n        cancelCallback$1(existingCallbackNode);\n      } // Schedule a new callback.\n\n\n      var newCallbackNode;\n\n      if (newCallbackPriority === SyncLane) {\n        // Special case: Sync React callbacks are scheduled on a special\n        // internal queue\n        if (root.tag === LegacyRoot) {\n          if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n            ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n          }\n\n          scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n        } else {\n          scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n        }\n\n        if (supportsMicrotasks) {\n          // Flush the queue in a microtask.\n          if (ReactCurrentActQueue$1.current !== null) {\n            // Inside `act`, use our internal `act` queue so that these get flushed\n            // at the end of the current scope even when using the sync version\n            // of `act`.\n            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n          } else {\n            scheduleMicrotask(function () {\n              // In Safari, appending an iframe forces microtasks to run.\n              // https://github.com/facebook/react/issues/22459\n              // We don't support running callbacks in the middle of render\n              // or commit so we need to check against that.\n              if (executionContext === NoContext) {\n                // It's only safe to do this conditionally because we always\n                // check for pending work before we exit the task.\n                flushSyncCallbacks();\n              }\n            });\n          }\n        } else {\n          // Flush the queue in an Immediate task.\n          scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n        }\n\n        newCallbackNode = null;\n      } else {\n        var schedulerPriorityLevel;\n\n        switch (lanesToEventPriority(nextLanes)) {\n          case DiscreteEventPriority:\n            schedulerPriorityLevel = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriorityLevel = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriorityLevel = IdlePriority;\n            break;\n\n          default:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n        }\n\n        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n      }\n\n      root.callbackPriority = newCallbackPriority;\n      root.callbackNode = newCallbackNode;\n    } // This is the entry point for every concurrent task, i.e. anything that\n    // goes through Scheduler.\n\n\n    function performConcurrentWorkOnRoot(root, didTimeout) {\n      {\n        resetNestedUpdateFlag();\n      } // Since we know we're in a React event, we can clear the current\n      // event time. The next update will compute a new event time.\n\n      currentEventTime = NoTimestamp;\n      currentEventTransitionLane = NoLanes;\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      } // Flush any pending passive effects before deciding which lanes to work on,\n      // in case they schedule additional work.\n\n\n      var originalCallbackNode = root.callbackNode;\n      var didFlushPassiveEffects = flushPassiveEffects();\n\n      if (didFlushPassiveEffects) {\n        // Something in the passive effect phase may have canceled the current task.\n        // Check if the task node for this root was changed.\n        if (root.callbackNode !== originalCallbackNode) {\n          // The current task was canceled. Exit. We don't need to call\n          // `ensureRootIsScheduled` because the check above implies either that\n          // there's a new task, or that there's no remaining work on this root.\n          return null;\n        }\n      } // Determine the next lanes to work on, using the fields stored\n      // on the root.\n\n\n      var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n      if (lanes === NoLanes) {\n        // Defensive coding. This is never expected to happen.\n        return null;\n      } // We disable time-slicing in some cases: if the work has been CPU-bound\n      // for too long (\"expired\" work, to prevent starvation), or we're in\n      // sync-updates-by-default mode.\n      // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n      // bug we're still investigating. Once the bug in Scheduler is fixed,\n      // we can remove this, since we track expiration ourselves.\n\n\n      var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;\n      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n      if (exitStatus !== RootInProgress) {\n        if (exitStatus === RootErrored) {\n          // If something threw an error, try rendering one more time. We'll\n          // render synchronously to block concurrent data mutations, and we'll\n          // includes all pending updates are included. If it still fails after\n          // the second attempt, we'll give up and commit the resulting tree.\n          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n          }\n        }\n\n        if (exitStatus === RootFatalErrored) {\n          var fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now$1());\n          throw fatalError;\n        }\n\n        if (exitStatus === RootDidNotComplete) {\n          // The render unwound without completing the tree. This happens in special\n          // cases where need to exit the current render without producing a\n          // consistent tree or committing.\n          //\n          // This should only happen during a concurrent render, not a discrete or\n          // synchronous update. We should have already checked for this when we\n          // unwound the stack.\n          markRootSuspended$1(root, lanes);\n        } else {\n          // The render completed.\n          // Check if this render may have yielded to a concurrent event, and if so,\n          // confirm that any newly rendered stores are consistent.\n          // TODO: It's possible that even a concurrent render may never have yielded\n          // to the main thread, if it was fast enough, or if it expired. We could\n          // skip the consistency check in that case, too.\n          var renderWasConcurrent = !includesBlockingLane(root, lanes);\n          var finishedWork = root.current.alternate;\n\n          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n            // A store was mutated in an interleaved event. Render again,\n            // synchronously, to block further mutations.\n            exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n            if (exitStatus === RootErrored) {\n              var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n              if (_errorRetryLanes !== NoLanes) {\n                lanes = _errorRetryLanes;\n                exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n                // concurrent events.\n              }\n            }\n\n            if (exitStatus === RootFatalErrored) {\n              var _fatalError = workInProgressRootFatalError;\n              prepareFreshStack(root, NoLanes);\n              markRootSuspended$1(root, lanes);\n              ensureRootIsScheduled(root, now$1());\n              throw _fatalError;\n            }\n          } // We now have a consistent tree. The next step is either to commit it,\n          // or, if something suspended, wait to commit it after a timeout.\n\n\n          root.finishedWork = finishedWork;\n          root.finishedLanes = lanes;\n          finishConcurrentRender(root, exitStatus, lanes);\n        }\n      }\n\n      ensureRootIsScheduled(root, now$1());\n\n      if (root.callbackNode === originalCallbackNode) {\n        // The task node scheduled for this root is the same one that's\n        // currently executed. Need to return a continuation.\n        return performConcurrentWorkOnRoot.bind(null, root);\n      }\n\n      return null;\n    }\n\n    function recoverFromConcurrentError(root, errorRetryLanes) {\n      // If an error occurred during hydration, discard server response and fall\n      // back to client side render.\n      // Before rendering again, save the errors from the previous attempt.\n      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n      if (isRootDehydrated(root)) {\n        // The shell failed to hydrate. Set a flag to force a client rendering\n        // during the next attempt. To do this, we call prepareFreshStack now\n        // to create the root work-in-progress fiber. This is a bit weird in terms\n        // of factoring, because it relies on renderRootSync not calling\n        // prepareFreshStack again in the call below, which happens because the\n        // root and lanes haven't changed.\n        //\n        // TODO: I think what we should do is set ForceClientRender inside\n        // throwException, like we do for nested Suspense boundaries. The reason\n        // it's here instead is so we can switch to the synchronous work loop, too.\n        // Something to consider for a future refactor.\n        var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n        rootWorkInProgress.flags |= ForceClientRender;\n        {\n          errorHydratingContainer(root.containerInfo);\n        }\n      }\n\n      var exitStatus = renderRootSync(root, errorRetryLanes);\n\n      if (exitStatus !== RootErrored) {\n        // Successfully finished rendering on retry\n        // The errors from the failed first attempt have been recovered. Add\n        // them to the collection of recoverable errors. We'll log them in the\n        // commit phase.\n        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n        workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n        // from the first attempt, to preserve the causal sequence.\n\n        if (errorsFromSecondAttempt !== null) {\n          queueRecoverableErrors(errorsFromSecondAttempt);\n        }\n      }\n\n      return exitStatus;\n    }\n\n    function queueRecoverableErrors(errors) {\n      if (workInProgressRootRecoverableErrors === null) {\n        workInProgressRootRecoverableErrors = errors;\n      } else {\n        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n      }\n    }\n\n    function finishConcurrentRender(root, exitStatus, lanes) {\n      switch (exitStatus) {\n        case RootInProgress:\n        case RootFatalErrored:\n          {\n            throw new Error('Root did not complete. This is a bug in React.');\n          }\n        // Flow knows about invariant, so it complains if I add a break\n        // statement, but eslint doesn't know about invariant, so it complains\n        // if I do. eslint-disable-next-line no-fallthrough\n\n        case RootErrored:\n          {\n            // We should have already attempted to retry this tree. If we reached\n            // this point, it errored again. Commit it.\n            commitRoot(root, workInProgressRootRecoverableErrors);\n            break;\n          }\n\n        case RootSuspended:\n          {\n            markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n            // should immediately commit it or wait a bit.\n\n            if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n            !shouldForceFlushFallbacksInDEV()) {\n              // This render only included retries, no updates. Throttle committing\n              // retries so that we don't show too many loading states too quickly.\n              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.\n\n              if (msUntilTimeout > 10) {\n                var nextLanes = getNextLanes(root, NoLanes);\n\n                if (nextLanes !== NoLanes) {\n                  // There's additional work on this root.\n                  break;\n                }\n\n                var suspendedLanes = root.suspendedLanes;\n\n                if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n                  // We should prefer to render the fallback of at the last\n                  // suspended level. Ping the last suspended level to try\n                  // rendering it again.\n                  // FIXME: What if the suspended lanes are Idle? Should not restart.\n                  var eventTime = requestEventTime();\n                  markRootPinged(root, suspendedLanes);\n                  break;\n                } // The render is suspended, it hasn't timed out, and there's no\n                // lower priority work to do. Instead of committing the fallback\n                // immediately, wait for more data to arrive.\n\n\n                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), msUntilTimeout);\n                break;\n              }\n            } // The work expired. Commit immediately.\n\n\n            commitRoot(root, workInProgressRootRecoverableErrors);\n            break;\n          }\n\n        case RootSuspendedWithDelay:\n          {\n            markRootSuspended$1(root, lanes);\n\n            if (includesOnlyTransitions(lanes)) {\n              // This is a transition, so we should exit without committing a\n              // placeholder and without scheduling a timeout. Delay indefinitely\n              // until we receive more data.\n              break;\n            }\n\n            if (!shouldForceFlushFallbacksInDEV()) {\n              // This is not a transition, but we did trigger an avoided state.\n              // Schedule a placeholder to display after a short delay, using the Just\n              // Noticeable Difference.\n              // TODO: Is the JND optimization worth the added complexity? If this is\n              // the only reason we track the event time, then probably not.\n              // Consider removing.\n              var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n              var eventTimeMs = mostRecentEventTime;\n              var timeElapsedMs = now$1() - eventTimeMs;\n\n              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n              if (_msUntilTimeout > 10) {\n                // Instead of committing the fallback immediately, wait for more data\n                // to arrive.\n                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), _msUntilTimeout);\n                break;\n              }\n            } // Commit the placeholder.\n\n\n            commitRoot(root, workInProgressRootRecoverableErrors);\n            break;\n          }\n\n        case RootCompleted:\n          {\n            // The work completed. Ready to commit.\n            commitRoot(root, workInProgressRootRecoverableErrors);\n            break;\n          }\n\n        default:\n          {\n            throw new Error('Unknown root exit status.');\n          }\n      }\n    }\n\n    function isRenderConsistentWithExternalStores(finishedWork) {\n      // Search the rendered tree for external store reads, and check whether the\n      // stores were mutated in a concurrent event. Intentionally using an iterative\n      // loop instead of recursion so we can exit early.\n      var node = finishedWork;\n\n      while (true) {\n        if (node.flags & StoreConsistency) {\n          var updateQueue = node.updateQueue;\n\n          if (updateQueue !== null) {\n            var checks = updateQueue.stores;\n\n            if (checks !== null) {\n              for (var i = 0; i < checks.length; i++) {\n                var check = checks[i];\n                var getSnapshot = check.getSnapshot;\n                var renderedValue = check.value;\n\n                try {\n                  if (!objectIs(getSnapshot(), renderedValue)) {\n                    // Found an inconsistent store.\n                    return false;\n                  }\n                } catch (error) {\n                  // If `getSnapshot` throws, return `false`. This will schedule\n                  // a re-render, and the error will be rethrown during render.\n                  return false;\n                }\n              }\n            }\n          }\n        }\n\n        var child = node.child;\n\n        if (node.subtreeFlags & StoreConsistency && child !== null) {\n          child.return = node;\n          node = child;\n          continue;\n        }\n\n        if (node === finishedWork) {\n          return true;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === finishedWork) {\n            return true;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      } // Flow doesn't know this is unreachable, but eslint does\n      // eslint-disable-next-line no-unreachable\n\n\n      return true;\n    }\n\n    function markRootSuspended$1(root, suspendedLanes) {\n      // When suspending, we should always exclude lanes that were pinged or (more\n      // rarely, since we try to avoid it) updated during the render phase.\n      // TODO: Lol maybe there's a better way to factor this besides this\n      // obnoxiously named function :)\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n      markRootSuspended(root, suspendedLanes);\n    } // This is the entry point for synchronous tasks that don't go\n    // through Scheduler\n\n\n    function performSyncWorkOnRoot(root) {\n      {\n        syncNestedUpdateFlag();\n      }\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      }\n\n      flushPassiveEffects();\n      var lanes = getNextLanes(root, NoLanes);\n\n      if (!includesSomeLane(lanes, SyncLane)) {\n        // There's no remaining sync work left.\n        ensureRootIsScheduled(root, now$1());\n        return null;\n      }\n\n      var exitStatus = renderRootSync(root, lanes);\n\n      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n        // If something threw an error, try rendering one more time. We'll render\n        // synchronously to block concurrent data mutations, and we'll includes\n        // all pending updates are included. If it still fails after the second\n        // attempt, we'll give up and commit the resulting tree.\n        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n        if (errorRetryLanes !== NoLanes) {\n          lanes = errorRetryLanes;\n          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n        }\n      }\n\n      if (exitStatus === RootFatalErrored) {\n        var fatalError = workInProgressRootFatalError;\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended$1(root, lanes);\n        ensureRootIsScheduled(root, now$1());\n        throw fatalError;\n      }\n\n      if (exitStatus === RootDidNotComplete) {\n        throw new Error('Root did not complete. This is a bug in React.');\n      } // We now have a consistent tree. Because this is a sync render, we\n      // will commit it even if something suspended.\n\n\n      var finishedWork = root.current.alternate;\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      commitRoot(root, workInProgressRootRecoverableErrors); // Before exiting, make sure there's a callback scheduled for the next\n      // pending level.\n\n      ensureRootIsScheduled(root, now$1());\n      return null;\n    }\n\n    function flushRoot(root, lanes) {\n      if (lanes !== NoLanes) {\n        markRootEntangled(root, mergeLanes(lanes, SyncLane));\n        ensureRootIsScheduled(root, now$1());\n\n        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n          resetRenderTimer();\n          flushSyncCallbacks();\n        }\n      }\n    }\n\n    function deferredUpdates(fn) {\n      var previousPriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DefaultEventPriority);\n        return fn();\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n      }\n    }\n\n    function batchedUpdates(fn, a) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n\n      try {\n        return fn(a);\n      } finally {\n        executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n        // most batchedUpdates-like method.\n\n        if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n        !ReactCurrentActQueue$1.isBatchingLegacy) {\n          resetRenderTimer();\n          flushSyncCallbacksOnlyInLegacyMode();\n        }\n      }\n    }\n\n    function discreteUpdates(fn, a, b, c, d) {\n      var previousPriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        return fn(a, b, c, d);\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n\n        if (executionContext === NoContext) {\n          resetRenderTimer();\n        }\n      }\n    } // Overload the definition to the two valid signatures.\n    // Warning, this opts-out of checking the function body.\n    // eslint-disable-next-line no-redeclare\n\n\n    function flushSync(fn) {\n      // In legacy mode, we flush pending passive effects at the beginning of the\n      // next event, not at the end of the previous one.\n      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n        flushPassiveEffects();\n      }\n\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var previousPriority = getCurrentUpdatePriority();\n\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n\n        if (fn) {\n          return fn();\n        } else {\n          return undefined;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n        // Note that this will happen even if batchedUpdates is higher up\n        // the stack.\n\n        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n          flushSyncCallbacks();\n        }\n      }\n    }\n\n    function isAlreadyRendering() {\n      // Used by the renderer to print a warning if certain APIs are called from\n      // the wrong context.\n      return (executionContext & (RenderContext | CommitContext)) !== NoContext;\n    }\n\n    function flushControlled(fn) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var previousPriority = getCurrentUpdatePriority();\n\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        fn();\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        executionContext = prevExecutionContext;\n\n        if (executionContext === NoContext) {\n          // Flush the immediate callbacks that were scheduled during this batch\n          resetRenderTimer();\n          flushSyncCallbacks();\n        }\n      }\n    }\n\n    function pushRenderLanes(fiber, lanes) {\n      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n      workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n    }\n\n    function popRenderLanes(fiber) {\n      subtreeRenderLanes = subtreeRenderLanesCursor.current;\n      pop(subtreeRenderLanesCursor, fiber);\n    }\n\n    function prepareFreshStack(root, lanes) {\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      var timeoutHandle = root.timeoutHandle;\n\n      if (timeoutHandle !== noTimeout) {\n        // The root previous suspended and scheduled a timeout to commit a fallback\n        // state. Now that we have additional work, cancel the timeout.\n        root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n        cancelTimeout(timeoutHandle);\n      }\n\n      if (workInProgress !== null) {\n        var interruptedWork = workInProgress.return;\n\n        while (interruptedWork !== null) {\n          var current = interruptedWork.alternate;\n          unwindInterruptedWork(current, interruptedWork);\n          interruptedWork = interruptedWork.return;\n        }\n      }\n\n      workInProgressRoot = root;\n      var rootWorkInProgress = createWorkInProgress(root.current, null);\n      workInProgress = rootWorkInProgress;\n      workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n      workInProgressRootExitStatus = RootInProgress;\n      workInProgressRootFatalError = null;\n      workInProgressRootSkippedLanes = NoLanes;\n      workInProgressRootInterleavedUpdatedLanes = NoLanes;\n      workInProgressRootPingedLanes = NoLanes;\n      workInProgressRootConcurrentErrors = null;\n      workInProgressRootRecoverableErrors = null;\n      enqueueInterleavedUpdates();\n      {\n        ReactStrictModeWarnings.discardPendingWarnings();\n      }\n      return rootWorkInProgress;\n    }\n\n    function handleError(root, thrownValue) {\n      do {\n        var erroredWork = workInProgress;\n\n        try {\n          // Reset module-level state that was set during the render phase.\n          resetContextDependencies();\n          resetHooksAfterThrow();\n          resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n          // separate issue. Write a regression test using string refs.\n\n          ReactCurrentOwner$2.current = null;\n\n          if (erroredWork === null || erroredWork.return === null) {\n            // Expected to be working on a non-root fiber. This is a fatal error\n            // because there's no ancestor that can handle it; the root is\n            // supposed to capture all errors that weren't caught by an error\n            // boundary.\n            workInProgressRootExitStatus = RootFatalErrored;\n            workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n            // sibling, or the parent if there are no siblings. But since the root\n            // has no siblings nor a parent, we set it to null. Usually this is\n            // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n            // intentionally not calling those, we need set it here.\n            // TODO: Consider calling `unwindWork` to pop the contexts.\n\n            workInProgress = null;\n            return;\n          }\n\n          if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n            // Record the time spent rendering before an error was thrown. This\n            // avoids inaccurate Profiler durations in the case of a\n            // suspended render.\n            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n          }\n\n          if (enableSchedulingProfiler) {\n            markComponentRenderStopped();\n\n            if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n              var wakeable = thrownValue;\n              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n            } else {\n              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n            }\n          }\n\n          throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n          completeUnitOfWork(erroredWork);\n        } catch (yetAnotherThrownValue) {\n          // Something in the return path also threw.\n          thrownValue = yetAnotherThrownValue;\n\n          if (workInProgress === erroredWork && erroredWork !== null) {\n            // If this boundary has already errored, then we had trouble processing\n            // the error. Bubble it to the next boundary.\n            erroredWork = erroredWork.return;\n            workInProgress = erroredWork;\n          } else {\n            erroredWork = workInProgress;\n          }\n\n          continue;\n        } // Return to the normal work loop.\n\n\n        return;\n      } while (true);\n    }\n\n    function pushDispatcher() {\n      var prevDispatcher = ReactCurrentDispatcher$2.current;\n      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n      if (prevDispatcher === null) {\n        // The React isomorphic package does not include a default dispatcher.\n        // Instead the first renderer will lazily attach one, in order to give\n        // nicer error messages.\n        return ContextOnlyDispatcher;\n      } else {\n        return prevDispatcher;\n      }\n    }\n\n    function popDispatcher(prevDispatcher) {\n      ReactCurrentDispatcher$2.current = prevDispatcher;\n    }\n\n    function markCommitTimeOfFallback() {\n      globalMostRecentFallbackTime = now$1();\n    }\n\n    function markSkippedUpdateLanes(lane) {\n      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n    }\n\n    function renderDidSuspend() {\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootSuspended;\n      }\n    }\n\n    function renderDidSuspendDelayIfPossible() {\n      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n        workInProgressRootExitStatus = RootSuspendedWithDelay;\n      } // Check if there are updates that we skipped tree that might have unblocked\n      // this render.\n\n\n      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n        // Mark the current render as suspended so that we switch to working on\n        // the updates that were skipped. Usually we only suspend at the end of\n        // the render phase.\n        // TODO: We should probably always mark the root as suspended immediately\n        // (inside this function), since by suspending at the end of the render\n        // phase introduces a potential mistake where we suspend lanes that were\n        // pinged or updated while we were rendering.\n        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n      }\n    }\n\n    function renderDidError(error) {\n      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n        workInProgressRootExitStatus = RootErrored;\n      }\n\n      if (workInProgressRootConcurrentErrors === null) {\n        workInProgressRootConcurrentErrors = [error];\n      } else {\n        workInProgressRootConcurrentErrors.push(error);\n      }\n    } // Called during render to determine if anything has suspended.\n    // Returns false if we're not sure.\n\n\n    function renderHasNotSuspendedYet() {\n      // If something errored or completed, we can't really be sure,\n      // so those are false.\n      return workInProgressRootExitStatus === RootInProgress;\n    }\n\n    function renderRootSync(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n            // If we bailout on this work, we'll move them back (like above).\n            // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n            // That way we can keep the current update and future updates separate.\n\n\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n        prepareFreshStack(root, lanes);\n      }\n\n      {\n        markRenderStarted(lanes);\n      }\n\n      do {\n        try {\n          workLoopSync();\n          break;\n        } catch (thrownValue) {\n          handleError(root, thrownValue);\n        }\n      } while (true);\n\n      resetContextDependencies();\n      executionContext = prevExecutionContext;\n      popDispatcher(prevDispatcher);\n\n      if (workInProgress !== null) {\n        // This is a sync render, so we should have finished the whole tree.\n        throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n      }\n\n      {\n        markRenderStopped();\n      } // Set this to null to indicate there's no in-progress render.\n\n      workInProgressRoot = null;\n      workInProgressRootRenderLanes = NoLanes;\n      return workInProgressRootExitStatus;\n    } // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n    /** @noinline */\n\n\n    function workLoopSync() {\n      // Already timed out, so perform work without checking if we need to yield.\n      while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n\n    function renderRootConcurrent(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n            // If we bailout on this work, we'll move them back (like above).\n            // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n            // That way we can keep the current update and future updates separate.\n\n\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n        resetRenderTimer();\n        prepareFreshStack(root, lanes);\n      }\n\n      {\n        markRenderStarted(lanes);\n      }\n\n      do {\n        try {\n          workLoopConcurrent();\n          break;\n        } catch (thrownValue) {\n          handleError(root, thrownValue);\n        }\n      } while (true);\n\n      resetContextDependencies();\n      popDispatcher(prevDispatcher);\n      executionContext = prevExecutionContext;\n\n      if (workInProgress !== null) {\n        // Still work remaining.\n        {\n          markRenderYielded();\n        }\n        return RootInProgress;\n      } else {\n        // Completed the tree.\n        {\n          markRenderStopped();\n        } // Set this to null to indicate there's no in-progress render.\n\n        workInProgressRoot = null;\n        workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n        return workInProgressRootExitStatus;\n      }\n    }\n    /** @noinline */\n\n\n    function workLoopConcurrent() {\n      // Perform work until Scheduler asks us to yield\n      while (workInProgress !== null && !shouldYield()) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n\n    function performUnitOfWork(unitOfWork) {\n      // The current, flushed, state of this fiber is the alternate. Ideally\n      // nothing should rely on this, but relying on it here means that we don't\n      // need an additional field on the work in progress.\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n\n      if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n        startProfilerTimer(unitOfWork);\n        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } else {\n        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n      }\n\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n      if (next === null) {\n        // If this doesn't spawn new work, complete the current work.\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n\n      ReactCurrentOwner$2.current = null;\n    }\n\n    function completeUnitOfWork(unitOfWork) {\n      // Attempt to complete the current unit of work, then move to the next\n      // sibling. If there are no more siblings, return to the parent fiber.\n      var completedWork = unitOfWork;\n\n      do {\n        // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n        var current = completedWork.alternate;\n        var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n        if ((completedWork.flags & Incomplete) === NoFlags) {\n          setCurrentFiber(completedWork);\n          var next = void 0;\n\n          if ((completedWork.mode & ProfileMode) === NoMode) {\n            next = completeWork(current, completedWork, subtreeRenderLanes);\n          } else {\n            startProfilerTimer(completedWork);\n            next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n          }\n\n          resetCurrentFiber();\n\n          if (next !== null) {\n            // Completing this fiber spawned new work. Work on that next.\n            workInProgress = next;\n            return;\n          }\n        } else {\n          // This fiber did not complete because something threw. Pop values off\n          // the stack without entering the complete phase. If this is a boundary,\n          // capture values if possible.\n          var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n          if (_next !== null) {\n            // If completing this work spawned new work, do that next. We'll come\n            // back here again.\n            // Since we're restarting, remove anything that is not a host effect\n            // from the effect tag.\n            _next.flags &= HostEffectMask;\n            workInProgress = _next;\n            return;\n          }\n\n          if ((completedWork.mode & ProfileMode) !== NoMode) {\n            // Record the render duration for the fiber that errored.\n            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n            var actualDuration = completedWork.actualDuration;\n            var child = completedWork.child;\n\n            while (child !== null) {\n              actualDuration += child.actualDuration;\n              child = child.sibling;\n            }\n\n            completedWork.actualDuration = actualDuration;\n          }\n\n          if (returnFiber !== null) {\n            // Mark the parent fiber as incomplete and clear its subtree flags.\n            returnFiber.flags |= Incomplete;\n            returnFiber.subtreeFlags = NoFlags;\n            returnFiber.deletions = null;\n          } else {\n            // We've unwound all the way to the root.\n            workInProgressRootExitStatus = RootDidNotComplete;\n            workInProgress = null;\n            return;\n          }\n        }\n\n        var siblingFiber = completedWork.sibling;\n\n        if (siblingFiber !== null) {\n          // If there is more work to do in this returnFiber, do that next.\n          workInProgress = siblingFiber;\n          return;\n        } // Otherwise, return to the parent\n\n\n        completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n        workInProgress = completedWork;\n      } while (completedWork !== null); // We've reached the root.\n\n\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootCompleted;\n      }\n    }\n\n    function commitRoot(root, recoverableErrors) {\n      // TODO: This no longer makes any sense. We already wrap the mutation and\n      // layout phases. Should be able to remove.\n      var previousUpdateLanePriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        commitRootImpl(root, recoverableErrors, previousUpdateLanePriority);\n      } finally {\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        setCurrentUpdatePriority(previousUpdateLanePriority);\n      }\n\n      return null;\n    }\n\n    function commitRootImpl(root, recoverableErrors, renderPriorityLevel) {\n      do {\n        // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n        // means `flushPassiveEffects` will sometimes result in additional\n        // passive effects. So we need to keep flushing in a loop until there are\n        // no more pending effects.\n        // TODO: Might be better if `flushPassiveEffects` did not automatically\n        // flush synchronous work at the end, to avoid factoring hazards like this.\n        flushPassiveEffects();\n      } while (rootWithPendingPassiveEffects !== null);\n\n      flushRenderPhaseStrictModeWarningsInDEV();\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      }\n\n      var finishedWork = root.finishedWork;\n      var lanes = root.finishedLanes;\n      {\n        markCommitStarted(lanes);\n      }\n\n      if (finishedWork === null) {\n        {\n          markCommitStopped();\n        }\n        return null;\n      } else {\n        {\n          if (lanes === NoLanes) {\n            error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n          }\n        }\n      }\n\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n\n      if (finishedWork === root.current) {\n        throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n      } // commitRoot never returns a continuation; it always finishes synchronously.\n      // So we can clear these now to allow a new callback to be scheduled.\n\n\n      root.callbackNode = null;\n      root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n      // pending time is whatever is left on the root fiber.\n\n      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n      markRootFinished(root, remainingLanes);\n\n      if (root === workInProgressRoot) {\n        // We can reset these now that they are finished.\n        workInProgressRoot = null;\n        workInProgress = null;\n        workInProgressRootRenderLanes = NoLanes;\n      } // If there are pending passive effects, schedule a callback to process them.\n      // Do this as early as possible, so it is queued before anything else that\n      // might get scheduled in the commit phase. (See #16714.)\n      // TODO: Delete all other places that schedule the passive effect callback\n      // They're redundant.\n\n\n      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback$1(NormalPriority, function () {\n            flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n            // *after* passive effects fire to avoid freeing a cache pool that may\n            // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n            return null;\n          });\n        }\n      } // Check if there are any effects in the whole tree.\n      // TODO: This is left over from the effect list implementation, where we had\n      // to check for the existence of `firstEffect` to satisfy Flow. I think the\n      // only other reason this optimization exists is because it affects profiling.\n      // Reconsider whether this is necessary.\n\n\n      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n      if (subtreeHasEffects || rootHasEffect) {\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        ReactCurrentBatchConfig$2.transition = null;\n        var previousPriority = getCurrentUpdatePriority();\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        var prevExecutionContext = executionContext;\n        executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n        ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n        // of the effect list for each phase: all mutation effects come before all\n        // layout effects, and so on.\n        // The first phase a \"before mutation\" phase. We use this phase to read the\n        // state of the host tree right before we mutate it. This is where\n        // getSnapshotBeforeUpdate is called.\n\n        var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n        {\n          // Mark the current commit time to be shared by all Profilers in this\n          // batch. This enables them to be grouped later.\n          recordCommitTime();\n        }\n        commitMutationEffects(root, finishedWork, lanes);\n        resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n        // the mutation phase, so that the previous tree is still current during\n        // componentWillUnmount, but before the layout phase, so that the finished\n        // work is current during componentDidMount/Update.\n\n        root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n        {\n          markLayoutEffectsStarted(lanes);\n        }\n        commitLayoutEffects(finishedWork, root, lanes);\n        {\n          markLayoutEffectsStopped();\n        } // opportunity to paint.\n\n        requestPaint();\n        executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n      } else {\n        // No effects.\n        root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n        // no effects.\n        // TODO: Maybe there's a better way to report this.\n\n        {\n          recordCommitTime();\n        }\n      }\n\n      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n      if (rootDoesHavePassiveEffects) {\n        // This commit has passive effects. Stash a reference to them. But don't\n        // schedule a callback until after flushing layout work.\n        rootDoesHavePassiveEffects = false;\n        rootWithPendingPassiveEffects = root;\n        pendingPassiveEffectsLanes = lanes;\n      } // Read this again, since an effect might have updated it\n\n\n      remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n      // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n      // is to detect whether something might have called setState inside\n      // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n      // inside `componentDidCatch` is itself flawed — that's why we recommend\n      // `getDerivedStateFromError` instead. However, it could be improved by\n      // checking if remainingLanes includes Sync work, instead of whether there's\n      // any work remaining at all (which would also include stuff like Suspense\n      // retries or transitions). It's been like this for a while, though, so fixing\n      // it probably isn't that urgent.\n\n      if (remainingLanes === NoLanes) {\n        // If there's no remaining work, we can clear the set of already failed\n        // error boundaries.\n        legacyErrorBoundariesThatAlreadyFailed = null;\n      }\n\n      {\n        if (!rootDidHavePassiveEffects) {\n          commitDoubleInvokeEffectsInDEV(root.current, false);\n        }\n      }\n      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n      {\n        if (isDevToolsPresent) {\n          root.memoizedUpdaters.clear();\n        }\n      }\n      {\n        onCommitRoot$1();\n      } // Always call this before exiting `commitRoot`, to ensure that any\n      // additional work on this root is scheduled.\n\n      ensureRootIsScheduled(root, now$1());\n\n      if (recoverableErrors !== null) {\n        // There were errors during this render, but recovered from them without\n        // needing to surface it to the UI. We log them here.\n        var onRecoverableError = root.onRecoverableError;\n\n        for (var i = 0; i < recoverableErrors.length; i++) {\n          var recoverableError = recoverableErrors[i];\n          onRecoverableError(recoverableError);\n        }\n      }\n\n      if (hasUncaughtError) {\n        hasUncaughtError = false;\n        var error$1 = firstUncaughtError;\n        firstUncaughtError = null;\n        throw error$1;\n      } // If the passive effects are the result of a discrete render, flush them\n      // synchronously at the end of the current task so that the result is\n      // immediately observable. Otherwise, we assume that they are not\n      // order-dependent and do not need to be observed by external systems, so we\n      // can wait until after paint.\n      // TODO: We can optimize this by not scheduling the callback earlier. Since we\n      // currently schedule the callback in multiple places, will wait until those\n      // are consolidated.\n\n\n      if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n        flushPassiveEffects();\n      } // Read this again, since a passive effect might have updated it\n\n\n      remainingLanes = root.pendingLanes;\n\n      if (includesSomeLane(remainingLanes, SyncLane)) {\n        {\n          markNestedUpdateScheduled();\n        } // Count the number of times the root synchronously re-renders without\n        // finishing. If there are too many, it indicates an infinite update loop.\n\n        if (root === rootWithNestedUpdates) {\n          nestedUpdateCount++;\n        } else {\n          nestedUpdateCount = 0;\n          rootWithNestedUpdates = root;\n        }\n      } else {\n        nestedUpdateCount = 0;\n      } // If layout work was scheduled, flush it now.\n\n\n      flushSyncCallbacks();\n      {\n        markCommitStopped();\n      }\n      return null;\n    }\n\n    function flushPassiveEffects() {\n      // Returns whether passive effects were flushed.\n      // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n      // probably just combine the two functions. I believe they were only separate\n      // in the first place because we used to wrap it with\n      // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n      // priority within React itself, so we can mutate the variable directly.\n      if (rootWithPendingPassiveEffects !== null) {\n        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        var previousPriority = getCurrentUpdatePriority();\n\n        try {\n          ReactCurrentBatchConfig$2.transition = null;\n          setCurrentUpdatePriority(priority);\n          return flushPassiveEffectsImpl();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n        }\n      }\n\n      return false;\n    }\n\n    function enqueuePendingPassiveProfilerEffect(fiber) {\n      {\n        pendingPassiveProfilerEffects.push(fiber);\n\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback$1(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n    }\n\n    function flushPassiveEffectsImpl() {\n      if (rootWithPendingPassiveEffects === null) {\n        return false;\n      }\n\n      var root = rootWithPendingPassiveEffects;\n      var lanes = pendingPassiveEffectsLanes;\n      rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n      // Figure out why and fix it. It's not causing any known issues (probably\n      // because it's only used for profiling), but it's a refactor hazard.\n\n      pendingPassiveEffectsLanes = NoLanes;\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Cannot flush passive effects while already rendering.');\n      }\n\n      {\n        markPassiveEffectsStarted(lanes);\n      }\n      var prevExecutionContext = executionContext;\n      executionContext |= CommitContext;\n      commitPassiveUnmountEffects(root.current);\n      commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects\n\n      {\n        var profilerEffects = pendingPassiveProfilerEffects;\n        pendingPassiveProfilerEffects = [];\n\n        for (var i = 0; i < profilerEffects.length; i++) {\n          var _fiber = profilerEffects[i];\n          commitPassiveEffectDurations(root, _fiber);\n        }\n      }\n      {\n        markPassiveEffectsStopped();\n      }\n      {\n        commitDoubleInvokeEffectsInDEV(root.current, true);\n      }\n      executionContext = prevExecutionContext;\n      flushSyncCallbacks(); // If additional passive effects were scheduled, increment a counter. If this\n      // exceeds the limit, we'll fire a warning.\n\n      nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1; // TODO: Move to commitPassiveMountEffects\n\n      onPostCommitRoot(root);\n      {\n        var stateNode = root.current.stateNode;\n        stateNode.effectDuration = 0;\n        stateNode.passiveEffectDuration = 0;\n      }\n      return true;\n    }\n\n    function isAlreadyFailedLegacyErrorBoundary(instance) {\n      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n    }\n\n    function markLegacyErrorBoundaryAsFailed(instance) {\n      if (legacyErrorBoundariesThatAlreadyFailed === null) {\n        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n      } else {\n        legacyErrorBoundariesThatAlreadyFailed.add(instance);\n      }\n    }\n\n    function prepareToThrowUncaughtError(error) {\n      if (!hasUncaughtError) {\n        hasUncaughtError = true;\n        firstUncaughtError = error;\n      }\n    }\n\n    var onUncaughtError = prepareToThrowUncaughtError;\n\n    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n      var errorInfo = createCapturedValue(error, sourceFiber);\n      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n      enqueueUpdate(rootFiber, update);\n      var eventTime = requestEventTime();\n      var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);\n\n      if (root !== null) {\n        markRootUpdated(root, SyncLane, eventTime);\n        ensureRootIsScheduled(root, eventTime);\n      }\n    }\n\n    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n      if (sourceFiber.tag === HostRoot) {\n        // Error was thrown at the root. There is no parent, so the root\n        // itself should capture it.\n        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n        return;\n      }\n\n      var fiber = null;\n      {\n        fiber = nearestMountedAncestor;\n      }\n\n      while (fiber !== null) {\n        if (fiber.tag === HostRoot) {\n          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n          return;\n        } else if (fiber.tag === ClassComponent) {\n          var ctor = fiber.type;\n          var instance = fiber.stateNode;\n\n          if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n            var errorInfo = createCapturedValue(error$1, sourceFiber);\n            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n            enqueueUpdate(fiber, update);\n            var eventTime = requestEventTime();\n            var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);\n\n            if (root !== null) {\n              markRootUpdated(root, SyncLane, eventTime);\n              ensureRootIsScheduled(root, eventTime);\n            }\n\n            return;\n          }\n        }\n\n        fiber = fiber.return;\n      }\n\n      {\n        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n        // will fire for errors that are thrown by destroy functions inside deleted\n        // trees. What it should instead do is propagate the error to the parent of\n        // the deleted tree. In the meantime, do not add this warning to the\n        // allowlist; this is only for our internal use.\n        error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n      }\n    }\n\n    function pingSuspendedRoot(root, wakeable, pingedLanes) {\n      var pingCache = root.pingCache;\n\n      if (pingCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        pingCache.delete(wakeable);\n      }\n\n      var eventTime = requestEventTime();\n      markRootPinged(root, pingedLanes);\n      warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n      if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n        // Received a ping at the same priority level at which we're currently\n        // rendering. We might want to restart this render. This should mirror\n        // the logic of whether or not a root suspends once it completes.\n        // TODO: If we're rendering sync either due to Sync, Batched or expired,\n        // we should probably never restart.\n        // If we're suspended with delay, or if it's a retry, we'll always suspend\n        // so we can always restart.\n        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n          // Restart from the root.\n          prepareFreshStack(root, NoLanes);\n        } else {\n          // Even though we can't restart right now, we might get an\n          // opportunity later. So we mark this render as having a ping.\n          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n        }\n      }\n\n      ensureRootIsScheduled(root, eventTime);\n    }\n\n    function retryTimedOutBoundary(boundaryFiber, retryLane) {\n      // The boundary fiber (a Suspense component or SuspenseList component)\n      // previously was rendered in its fallback state. One of the promises that\n      // suspended it has resolved, which means at least part of the tree was\n      // likely unblocked. Try rendering again, at a new lanes.\n      if (retryLane === NoLane) {\n        // TODO: Assign this to `suspenseState.retryLane`? to avoid\n        // unnecessary entanglement?\n        retryLane = requestRetryLane(boundaryFiber);\n      } // TODO: Special case idle priority?\n\n\n      var eventTime = requestEventTime();\n      var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n\n      if (root !== null) {\n        markRootUpdated(root, retryLane, eventTime);\n        ensureRootIsScheduled(root, eventTime);\n      }\n    }\n\n    function retryDehydratedSuspenseBoundary(boundaryFiber) {\n      var suspenseState = boundaryFiber.memoizedState;\n      var retryLane = NoLane;\n\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n\n    function resolveRetryWakeable(boundaryFiber, wakeable) {\n      var retryLane = NoLane; // Default\n\n      var retryCache;\n      {\n        switch (boundaryFiber.tag) {\n          case SuspenseComponent:\n            retryCache = boundaryFiber.stateNode;\n            var suspenseState = boundaryFiber.memoizedState;\n\n            if (suspenseState !== null) {\n              retryLane = suspenseState.retryLane;\n            }\n\n            break;\n\n          case SuspenseListComponent:\n            retryCache = boundaryFiber.stateNode;\n            break;\n\n          default:\n            throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n        }\n      }\n\n      if (retryCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        retryCache.delete(wakeable);\n      }\n\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    } // Computes the next Just Noticeable Difference (JND) boundary.\n    // The theory is that a person can't tell the difference between small differences in time.\n    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n    // difference in the experience. However, waiting for longer might mean that we can avoid\n    // showing an intermediate loading state. The longer we have already waited, the harder it\n    // is to tell small differences in time. Therefore, the longer we've already waited,\n    // the longer we can wait additionally. At some point we have to give up though.\n    // We pick a train model where the next boundary commits at a consistent schedule.\n    // These particular numbers are vague estimates. We expect to adjust them based on research.\n\n\n    function jnd(timeElapsed) {\n      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n    }\n\n    function checkForNestedUpdates() {\n      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n        nestedUpdateCount = 0;\n        rootWithNestedUpdates = null;\n        throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n      }\n\n      {\n        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n          nestedPassiveUpdateCount = 0;\n          error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n        }\n      }\n    }\n\n    function flushRenderPhaseStrictModeWarningsInDEV() {\n      {\n        ReactStrictModeWarnings.flushLegacyContextWarning();\n        {\n          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n        }\n      }\n    }\n\n    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n      {\n        // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n        // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n        // Maybe not a big deal since this is DEV only behavior.\n        setCurrentFiber(fiber);\n        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n        if (hasPassiveEffects) {\n          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n        }\n\n        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n        if (hasPassiveEffects) {\n          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n        }\n\n        resetCurrentFiber();\n      }\n    }\n\n    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        var current = firstChild;\n        var subtreeRoot = null;\n\n        while (current !== null) {\n          var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n          if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n            current = current.child;\n          } else {\n            if ((current.flags & fiberFlags) !== NoFlags) {\n              invokeEffectFn(current);\n            }\n\n            if (current.sibling !== null) {\n              current = current.sibling;\n            } else {\n              current = subtreeRoot = current.return;\n            }\n          }\n        }\n      }\n    }\n\n    var didWarnStateUpdateForNotYetMountedComponent = null;\n\n    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n      {\n        if ((executionContext & RenderContext) !== NoContext) {\n          // We let the other warning about render phase updates deal with this one.\n          return;\n        }\n\n        if (!(fiber.mode & ConcurrentMode)) {\n          return;\n        }\n\n        var tag = fiber.tag;\n\n        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n          // Only warn for user-defined components, not internal ones like Suspense.\n          return;\n        } // We show the whole stack but dedupe on the top component's name because\n        // the problematic code almost always lies inside that component.\n\n\n        var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n        if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n            return;\n          }\n\n          didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n        } else {\n          didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n        }\n\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(fiber);\n          error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n        } finally {\n          if (previousFiber) {\n            setCurrentFiber(fiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n\n    var beginWork$1;\n    {\n      var dummyFiber = null;\n\n      beginWork$1 = function (current, unitOfWork, lanes) {\n        // If a component throws an error, we replay it again in a synchronously\n        // dispatched event, so that the debugger will treat it as an uncaught\n        // error See ReactErrorUtils for more information.\n        // Before entering the begin phase, copy the work-in-progress onto a dummy\n        // fiber. If beginWork throws, we'll use this to reset the state.\n        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n\n        try {\n          return beginWork(current, unitOfWork, lanes);\n        } catch (originalError) {\n          if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n            // Don't replay promises. Treat everything else like an error.\n            throw originalError;\n          } // Keep this code in sync with handleError; any changes here must have\n          // corresponding changes there.\n\n\n          resetContextDependencies();\n          resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n          // same fiber again.\n          // Unwind the failed stack frame\n\n          unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n          if (unitOfWork.mode & ProfileMode) {\n            // Reset the profiler timer.\n            startProfilerTimer(unitOfWork);\n          } // Run beginWork again.\n\n\n          invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n\n          if (hasCaughtError()) {\n            var replayError = clearCaughtError();\n\n            if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n              // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n              originalError._suppressLogging = true;\n            }\n          } // We always throw the original error in case the second render pass is not idempotent.\n          // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n\n          throw originalError;\n        }\n      };\n    }\n    var didWarnAboutUpdateInRender = false;\n    var didWarnAboutUpdateInRenderForAnotherComponent;\n    {\n      didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n    }\n\n    function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n      {\n        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n                var dedupeKey = renderingComponentName;\n\n                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                  var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n                  error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n                }\n\n                break;\n              }\n\n            case ClassComponent:\n              {\n                if (!didWarnAboutUpdateInRender) {\n                  error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n                  didWarnAboutUpdateInRender = true;\n                }\n\n                break;\n              }\n          }\n        }\n      }\n    }\n\n    function restorePendingUpdaters(root, lanes) {\n      {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n          memoizedUpdaters.forEach(function (schedulingFiber) {\n            addFiberToLanesMap(root, schedulingFiber, lanes);\n          }); // This function intentionally does not clear memoized updaters.\n          // Those may still be relevant to the current commit\n          // and a future one (e.g. Suspense).\n        }\n      }\n    }\n\n    var fakeActCallbackNode = {};\n\n    function scheduleCallback$1(priorityLevel, callback) {\n      {\n        // If we're currently inside an `act` scope, bypass Scheduler and push to\n        // the `act` queue instead.\n        var actQueue = ReactCurrentActQueue$1.current;\n\n        if (actQueue !== null) {\n          actQueue.push(callback);\n          return fakeActCallbackNode;\n        } else {\n          return scheduleCallback(priorityLevel, callback);\n        }\n      }\n    }\n\n    function cancelCallback$1(callbackNode) {\n      if (callbackNode === fakeActCallbackNode) {\n        return;\n      } // In production, always call Scheduler. This function will be stripped out.\n\n\n      return cancelCallback(callbackNode);\n    }\n\n    function shouldForceFlushFallbacksInDEV() {\n      // Never force flush in production. This function should get stripped out.\n      return ReactCurrentActQueue$1.current !== null;\n    }\n\n    function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n      {\n        if (fiber.mode & ConcurrentMode) {\n          if (!isConcurrentActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n        } else {\n          // Legacy mode has additional cases where we suppress a warning.\n          if (!isLegacyActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n\n          if (executionContext !== NoContext) {\n            // Legacy mode doesn't warn if the update is batched, i.e.\n            // batchedUpdates or flushSync.\n            return;\n          }\n\n          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n            // For backwards compatibility with pre-hooks code, legacy mode only\n            // warns for updates that originate from a hook.\n            return;\n          }\n        }\n\n        if (ReactCurrentActQueue$1.current === null) {\n          var previousFiber = current;\n\n          try {\n            setCurrentFiber(fiber);\n            error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n          } finally {\n            if (previousFiber) {\n              setCurrentFiber(fiber);\n            } else {\n              resetCurrentFiber();\n            }\n          }\n        }\n      }\n    }\n\n    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n      {\n        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n          error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n        }\n      }\n    }\n    /* eslint-disable react-internal/prod-error-codes */\n\n\n    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\n    var failedBoundaries = null;\n\n    var setRefreshHandler = function (handler) {\n      {\n        resolveFamily = handler;\n      }\n    };\n\n    function resolveFunctionForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n\n        var family = resolveFamily(type);\n\n        if (family === undefined) {\n          return type;\n        } // Use the latest known implementation.\n\n\n        return family.current;\n      }\n    }\n\n    function resolveClassForHotReloading(type) {\n      // No implementation differences.\n      return resolveFunctionForHotReloading(type);\n    }\n\n    function resolveForwardRefForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n\n        var family = resolveFamily(type);\n\n        if (family === undefined) {\n          // Check if we're dealing with a real forwardRef. Don't want to crash early.\n          if (type !== null && type !== undefined && typeof type.render === 'function') {\n            // ForwardRef is special because its resolved .type is an object,\n            // but it's possible that we only have its inner render function in the map.\n            // If that inner render function is different, we'll build a new forwardRef type.\n            var currentRender = resolveFunctionForHotReloading(type.render);\n\n            if (type.render !== currentRender) {\n              var syntheticType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: currentRender\n              };\n\n              if (type.displayName !== undefined) {\n                syntheticType.displayName = type.displayName;\n              }\n\n              return syntheticType;\n            }\n          }\n\n          return type;\n        } // Use the latest known implementation.\n\n\n        return family.current;\n      }\n    }\n\n    function isCompatibleFamilyForHotReloading(fiber, element) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return false;\n        }\n\n        var prevType = fiber.elementType;\n        var nextType = element.type; // If we got here, we know types aren't === equal.\n\n        var needsCompareFamilies = false;\n        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n        switch (fiber.tag) {\n          case ClassComponent:\n            {\n              if (typeof nextType === 'function') {\n                needsCompareFamilies = true;\n              }\n\n              break;\n            }\n\n          case FunctionComponent:\n            {\n              if (typeof nextType === 'function') {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                // We don't know the inner type yet.\n                // We're going to assume that the lazy inner type is stable,\n                // and so it is sufficient to avoid reconciling it away.\n                // We're not going to unwrap or actually use the new lazy type.\n                needsCompareFamilies = true;\n              }\n\n              break;\n            }\n\n          case ForwardRef:\n            {\n              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n\n              break;\n            }\n\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              if ($$typeofNextType === REACT_MEMO_TYPE) {\n                // TODO: if it was but can no longer be simple,\n                // we shouldn't set this.\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n\n              break;\n            }\n\n          default:\n            return false;\n        } // Check if both types have a family and it's the same one.\n\n\n        if (needsCompareFamilies) {\n          // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n          // This means both of them need to be registered to preserve state.\n          // If we unwrapped and compared the inner types for wrappers instead,\n          // then we would risk falsely saying two separate memo(Foo)\n          // calls are equivalent because they wrap the same Foo function.\n          var prevFamily = resolveFamily(prevType);\n\n          if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }\n\n    function markFailedErrorBoundaryForHotReloading(fiber) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n\n        if (typeof WeakSet !== 'function') {\n          return;\n        }\n\n        if (failedBoundaries === null) {\n          failedBoundaries = new WeakSet();\n        }\n\n        failedBoundaries.add(fiber);\n      }\n    }\n\n    var scheduleRefresh = function (root, update) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n\n        var staleFamilies = update.staleFamilies,\n            updatedFamilies = update.updatedFamilies;\n        flushPassiveEffects();\n        flushSync(function () {\n          scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n        });\n      }\n    };\n\n    var scheduleRoot = function (root, element) {\n      {\n        if (root.context !== emptyContextObject) {\n          // Super edge case: root has a legacy _renderSubtree context\n          // but we don't know the parentComponent so we can't pass it.\n          // Just ignore. We'll delete this with _renderSubtree code path later.\n          return;\n        }\n\n        flushPassiveEffects();\n        flushSync(function () {\n          updateContainer(element, root, null, null);\n        });\n      }\n    };\n\n    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n      {\n        var alternate = fiber.alternate,\n            child = fiber.child,\n            sibling = fiber.sibling,\n            tag = fiber.tag,\n            type = fiber.type;\n        var candidateType = null;\n\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n\n        if (resolveFamily === null) {\n          throw new Error('Expected resolveFamily to be set during hot reload.');\n        }\n\n        var needsRender = false;\n        var needsRemount = false;\n\n        if (candidateType !== null) {\n          var family = resolveFamily(candidateType);\n\n          if (family !== undefined) {\n            if (staleFamilies.has(family)) {\n              needsRemount = true;\n            } else if (updatedFamilies.has(family)) {\n              if (tag === ClassComponent) {\n                needsRemount = true;\n              } else {\n                needsRender = true;\n              }\n            }\n          }\n        }\n\n        if (failedBoundaries !== null) {\n          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n            needsRemount = true;\n          }\n        }\n\n        if (needsRemount) {\n          fiber._debugNeedsRemount = true;\n        }\n\n        if (needsRemount || needsRender) {\n          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n\n        if (child !== null && !needsRemount) {\n          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n        }\n\n        if (sibling !== null) {\n          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n        }\n      }\n    }\n\n    var findHostInstancesForRefresh = function (root, families) {\n      {\n        var hostInstances = new Set();\n        var types = new Set(families.map(function (family) {\n          return family.current;\n        }));\n        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n        return hostInstances;\n      }\n    };\n\n    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n      {\n        var child = fiber.child,\n            sibling = fiber.sibling,\n            tag = fiber.tag,\n            type = fiber.type;\n        var candidateType = null;\n\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n\n        var didMatch = false;\n\n        if (candidateType !== null) {\n          if (types.has(candidateType)) {\n            didMatch = true;\n          }\n        }\n\n        if (didMatch) {\n          // We have a match. This only drills down to the closest host components.\n          // There's no need to search deeper because for the purpose of giving\n          // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n          findHostInstancesForFiberShallowly(fiber, hostInstances);\n        } else {\n          // If there's no match, maybe there will be one further down in the child tree.\n          if (child !== null) {\n            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n          }\n        }\n\n        if (sibling !== null) {\n          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n        }\n      }\n    }\n\n    function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n        if (foundHostInstances) {\n          return;\n        } // If we didn't find any host children, fallback to closest host parent.\n\n\n        var node = fiber;\n\n        while (true) {\n          switch (node.tag) {\n            case HostComponent:\n              hostInstances.add(node.stateNode);\n              return;\n\n            case HostPortal:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n\n            case HostRoot:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n          }\n\n          if (node.return === null) {\n            throw new Error('Expected to reach root first.');\n          }\n\n          node = node.return;\n        }\n      }\n    }\n\n    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var node = fiber;\n        var foundHostInstances = false;\n\n        while (true) {\n          if (node.tag === HostComponent) {\n            // We got a match.\n            foundHostInstances = true;\n            hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === fiber) {\n            return foundHostInstances;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === fiber) {\n              return foundHostInstances;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n      return false;\n    }\n\n    var hasBadMapPolyfill;\n    {\n      hasBadMapPolyfill = false;\n\n      try {\n        var nonExtensibleObject = Object.preventExtensions({});\n        /* eslint-disable no-new */\n\n        new Map([[nonExtensibleObject, null]]);\n        new Set([nonExtensibleObject]);\n        /* eslint-enable no-new */\n      } catch (e) {\n        // TODO: Consider warning about bad polyfills\n        hasBadMapPolyfill = true;\n      }\n    }\n\n    function FiberNode(tag, pendingProps, key, mode) {\n      // Instance\n      this.tag = tag;\n      this.key = key;\n      this.elementType = null;\n      this.type = null;\n      this.stateNode = null; // Fiber\n\n      this.return = null;\n      this.child = null;\n      this.sibling = null;\n      this.index = 0;\n      this.ref = null;\n      this.pendingProps = pendingProps;\n      this.memoizedProps = null;\n      this.updateQueue = null;\n      this.memoizedState = null;\n      this.dependencies = null;\n      this.mode = mode; // Effects\n\n      this.flags = NoFlags;\n      this.subtreeFlags = NoFlags;\n      this.deletions = null;\n      this.lanes = NoLanes;\n      this.childLanes = NoLanes;\n      this.alternate = null;\n      {\n        // Note: The following is done to avoid a v8 performance cliff.\n        //\n        // Initializing the fields below to smis and later updating them with\n        // double values will cause Fibers to end up having separate shapes.\n        // This behavior/bug has something to do with Object.preventExtension().\n        // Fortunately this only impacts DEV builds.\n        // Unfortunately it makes React unusably slow for some applications.\n        // To work around this, initialize the fields below with doubles.\n        //\n        // Learn more about this here:\n        // https://github.com/facebook/react/issues/14365\n        // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n        this.actualDuration = Number.NaN;\n        this.actualStartTime = Number.NaN;\n        this.selfBaseDuration = Number.NaN;\n        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n        // This won't trigger the performance cliff mentioned above,\n        // and it simplifies other profiler code (including DevTools).\n\n        this.actualDuration = 0;\n        this.actualStartTime = -1;\n        this.selfBaseDuration = 0;\n        this.treeBaseDuration = 0;\n      }\n      {\n        // This isn't directly used but is handy for debugging internals:\n        this._debugSource = null;\n        this._debugOwner = null;\n        this._debugNeedsRemount = false;\n        this._debugHookTypes = null;\n\n        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n          Object.preventExtensions(this);\n        }\n      }\n    } // This is a constructor function, rather than a POJO constructor, still\n    // please ensure we do the following:\n    // 1) Nobody should add any instance methods on this. Instance methods can be\n    //    more difficult to predict when they get optimized and they are almost\n    //    never inlined properly in static compilers.\n    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n    //    always know when it is a fiber.\n    // 3) We might want to experiment with using numeric keys since they are easier\n    //    to optimize in a non-JIT environment.\n    // 4) We can easily go from a constructor to a createFiber object literal if that\n    //    is faster.\n    // 5) It should be easy to port this to a C struct and keep a C implementation\n    //    compatible.\n\n\n    var createFiber = function (tag, pendingProps, key, mode) {\n      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n      return new FiberNode(tag, pendingProps, key, mode);\n    };\n\n    function shouldConstruct$1(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n\n    function isSimpleFunctionComponent(type) {\n      return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n    }\n\n    function resolveLazyComponentTag(Component) {\n      if (typeof Component === 'function') {\n        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n      } else if (Component !== undefined && Component !== null) {\n        var $$typeof = Component.$$typeof;\n\n        if ($$typeof === REACT_FORWARD_REF_TYPE) {\n          return ForwardRef;\n        }\n\n        if ($$typeof === REACT_MEMO_TYPE) {\n          return MemoComponent;\n        }\n      }\n\n      return IndeterminateComponent;\n    } // This is used to create an alternate fiber to do work on.\n\n\n    function createWorkInProgress(current, pendingProps) {\n      var workInProgress = current.alternate;\n\n      if (workInProgress === null) {\n        // We use a double buffering pooling technique because we know that we'll\n        // only ever need at most two versions of a tree. We pool the \"other\" unused\n        // node that we're free to reuse. This is lazily created to avoid allocating\n        // extra objects for things that are never updated. It also allow us to\n        // reclaim the extra memory if needed.\n        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n        {\n          // DEV-only fields\n          workInProgress._debugSource = current._debugSource;\n          workInProgress._debugOwner = current._debugOwner;\n          workInProgress._debugHookTypes = current._debugHookTypes;\n        }\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n      } else {\n        workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // We already have an alternate.\n        // Reset the effect tag.\n\n        workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.deletions = null;\n        {\n          // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n          // This prevents time from endlessly accumulating in new commits.\n          // This has the downside of resetting values for different priority renders,\n          // But works for yielding (the common case) and should support resuming.\n          workInProgress.actualDuration = 0;\n          workInProgress.actualStartTime = -1;\n        }\n      } // Reset all effects except static ones.\n      // Static effects are not specific to a render.\n\n\n      workInProgress.flags = current.flags & StaticMask;\n      workInProgress.childLanes = current.childLanes;\n      workInProgress.lanes = current.lanes;\n      workInProgress.child = current.child;\n      workInProgress.memoizedProps = current.memoizedProps;\n      workInProgress.memoizedState = current.memoizedState;\n      workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n      // it cannot be shared with the current fiber.\n\n      var currentDependencies = current.dependencies;\n      workInProgress.dependencies = currentDependencies === null ? null : {\n        lanes: currentDependencies.lanes,\n        firstContext: currentDependencies.firstContext\n      }; // These will be overridden during the parent's reconciliation\n\n      workInProgress.sibling = current.sibling;\n      workInProgress.index = current.index;\n      workInProgress.ref = current.ref;\n      {\n        workInProgress.selfBaseDuration = current.selfBaseDuration;\n        workInProgress.treeBaseDuration = current.treeBaseDuration;\n      }\n      {\n        workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n          case FunctionComponent:\n          case SimpleMemoComponent:\n            workInProgress.type = resolveFunctionForHotReloading(current.type);\n            break;\n\n          case ClassComponent:\n            workInProgress.type = resolveClassForHotReloading(current.type);\n            break;\n\n          case ForwardRef:\n            workInProgress.type = resolveForwardRefForHotReloading(current.type);\n            break;\n        }\n      }\n      return workInProgress;\n    } // Used to reuse a Fiber for a second pass.\n\n\n    function resetWorkInProgress(workInProgress, renderLanes) {\n      // This resets the Fiber to what createFiber or createWorkInProgress would\n      // have set the values to before during the first pass. Ideally this wouldn't\n      // be necessary but unfortunately many code paths reads from the workInProgress\n      // when they should be reading from current and writing to workInProgress.\n      // We assume pendingProps, index, key, ref, return are still untouched to\n      // avoid doing another reconciliation.\n      // Reset the effect flags but keep any Placement tags, since that's something\n      // that child fiber is setting, not the reconciliation.\n      workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n      var current = workInProgress.alternate;\n\n      if (current === null) {\n        // Reset to createFiber's initial values.\n        workInProgress.childLanes = NoLanes;\n        workInProgress.lanes = renderLanes;\n        workInProgress.child = null;\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.memoizedProps = null;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        workInProgress.dependencies = null;\n        workInProgress.stateNode = null;\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = 0;\n          workInProgress.treeBaseDuration = 0;\n        }\n      } else {\n        // Reset to the cloned values that createWorkInProgress would've.\n        workInProgress.childLanes = current.childLanes;\n        workInProgress.lanes = current.lanes;\n        workInProgress.child = current.child;\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.deletions = null;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n        // it cannot be shared with the current fiber.\n\n        var currentDependencies = current.dependencies;\n        workInProgress.dependencies = currentDependencies === null ? null : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext\n        };\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n      }\n\n      return workInProgress;\n    }\n\n    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n      var mode;\n\n      if (tag === ConcurrentRoot) {\n        mode = ConcurrentMode;\n\n        if (isStrictMode === true) {\n          mode |= StrictLegacyMode;\n          {\n            mode |= StrictEffectsMode;\n          }\n        }\n      } else {\n        mode = NoMode;\n      }\n\n      if (isDevToolsPresent) {\n        // Always collect profile timings when DevTools are present.\n        // This enables DevTools to start capturing timing at any point–\n        // Without some nodes in the tree having empty base times.\n        mode |= ProfileMode;\n      }\n\n      return createFiber(HostRoot, null, null, mode);\n    }\n\n    function createFiberFromTypeAndProps(type, // React$ElementType\n    key, pendingProps, owner, mode, lanes) {\n      var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n      var resolvedType = type;\n\n      if (typeof type === 'function') {\n        if (shouldConstruct$1(type)) {\n          fiberTag = ClassComponent;\n          {\n            resolvedType = resolveClassForHotReloading(resolvedType);\n          }\n        } else {\n          {\n            resolvedType = resolveFunctionForHotReloading(resolvedType);\n          }\n        }\n      } else if (typeof type === 'string') {\n        fiberTag = HostComponent;\n      } else {\n        getTag: switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n          case REACT_STRICT_MODE_TYPE:\n            fiberTag = Mode;\n            mode |= StrictLegacyMode;\n\n            if ((mode & ConcurrentMode) !== NoMode) {\n              // Strict effects should never run on legacy roots\n              mode |= StrictEffectsMode;\n            }\n\n            break;\n\n          case REACT_PROFILER_TYPE:\n            return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n          case REACT_SUSPENSE_TYPE:\n            return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n          case REACT_SUSPENSE_LIST_TYPE:\n            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n          case REACT_OFFSCREEN_TYPE:\n            return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n          case REACT_LEGACY_HIDDEN_TYPE: // eslint-disable-next-line no-fallthrough\n\n          case REACT_SCOPE_TYPE: // eslint-disable-next-line no-fallthrough\n\n          case REACT_CACHE_TYPE: // eslint-disable-next-line no-fallthrough\n\n          case REACT_TRACING_MARKER_TYPE: // eslint-disable-next-line no-fallthrough\n\n          case REACT_DEBUG_TRACING_MODE_TYPE: // eslint-disable-next-line no-fallthrough\n\n          default:\n            {\n              if (typeof type === 'object' && type !== null) {\n                switch (type.$$typeof) {\n                  case REACT_PROVIDER_TYPE:\n                    fiberTag = ContextProvider;\n                    break getTag;\n\n                  case REACT_CONTEXT_TYPE:\n                    // This is a consumer\n                    fiberTag = ContextConsumer;\n                    break getTag;\n\n                  case REACT_FORWARD_REF_TYPE:\n                    fiberTag = ForwardRef;\n                    {\n                      resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                    }\n                    break getTag;\n\n                  case REACT_MEMO_TYPE:\n                    fiberTag = MemoComponent;\n                    break getTag;\n\n                  case REACT_LAZY_TYPE:\n                    fiberTag = LazyComponent;\n                    resolvedType = null;\n                    break getTag;\n                }\n              }\n\n              var info = '';\n              {\n                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n                  info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n                }\n\n                var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n                if (ownerName) {\n                  info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n                }\n              }\n              throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n            }\n        }\n      }\n\n      var fiber = createFiber(fiberTag, pendingProps, key, mode);\n      fiber.elementType = type;\n      fiber.type = resolvedType;\n      fiber.lanes = lanes;\n      {\n        fiber._debugOwner = owner;\n      }\n      return fiber;\n    }\n\n    function createFiberFromElement(element, mode, lanes) {\n      var owner = null;\n      {\n        owner = element._owner;\n      }\n      var type = element.type;\n      var key = element.key;\n      var pendingProps = element.props;\n      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n      {\n        fiber._debugSource = element._source;\n        fiber._debugOwner = element._owner;\n      }\n      return fiber;\n    }\n\n    function createFiberFromFragment(elements, mode, lanes, key) {\n      var fiber = createFiber(Fragment, elements, key, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n      {\n        if (typeof pendingProps.id !== 'string') {\n          error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n        }\n      }\n      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n      fiber.elementType = REACT_PROFILER_TYPE;\n      fiber.lanes = lanes;\n      {\n        fiber.stateNode = {\n          effectDuration: 0,\n          passiveEffectDuration: 0\n        };\n      }\n      return fiber;\n    }\n\n    function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_OFFSCREEN_TYPE;\n      fiber.lanes = lanes;\n      var primaryChildInstance = {};\n      fiber.stateNode = primaryChildInstance;\n      return fiber;\n    }\n\n    function createFiberFromText(content, mode, lanes) {\n      var fiber = createFiber(HostText, content, null, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromHostInstanceForDeletion() {\n      var fiber = createFiber(HostComponent, null, null, NoMode);\n      fiber.elementType = 'DELETED';\n      return fiber;\n    }\n\n    function createFiberFromDehydratedFragment(dehydratedNode) {\n      var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n      fiber.stateNode = dehydratedNode;\n      return fiber;\n    }\n\n    function createFiberFromPortal(portal, mode, lanes) {\n      var pendingProps = portal.children !== null ? portal.children : [];\n      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n      fiber.lanes = lanes;\n      fiber.stateNode = {\n        containerInfo: portal.containerInfo,\n        pendingChildren: null,\n        // Used by persistent updates\n        implementation: portal.implementation\n      };\n      return fiber;\n    } // Used for stashing WIP properties to replay failed work in DEV.\n\n\n    function assignFiberPropertiesInDEV(target, source) {\n      if (target === null) {\n        // This Fiber's initial properties will always be overwritten.\n        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n        target = createFiber(IndeterminateComponent, null, null, NoMode);\n      } // This is intentionally written as a list of all properties.\n      // We tried to use Object.assign() instead but this is called in\n      // the hottest path, and Object.assign() was too slow:\n      // https://github.com/facebook/react/issues/12502\n      // This code is DEV-only so size is not a concern.\n\n\n      target.tag = source.tag;\n      target.key = source.key;\n      target.elementType = source.elementType;\n      target.type = source.type;\n      target.stateNode = source.stateNode;\n      target.return = source.return;\n      target.child = source.child;\n      target.sibling = source.sibling;\n      target.index = source.index;\n      target.ref = source.ref;\n      target.pendingProps = source.pendingProps;\n      target.memoizedProps = source.memoizedProps;\n      target.updateQueue = source.updateQueue;\n      target.memoizedState = source.memoizedState;\n      target.dependencies = source.dependencies;\n      target.mode = source.mode;\n      target.flags = source.flags;\n      target.subtreeFlags = source.subtreeFlags;\n      target.deletions = source.deletions;\n      target.lanes = source.lanes;\n      target.childLanes = source.childLanes;\n      target.alternate = source.alternate;\n      {\n        target.actualDuration = source.actualDuration;\n        target.actualStartTime = source.actualStartTime;\n        target.selfBaseDuration = source.selfBaseDuration;\n        target.treeBaseDuration = source.treeBaseDuration;\n      }\n      target._debugSource = source._debugSource;\n      target._debugOwner = source._debugOwner;\n      target._debugNeedsRemount = source._debugNeedsRemount;\n      target._debugHookTypes = source._debugHookTypes;\n      return target;\n    }\n\n    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n      this.tag = tag;\n      this.containerInfo = containerInfo;\n      this.pendingChildren = null;\n      this.current = null;\n      this.pingCache = null;\n      this.finishedWork = null;\n      this.timeoutHandle = noTimeout;\n      this.context = null;\n      this.pendingContext = null;\n      this.callbackNode = null;\n      this.callbackPriority = NoLane;\n      this.eventTimes = createLaneMap(NoLanes);\n      this.expirationTimes = createLaneMap(NoTimestamp);\n      this.pendingLanes = NoLanes;\n      this.suspendedLanes = NoLanes;\n      this.pingedLanes = NoLanes;\n      this.expiredLanes = NoLanes;\n      this.mutableReadLanes = NoLanes;\n      this.finishedLanes = NoLanes;\n      this.entangledLanes = NoLanes;\n      this.entanglements = createLaneMap(NoLanes);\n      this.identifierPrefix = identifierPrefix;\n      this.onRecoverableError = onRecoverableError;\n\n      if (supportsHydration) {\n        this.mutableSourceEagerHydrationData = null;\n      }\n\n      {\n        this.effectDuration = 0;\n        this.passiveEffectDuration = 0;\n      }\n      {\n        this.memoizedUpdaters = new Set();\n        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n\n        for (var _i = 0; _i < TotalLanes; _i++) {\n          pendingUpdatersLaneMap.push(new Set());\n        }\n      }\n      {\n        switch (tag) {\n          case ConcurrentRoot:\n            this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n            break;\n\n          case LegacyRoot:\n            this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n            break;\n        }\n      }\n    }\n\n    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n    // host config, but because they are passed in at runtime, we have to thread\n    // them through the root constructor. Perhaps we should put them all into a\n    // single type, like a DynamicHostConfig that is defined by the renderer.\n    identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError); // stateNode is any.\n\n      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n      root.current = uninitializedFiber;\n      uninitializedFiber.stateNode = root;\n      {\n        var _initialState = {\n          element: initialChildren,\n          isDehydrated: hydrate,\n          cache: null,\n          // not enabled yet\n          transitions: null\n        };\n        uninitializedFiber.memoizedState = _initialState;\n      }\n      initializeUpdateQueue(uninitializedFiber);\n      return root;\n    }\n\n    var ReactVersion = '18.0.0-fc46dba67-20220329';\n\n    function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\n    implementation) {\n      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      {\n        checkKeyStringCoercion(key);\n      }\n      return {\n        // This tag allow us to uniquely identify this as a React Portal\n        $$typeof: REACT_PORTAL_TYPE,\n        key: key == null ? null : '' + key,\n        children: children,\n        containerInfo: containerInfo,\n        implementation: implementation\n      };\n    }\n\n    var didWarnAboutNestedUpdates;\n    var didWarnAboutFindNodeInStrictMode;\n    {\n      didWarnAboutNestedUpdates = false;\n      didWarnAboutFindNodeInStrictMode = {};\n    }\n\n    function getContextForSubtree(parentComponent) {\n      if (!parentComponent) {\n        return emptyContextObject;\n      }\n\n      var fiber = get(parentComponent);\n      var parentContext = findCurrentUnmaskedContext(fiber);\n\n      if (fiber.tag === ClassComponent) {\n        var Component = fiber.type;\n\n        if (isContextProvider(Component)) {\n          return processChildContext(fiber, Component, parentContext);\n        }\n      }\n\n      return parentContext;\n    }\n\n    function findHostInstance(component) {\n      var fiber = get(component);\n\n      if (fiber === undefined) {\n        if (typeof component.render === 'function') {\n          throw new Error('Unable to find node on an unmounted component.');\n        } else {\n          var keys = Object.keys(component).join(',');\n          throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n        }\n      }\n\n      var hostFiber = findCurrentHostFiber(fiber);\n\n      if (hostFiber === null) {\n        return null;\n      }\n\n      return hostFiber.stateNode;\n    }\n\n    function findHostInstanceWithWarning(component, methodName) {\n      {\n        var fiber = get(component);\n\n        if (fiber === undefined) {\n          if (typeof component.render === 'function') {\n            throw new Error('Unable to find node on an unmounted component.');\n          } else {\n            var keys = Object.keys(component).join(',');\n            throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n          }\n        }\n\n        var hostFiber = findCurrentHostFiber(fiber);\n\n        if (hostFiber === null) {\n          return null;\n        }\n\n        if (hostFiber.mode & StrictLegacyMode) {\n          var componentName = getComponentNameFromFiber(fiber) || 'Component';\n\n          if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n            didWarnAboutFindNodeInStrictMode[componentName] = true;\n            var previousFiber = current;\n\n            try {\n              setCurrentFiber(hostFiber);\n\n              if (fiber.mode & StrictLegacyMode) {\n                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n              } else {\n                error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n              }\n            } finally {\n              // Ideally this should reset to previous but this shouldn't be called in\n              // render and there's another warning for that anyway.\n              if (previousFiber) {\n                setCurrentFiber(previousFiber);\n              } else {\n                resetCurrentFiber();\n              }\n            }\n          }\n        }\n\n        return hostFiber.stateNode;\n      }\n    }\n\n    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var hydrate = false;\n      var initialChildren = null;\n      return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n    }\n\n    function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\n    callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var hydrate = true;\n      var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n      root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n      // a regular update because the initial render must match was was rendered\n      // on the server.\n      // NOTE: This update intentionally doesn't have a payload. We're only using\n      // the update to schedule work on the root fiber (and, for legacy roots, to\n      // enqueue the callback if one is provided).\n\n      var current = root.current;\n      var eventTime = requestEventTime();\n      var lane = requestUpdateLane(current);\n      var update = createUpdate(eventTime, lane);\n      update.callback = callback !== undefined && callback !== null ? callback : null;\n      enqueueUpdate(current, update);\n      scheduleInitialHydrationOnRoot(root, lane, eventTime);\n      return root;\n    }\n\n    function updateContainer(element, container, parentComponent, callback) {\n      {\n        onScheduleRoot(container, element);\n      }\n      var current$1 = container.current;\n      var eventTime = requestEventTime();\n      var lane = requestUpdateLane(current$1);\n      {\n        markRenderScheduled(lane);\n      }\n      var context = getContextForSubtree(parentComponent);\n\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n\n      {\n        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n          didWarnAboutNestedUpdates = true;\n          error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n        }\n      }\n      var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: element\n      };\n      callback = callback === undefined ? null : callback;\n\n      if (callback !== null) {\n        {\n          if (typeof callback !== 'function') {\n            error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n          }\n        }\n        update.callback = callback;\n      }\n\n      enqueueUpdate(current$1, update);\n      var root = scheduleUpdateOnFiber(current$1, lane, eventTime);\n\n      if (root !== null) {\n        entangleTransitions(root, current$1, lane);\n      }\n\n      return lane;\n    }\n\n    function getPublicRootInstance(container) {\n      var containerFiber = container.current;\n\n      if (!containerFiber.child) {\n        return null;\n      }\n\n      switch (containerFiber.child.tag) {\n        case HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n\n        default:\n          return containerFiber.child.stateNode;\n      }\n    }\n\n    function attemptSynchronousHydration(fiber) {\n      switch (fiber.tag) {\n        case HostRoot:\n          var root = fiber.stateNode;\n\n          if (isRootDehydrated(root)) {\n            // Flush the first scheduled \"update\".\n            var lanes = getHighestPriorityPendingLanes(root);\n            flushRoot(root, lanes);\n          }\n\n          break;\n\n        case SuspenseComponent:\n          var eventTime = requestEventTime();\n          flushSync(function () {\n            return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);\n          }); // If we're still blocked after this, we need to increase\n          // the priority of any promises resolving within this\n          // boundary so that they next attempt also has higher pri.\n\n          var retryLane = SyncLane;\n          markRetryLaneIfNotHydrated(fiber, retryLane);\n          break;\n      }\n    }\n\n    function markRetryLaneImpl(fiber, retryLane) {\n      var suspenseState = fiber.memoizedState;\n\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\n        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n      }\n    } // Increases the priority of thenables when they resolve within this boundary.\n\n\n    function markRetryLaneIfNotHydrated(fiber, retryLane) {\n      markRetryLaneImpl(fiber, retryLane);\n      var alternate = fiber.alternate;\n\n      if (alternate) {\n        markRetryLaneImpl(alternate, retryLane);\n      }\n    }\n\n    function attemptContinuousHydration(fiber) {\n      if (fiber.tag !== SuspenseComponent) {\n        // We ignore HostRoots here because we can't increase\n        // their priority and they should not suspend on I/O,\n        // since you have to wrap anything that might suspend in\n        // Suspense.\n        return;\n      }\n\n      var eventTime = requestEventTime();\n      var lane = SelectiveHydrationLane;\n      scheduleUpdateOnFiber(fiber, lane, eventTime);\n      markRetryLaneIfNotHydrated(fiber, lane);\n    }\n\n    function attemptHydrationAtCurrentPriority(fiber) {\n      if (fiber.tag !== SuspenseComponent) {\n        // We ignore HostRoots here because we can't increase\n        // their priority other than synchronously flush it.\n        return;\n      }\n\n      var eventTime = requestEventTime();\n      var lane = requestUpdateLane(fiber);\n      scheduleUpdateOnFiber(fiber, lane, eventTime);\n      markRetryLaneIfNotHydrated(fiber, lane);\n    }\n\n    function findHostInstanceWithNoPortals(fiber) {\n      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n      if (hostFiber === null) {\n        return null;\n      }\n\n      return hostFiber.stateNode;\n    }\n\n    var shouldErrorImpl = function (fiber) {\n      return null;\n    };\n\n    function shouldError(fiber) {\n      return shouldErrorImpl(fiber);\n    }\n\n    var shouldSuspendImpl = function (fiber) {\n      return false;\n    };\n\n    function shouldSuspend(fiber) {\n      return shouldSuspendImpl(fiber);\n    }\n\n    var overrideHookState = null;\n    var overrideHookStateDeletePath = null;\n    var overrideHookStateRenamePath = null;\n    var overrideProps = null;\n    var overridePropsDeletePath = null;\n    var overridePropsRenamePath = null;\n    var scheduleUpdate = null;\n    var setErrorHandler = null;\n    var setSuspenseHandler = null;\n    {\n      var copyWithDeleteImpl = function (obj, path, index) {\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n        if (index + 1 === path.length) {\n          if (isArray(updated)) {\n            updated.splice(key, 1);\n          } else {\n            delete updated[key];\n          }\n\n          return updated;\n        } // $FlowFixMe number or string is fine here\n\n\n        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n        return updated;\n      };\n\n      var copyWithDelete = function (obj, path) {\n        return copyWithDeleteImpl(obj, path, 0);\n      };\n\n      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n        var oldKey = oldPath[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n        if (index + 1 === oldPath.length) {\n          var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n          updated[newKey] = updated[oldKey];\n\n          if (isArray(updated)) {\n            updated.splice(oldKey, 1);\n          } else {\n            delete updated[oldKey];\n          }\n        } else {\n          // $FlowFixMe number or string is fine here\n          updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n          obj[oldKey], oldPath, newPath, index + 1);\n        }\n\n        return updated;\n      };\n\n      var copyWithRename = function (obj, oldPath, newPath) {\n        if (oldPath.length !== newPath.length) {\n          warn('copyWithRename() expects paths of the same length');\n          return;\n        } else {\n          for (var i = 0; i < newPath.length - 1; i++) {\n            if (oldPath[i] !== newPath[i]) {\n              warn('copyWithRename() expects paths to be the same except for the deepest key');\n              return;\n            }\n          }\n        }\n\n        return copyWithRenameImpl(obj, oldPath, newPath, 0);\n      };\n\n      var copyWithSetImpl = function (obj, path, index, value) {\n        if (index >= path.length) {\n          return value;\n        }\n\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n        return updated;\n      };\n\n      var copyWithSet = function (obj, path, value) {\n        return copyWithSetImpl(obj, path, 0, value);\n      };\n\n      var findHook = function (fiber, id) {\n        // For now, the \"id\" of stateful hooks is just the stateful hook index.\n        // This may change in the future with e.g. nested hooks.\n        var currentHook = fiber.memoizedState;\n\n        while (currentHook !== null && id > 0) {\n          currentHook = currentHook.next;\n          id--;\n        }\n\n        return currentHook;\n      }; // Support DevTools editable values for useState and useReducer.\n\n\n      overrideHookState = function (fiber, id, path, value) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithSet(hook.memoizedState, path, value);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n      };\n\n      overrideHookStateDeletePath = function (fiber, id, path) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithDelete(hook.memoizedState, path);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n      };\n\n      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n      }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n      overrideProps = function (fiber, path, value) {\n        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n      };\n\n      overridePropsDeletePath = function (fiber, path) {\n        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n      };\n\n      overridePropsRenamePath = function (fiber, oldPath, newPath) {\n        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n      };\n\n      scheduleUpdate = function (fiber) {\n        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n      };\n\n      setErrorHandler = function (newShouldErrorImpl) {\n        shouldErrorImpl = newShouldErrorImpl;\n      };\n\n      setSuspenseHandler = function (newShouldSuspendImpl) {\n        shouldSuspendImpl = newShouldSuspendImpl;\n      };\n    }\n\n    function findHostInstanceByFiber(fiber) {\n      var hostFiber = findCurrentHostFiber(fiber);\n\n      if (hostFiber === null) {\n        return null;\n      }\n\n      return hostFiber.stateNode;\n    }\n\n    function emptyFindFiberByHostInstance(instance) {\n      return null;\n    }\n\n    function getCurrentFiberForDevTools() {\n      return current;\n    }\n\n    function injectIntoDevTools(devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      return injectInternals({\n        bundleType: devToolsConfig.bundleType,\n        version: devToolsConfig.version,\n        rendererPackageName: devToolsConfig.rendererPackageName,\n        rendererConfig: devToolsConfig.rendererConfig,\n        overrideHookState: overrideHookState,\n        overrideHookStateDeletePath: overrideHookStateDeletePath,\n        overrideHookStateRenamePath: overrideHookStateRenamePath,\n        overrideProps: overrideProps,\n        overridePropsDeletePath: overridePropsDeletePath,\n        overridePropsRenamePath: overridePropsRenamePath,\n        setErrorHandler: setErrorHandler,\n        setSuspenseHandler: setSuspenseHandler,\n        scheduleUpdate: scheduleUpdate,\n        currentDispatcherRef: ReactCurrentDispatcher,\n        findHostInstanceByFiber: findHostInstanceByFiber,\n        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n        // React Refresh\n        findHostInstancesForRefresh: findHostInstancesForRefresh,\n        scheduleRefresh: scheduleRefresh,\n        scheduleRoot: scheduleRoot,\n        setRefreshHandler: setRefreshHandler,\n        // Enables DevTools to append owner stacks to error messages in DEV mode.\n        getCurrentFiber: getCurrentFiberForDevTools,\n        // Enables DevTools to detect reconciler version rather than renderer version\n        // which may not match for third party renderers.\n        reconcilerVersion: ReactVersion\n      });\n    }\n\n    exports.attemptContinuousHydration = attemptContinuousHydration;\n    exports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\n    exports.attemptSynchronousHydration = attemptSynchronousHydration;\n    exports.batchedUpdates = batchedUpdates;\n    exports.createComponentSelector = createComponentSelector;\n    exports.createContainer = createContainer;\n    exports.createHasPseudoClassSelector = createHasPseudoClassSelector;\n    exports.createHydrationContainer = createHydrationContainer;\n    exports.createPortal = createPortal;\n    exports.createRoleSelector = createRoleSelector;\n    exports.createTestNameSelector = createTestNameSelector;\n    exports.createTextSelector = createTextSelector;\n    exports.deferredUpdates = deferredUpdates;\n    exports.discreteUpdates = discreteUpdates;\n    exports.findAllNodes = findAllNodes;\n    exports.findBoundingRects = findBoundingRects;\n    exports.findHostInstance = findHostInstance;\n    exports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\n    exports.findHostInstanceWithWarning = findHostInstanceWithWarning;\n    exports.flushControlled = flushControlled;\n    exports.flushPassiveEffects = flushPassiveEffects;\n    exports.flushSync = flushSync;\n    exports.focusWithin = focusWithin;\n    exports.getCurrentUpdatePriority = getCurrentUpdatePriority;\n    exports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\n    exports.getPublicRootInstance = getPublicRootInstance;\n    exports.injectIntoDevTools = injectIntoDevTools;\n    exports.isAlreadyRendering = isAlreadyRendering;\n    exports.observeVisibleRects = observeVisibleRects;\n    exports.registerMutableSourceForHydration = registerMutableSourceForHydration;\n    exports.runWithPriority = runWithPriority;\n    exports.shouldError = shouldError;\n    exports.shouldSuspend = shouldSuspend;\n    exports.updateContainer = updateContainer;\n    return exports;\n  };\n}","map":{"version":3,"names":["process","env","NODE_ENV","module","exports","$$$reconciler","$$$hostConfig","React","require","Scheduler","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","suppressWarning","setSuppressWarning","newSuppressWarning","warn","format","_len","arguments","length","args","Array","_key","printWarning","error","_len2","_key2","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","String","unshift","Function","prototype","apply","call","console","assign","Object","get","key","_reactInternals","set","value","enablePersistentOffscreenHostContainer","enableNewReconciler","enableLazyContextPropagation","enableLegacyHidden","enableSuspenseAvoidThisFallback","warnAboutStringRefs","enableSchedulingProfiler","enableProfilerTimer","enableProfilerCommitHooks","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","tag","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getWrappedName$1","getContextName$1","getComponentNameFromFiber","fiber","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","HydratingAndUpdate","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","MountLayoutDev","MountPassiveDev","BeforeMutationMask","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","assertIsMounted","Error","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","_child","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","findCurrentHostFiberWithNoPortals","findCurrentHostFiberWithNoPortalsImpl","isArrayImpl","isArray","getPublicInstance","getRootHostContext","getChildHostContext","prepareForCommit","resetAfterCommit","createInstance","appendInitialChild","finalizeInitialChildren","prepareUpdate","shouldSetTextContent","createTextInstance","scheduleTimeout","cancelTimeout","noTimeout","now","isPrimaryRenderer","warnsIfNotActing","supportsMutation","supportsPersistence","supportsHydration","getInstanceFromNode","beforeActiveInstanceBlur","afterActiveInstanceBlur","preparePortalMount","prepareScopeUpdate","getInstanceFromScope","getCurrentEventPriority","detachDeletedInstance","supportsMicrotasks","scheduleMicrotask","supportsTestSelectors","findFiberRoot","getBoundingRect","getTextContent","isHiddenSubtree","matchAccessibilityRole","setFocusIfFocusable","setupIntersectionObserver","appendChild","appendChildToContainer","commitTextUpdate","commitMount","commitUpdate","insertBefore","insertInContainerBefore","removeChild","removeChildFromContainer","resetTextContent","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clearContainer","cloneInstance","createContainerChildSet","appendChildToContainerChildSet","finalizeContainerChildren","replaceContainerChildren","getOffscreenContainerType","getOffscreenContainerProps","cloneHiddenInstance","cloneHiddenTextInstance","canHydrateInstance","canHydrateTextInstance","canHydrateSuspenseInstance","isSuspenseInstancePending","isSuspenseInstanceFallback","registerSuspenseInstanceRetry","getNextHydratableSibling","getFirstHydratableChild","getFirstHydratableChildWithinContainer","getFirstHydratableChildWithinSuspenseInstance","hydrateInstance","hydrateTextInstance","hydrateSuspenseInstance","getNextHydratableInstanceAfterSuspenseInstance","commitHydratedContainer","commitHydratedSuspenseInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","shouldDeleteUnhydratedTailInstances","didNotMatchHydratedContainerTextInstance","didNotMatchHydratedTextInstance","didNotHydrateInstanceWithinContainer","didNotHydrateInstanceWithinSuspenseInstance","didNotHydrateInstance","didNotFindHydratableInstanceWithinContainer","didNotFindHydratableTextInstanceWithinContainer","didNotFindHydratableSuspenseInstanceWithinContainer","didNotFindHydratableInstanceWithinSuspenseInstance","didNotFindHydratableTextInstanceWithinSuspenseInstance","didNotFindHydratableSuspenseInstanceWithinSuspenseInstance","didNotFindHydratableInstance","didNotFindHydratableTextInstance","didNotFindHydratableSuspenseInstance","errorHydratingContainer","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","log","info","group","groupCollapsed","groupEnd","props","configurable","enumerable","writable","defineProperties","reenableLogs","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","undefined","trim","reentry","componentFrameCache","PossiblyWeakMap","WeakMap","Map","describeNativeComponentFrame","fn","construct","frame","control","previousPrepareStackTrace","prepareStackTrace","previousDispatcher","Fake","defineProperty","Reflect","sample","sampleLines","split","controlLines","s","c","_frame","replace","includes","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","shouldConstruct","Component","isReactComponent","describeUnknownElementTypeFrameInDEV","hasOwnProperty","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","bind","typeSpecName","error$1","err","ex","message","valueStack","fiberStack","index","createCursor","defaultValue","pop","cursor","push","warnedAboutMissingGetChildContext","emptyContextObject","freeze","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","StrictEffectsMode","clz32","Math","clz32Fallback","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","getLabelForLane","lane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","root","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","pickArbitraryLaneIndex","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getHighestPriorityPendingLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","higherPriorityLane","createLaneMap","initial","laneMap","i","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","markRootEntangled","rootEntangledLanes","getBumpedLaneForHydration","renderLanes","renderLane","addFiberToLanesMap","isDevToolsPresent","pendingUpdatersLaneMap","updaters","add","movePendingFibersToMemoized","memoizedUpdaters","size","forEach","clear","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","runWithPriority","priority","previousPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","scheduleCallback","unstable_scheduleCallback","cancelCallback","unstable_cancelCallback","shouldYield","unstable_shouldYield","requestPaint","unstable_requestPaint","now$1","unstable_now","ImmediatePriority","unstable_ImmediatePriority","UserBlockingPriority","unstable_UserBlockingPriority","NormalPriority","unstable_NormalPriority","IdlePriority","unstable_IdlePriority","unstable_yieldValue","unstable_setDisableYieldValue","rendererID","injectedHook","injectedProfilingHooks","hasLoggedError","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","checkDCE","onScheduleRoot","children","onScheduleFiberRoot","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","setIsStrictModeForDevtools","newIsStrictMode","setStrictMode","profilingHooks","label","markCommitStarted","markCommitStopped","markComponentRenderStarted","markComponentRenderStopped","markComponentPassiveEffectMountStarted","markComponentPassiveEffectMountStopped","markComponentPassiveEffectUnmountStarted","markComponentPassiveEffectUnmountStopped","markComponentLayoutEffectMountStarted","markComponentLayoutEffectMountStopped","markComponentLayoutEffectUnmountStarted","markComponentLayoutEffectUnmountStopped","markComponentErrored","thrownValue","markComponentSuspended","wakeable","markLayoutEffectsStarted","markLayoutEffectsStopped","markPassiveEffectsStarted","markPassiveEffectsStopped","markRenderStarted","markRenderYielded","markRenderStopped","markRenderScheduled","markForceUpdateScheduled","markStateUpdateScheduled","is","y","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","slice","isRootDehydrated","currentState","memoizedState","isDehydrated","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","ReactDebugCurrentFrame$1","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","mode","setToSortedString","array","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","sortedNames","_sortedNames","_sortedNames2","_sortedNames3","_sortedNames4","_sortedNames5","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","typeName","hasToStringTag","toStringTag","constructor","willCoercionThrow","testStringCoercion","e","checkKeyStringCoercion","checkPropStringCoercion","propName","resolveDefaultProps","baseProps","defaultProps","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue","_currentRenderer","_currentValue2","_currentRenderer2","popProvider","currentValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","next","parentSuspense","_alternate","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","contextItem","memoizedValue","interleavedQueues","pushInterleavedQueue","enqueueInterleavedUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isInterleavedUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","_clone","_lastPendingUpdate","_firstPendingUpdate","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","inst","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldProps","newProps","oldState","nextContext","shouldComponentUpdate","shouldUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","_state","adoptClassInstance","updater","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","_componentName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","fiberFlags","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","_fiberFlags","_fiberFlags2","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","isForkedChild","warnIfNotHydrating","getForksAtLevel","getTreeId","overflow","idWithLeadingBit","id","getLeadingBit","toString","pushTreeFork","totalChildren","pushTreeId","baseIdWithLeadingBit","baseOverflow","baseLength","getBitLength","baseId","slot","numberOfOverflowBits","newOverflowBits","newOverflow","restOfBaseId","restOfBaseLength","restOfLength","restOfNewBits","newBits","_id","_overflow","pushMaterializedTreeId","returnFiber","numberOfForks","slotIndex","number","popTreeContext","getSuspendedTreeContext","restoreSuspendedTreeContext","suspendedContext","getIsHydrating","hydrationParentFiber","nextHydratableInstance","isHydrating","didSuspend","hydrationErrors","warnIfHydrating","markDidSuspendWhileHydratingDEV","enterHydrationState","parentInstance","containerInfo","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","warnUnhydratedInstance","suspenseState","dehydrated","deleteHydratableInstance","childToDelete","createFiberFromHostInstanceForDeletion","deletions","warnNonhydratedInstance","parentContainer","text","parentType","parentProps","_type","_props","_text","_parentInstance","_type2","_props2","_text2","insertNonHydratedInstance","tryHydrate","nextInstance","textInstance","retryLane","dehydratedFragment","createFiberFromDehydratedFragment","shouldClientRenderOnMismatch","throwOnHydrationMismatch","tryToClaimNextHydratableInstance","firstAttemptedInstance","prevHydrationParentFiber","prepareToHydrateHostInstance","rootContainerInstance","hostContext","shouldWarnIfMismatchDev","updatePayload","prepareToHydrateHostTextInstance","textContent","isConcurrentMode","prepareToHydrateHostSuspenseInstance","skipPastDehydratedSuspenseInstance","popToNextHostParent","popHydrationState","warnIfUnhydratedTailNodes","hasUnhydratedTailNodes","resetHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","queueHydrationError","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","_store","validated","coerceRef","mixedRef","ref","_self","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","warnOnFunctionType","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","_created","_created2","_created3","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","_matchedFiber","_matchedFiber2","_matchedFiber3","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","_newFiber","_numberOfForks","_newFiber2","delete","_numberOfForks2","reconcileChildrenIterator","newChildrenIterable","iteratorFn","entries","_newChildren","_step","done","step","_newFiber3","_numberOfForks3","_newFiber4","_numberOfForks4","reconcileSingleTextNode","reconcileSingleElement","_existing","_created4","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","NO_CONTEXT","contextStackCursor$1","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","findFirstSuspended","row","revealOrder","NoFlags$1","HasEffect","Insertion","Layout","Passive$1","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionPrimary","_workInProgressVersionSecondary","registerMutableSourceForHydration","getVersion","_getVersion","version","mutableSourceEagerHydrationData","ReactCurrentDispatcher$1","ReactCurrentBatchConfig$1","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","currentlyRenderingFiber$1","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","localIdCounter","globalClientIdCounter","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","checkDidRenderIdHook","didRenderIdHook","bailoutHooks","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","cachedSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","create","destroy","firstEffect","mountRef","initialValue","_ref2","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","mountInsertionEffect","updateInsertionEffect","mountLayoutEffect","updateLayoutEffect","imperativeHandleEffect","refCallback","_inst","refObject","_inst2","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","_mountState","setValue","prevTransition","updateDeferredValue","_updateState","rerenderDeferredValue","_rerenderState","startTransition","setPending","options","currentTransition","_updatedFibers","updatedFibersCount","mountTransition","_mountState2","isPending","start","updateTransition","_updateState2","rerenderTransition","_rerenderState2","getIsUpdatingOpaqueValueInRenderPhaseInDEV","mountId","identifierPrefix","treeId","localId","globalClientId","updateId","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","enqueueUpdate$1","entangleTransitionUpdate","markUpdateInDevTools","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","now$2","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","setTimeout","PossiblyWeakMap$1","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","ping","pingSuspendedRoot","restorePendingUpdaters","then","attachRetryListener","suspenseBoundary","wakeables","resetSuspendedComponent","sourceFiber","rootRenderLanes","currentSource","getNearestSuspenseBoundaryToCapture","markSuspenseBoundaryShouldCapture","currentSuspenseBoundary","offscreenFiber","offscreenContainer","containerProps","currentSourceFiber","throwException","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","_suspenseBoundary","renderDidError","_errorInfo","isAlreadyFailedLegacyErrorBoundary","_lane","_update","getSuspendedCache","markUpdate","markRef","hadNoMutationsEffects","completedWork","didBailout","subtreeFlags","appendAllChildren","updateHostContainer","updateHostComponent","updateHostText","needsVisibilityToggle","isHidden","currentHostContext","oldText","newText","_instance","appendAllChildrenToContainer","containerChildSet","_instance2","portalOrRoot","childrenUnchanged","container","newChildSet","pendingChildren","currentInstance","recyclableInstance","newInstance","cutOffTailIfNeeded","renderState","hasRenderedATailFallback","tailMode","tailNode","tail","lastTailNode","_tailNode","_lastTailNode","bubbleProperties","newChildLanes","treeBaseDuration","_treeBaseDuration","_child2","_child3","completeWork","fiberRoot","pendingContext","wasHydrated","_wasHydrated","_rootContainerInstance","_currentHostContext","_wasHydrated2","_wasHydrated3","isTimedOutSuspense","primaryChildFragment","_isTimedOutSuspense","_primaryChildFragment","nextDidTimeout","prevDidTimeout","_prevState","_offscreenFiber","hasInvisibleChildContext","unstable_avoidThisFallback","renderDidSuspend","_primaryChildFragment2","_Component","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","_suspended","_newThenables","renderingStartTime","isBackwards","previousSibling","last","suspenseContext","popRenderLanes","_nextState","nextIsHidden","_prevState2","prevIsHidden","subtreeRenderLanes","ReactCurrentOwner$1","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","_innerPropTypes","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","baseLanes","cachePool","pushRenderLanes","spawnedCachePool","nextBaseLanes","prevBaseLanes","_nextState2","_subtreeRenderLanes","updateMode","updateProfiler","markRef$1","updateClassComponent","shouldError","tempInstance","hasContext","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","updateHostRoot","prevChildren","overrideState","cache","transitions","recoverableError","mountHostRootWithoutHydrating","_recoverableError","updateHostComponent$1","isDirectTextChild","updateHostText$1","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","_componentName2","ownerName","warningKey","debugSource","fileName","lineNumber","_componentName3","_componentName4","SUSPENDED_MARKER","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","mountSuspensePrimaryChildren","_dehydrated","updateDehydratedSuspenseComponent","retrySuspenseComponentWithoutHydrating","_nextPrimaryChildren","_nextFallbackChildren","fallbackChildFragment","mountSuspenseFallbackAfterRetryWithoutHydrating","_nextFallbackChildren2","_nextPrimaryChildren2","_fallbackChildFragment","updateSuspenseFallbackChildren","_primaryChildFragment3","_nextPrimaryChildren3","_primaryChildFragment4","updateSuspensePrimaryChildren","_nextFallbackChildren3","_nextPrimaryChildren4","_fallbackChildFragment2","_primaryChildFragment5","_prevOffscreenState","_nextPrimaryChildren5","_primaryChildFragment6","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","fiberMode","attemptHydrationAtLane","retry","retryDehydratedSuspenseBoundary","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","_i","initSuspenseListRenderState","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","_tail","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","newValue","providerPropTypes","oldValue","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","_hasChildWork","beginWork","_debugNeedsRemount","unresolvedProps","_unresolvedProps","_resolvedProps","_unresolvedProps2","_resolvedProps2","_unresolvedProps3","_resolvedProps3","_Component2","_unresolvedProps4","_resolvedProps4","unwindWork","_flags","_flags2","unwindInterruptedWork","interruptedWork","invokeGuardedCallbackProd","func","d","f","funcArgs","onError","invokeGuardedCallbackImpl","window","dispatchEvent","document","createEvent","fakeNode","createElement","invokeGuardedCallbackDev","evt","didCall","windowEvent","event","windowEventDescriptor","getOwnPropertyDescriptor","restoreAfterDispatch","removeEventListener","evtType","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","inner","addEventListener","initEvent","invokeGuardedCallbackImpl$1","hasError","caughtError","reporter","invokeGuardedCallback","hasCaughtError","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","inProgressLanes","inProgressRoot","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallCommitHookLayoutEffectListMount","nearestMountedAncestor","commitHookEffectListMount","captureCommitPhaseError","safelyCallComponentWillUnmount","safelyCallComponentDidMount","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","ensureCorrectReturnPointer","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","snapshot","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitPassiveEffectDurations","finishedRoot","_finishedWork$memoize","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","_updateQueue","_finishedWork$memoize2","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitSuspenseHydrationCallbacks","reappearLayoutEffectsOnFiber","hideOrUnhideAllChildren","hostSubtreeRoot","_instance3","instanceToUse","commitDetachRef","currentRef","commitUnmount","_effect","unmountHostComponents","emptyPortalContainer","commitNestedUnmounts","detachFiberMutation","detachFiberAfterEffects","hostInstance","emptyChildSet","commitContainer","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","before","insertOrAppendPlacementNode","_parent","_before","insertOrAppendPlacementNodeIntoContainer","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitSuspenseCallback","attachSuspenseRetryListeners","prevRootState","_prevRootState","_root","retryCache","resolveRetryWakeable","commitResetTextContent","commitMutationEffects","commitMutationEffects_begin","commitMutationEffects_complete","commitMutationEffectsOnFiber","wasHidden","markCommitTimeOfFallback","_newState","_isHidden","_current2","_wasHidden","offscreenBoundary","offscreenChild","disappearLayoutEffects_begin","primaryFlags","_current3","_current4","_current5","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","newOffscreenSubtreeIsHidden","commitLayoutMountEffects_complete","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","prevOffscreenSubtreeWasHidden","reappearLayoutEffects_begin","disappearLayoutEffects_complete","reappearLayoutEffects_complete","commitPassiveMountEffects","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","didWarnWrongReturnPointer","expectedReturnFiber","invokeLayoutEffectMountInDEV","invokePassiveEffectMountInDEV","invokeLayoutEffectUnmountInDEV","invokePassiveEffectUnmountInDEV","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","createComponentSelector","createHasPseudoClassSelector","selectors","createRoleSelector","role","createTextSelector","createTestNameSelector","findFiberRootForHostRoot","hostRoot","maybeFiber","matchSelector","selector","hasMatchingPaths","indexOf","dataTestID","selectorToString","findPaths","matchingFibers","selectorIndex","findAllNodes","instanceRoots","from","getFindAllNodesFailureDescription","maxSelectorIndex","matchedNames","unmatchedNames","findBoundingRects","boundingRects","targetRect","targetLeft","targetRight","width","targetTop","targetBottom","height","j","otherRect","otherLeft","otherRight","otherTop","otherBottom","splice","focusWithin","commitHooks","onCommitRoot$1","commitHook","observeVisibleRects","_setupIntersectionObs","disconnect","observe","unobserve","nextInstanceRoots","target","ReactCurrentActQueue","isLegacyActEnvironment","isReactActEnvironmentGlobal","IS_REACT_ACT_ENVIRONMENT","jestIsDefined","jest","isConcurrentActEnvironment","ceil","ReactCurrentDispatcher$2","ReactCurrentOwner$2","ReactCurrentBatchConfig$2","ReactCurrentActQueue$1","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","markUpdateLaneFromFiberToRoot","warnAboutRenderPhaseUpdatesInDEV","warnIfUpdatesNotWrappedWithActDEV","markRootSuspended$1","ensureRootIsScheduled","isBatchingLegacy","scheduleInitialHydrationOnRoot","warnAboutUpdateOnNotYetMountedFiberInDEV","existingCallbackNode","callbackNode","cancelCallback$1","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","didScheduleLegacyUpdate","performSyncWorkOnRoot","scheduleCallback$1","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","_errorRetryLanes","_fatalError","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","errors","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","_msUntilTimeout","jnd","checks","renderedValue","flushRoot","deferredUpdates","batchedUpdates","prevExecutionContext","discreteUpdates","flushSync","isAlreadyRendering","flushControlled","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","beginWork$1","_next","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","subtreeHasEffects","rootHasEffect","rootDidHavePassiveEffects","commitDoubleInvokeEffectsInDEV","onRecoverableError","renderPriority","flushPassiveEffectsImpl","profilerEffects","_fiber","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","hasPassiveEffects","invokeEffectsInDev","invokeEffectFn","primarySubtreeFlag","didWarnStateUpdateForNotYetMountedComponent","dummyFiber","originalWorkInProgressCopy","assignFiberPropertiesInDEV","originalError","replayError","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","renderingComponentName","dedupeKey","setStateComponentName","schedulingFiber","priorityLevel","actQueue","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","shouldConstruct$1","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","elements","primaryChildInstance","content","dehydratedNode","FiberRootNode","hydrate","_debugRootType","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","_initialState","ReactVersion","createPortal","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","findHostInstance","hostFiber","findHostInstanceWithWarning","methodName","createContainer","createHydrationContainer","current$1","getPublicRootInstance","containerFiber","attemptSynchronousHydration","markRetryLaneIfNotHydrated","markRetryLaneImpl","attemptContinuousHydration","attemptHydrationAtCurrentPriority","findHostInstanceWithNoPortals","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","obj","path","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","getCurrentFiber","reconcilerVersion"],"sources":["/home/kevin/R3F-Sandbox/42-first-r3f-application/node_modules/react-reconciler/cjs/react-reconciler.development.js"],"sourcesContent":["/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  module.exports = function $$$reconciler($$$hostConfig) {\n    var exports = {};\n'use strict';\n\nvar React = require('react');\nvar Scheduler = require('scheduler');\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nvar suppressWarning = false;\nfunction setSuppressWarning(newSuppressWarning) {\n  {\n    suppressWarning = newSuppressWarning;\n  }\n} // In DEV, calls to console.warn and console.error get replaced\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    if (!suppressWarning) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    if (!suppressWarning) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar assign = Object.assign;\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\n// -----------------------------------------------------------------------------\nvar enablePersistentOffscreenHostContainer = false; // -----------------------------------------------------------------------------\n// the react-reconciler package.\n\nvar enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\nvar enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\nvar enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\nvar warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\n\nvar enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\nvar enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\nvar enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\nvar FunctionComponent = 0;\nvar ClassComponent = 1;\nvar IndeterminateComponent = 2; // Before we know whether it is function or class\n\nvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\nvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\nvar HostComponent = 5;\nvar HostText = 6;\nvar Fragment = 7;\nvar Mode = 8;\nvar ContextConsumer = 9;\nvar ContextProvider = 10;\nvar ForwardRef = 11;\nvar Profiler = 12;\nvar SuspenseComponent = 13;\nvar MemoComponent = 14;\nvar SimpleMemoComponent = 15;\nvar LazyComponent = 16;\nvar IncompleteClassComponent = 17;\nvar DehydratedFragment = 18;\nvar SuspenseListComponent = 19;\nvar ScopeComponent = 21;\nvar OffscreenComponent = 22;\nvar LegacyHiddenComponent = 23;\nvar CacheComponent = 24;\nvar TracingMarkerComponent = 25;\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\nvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nfunction getWrappedName$1(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n} // Keep in sync with shared/getComponentNameFromType\n\n\nfunction getContextName$1(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentNameFromFiber(fiber) {\n  var tag = fiber.tag,\n      type = fiber.type;\n\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n\n    case ContextConsumer:\n      var context = type;\n      return getContextName$1(context) + '.Consumer';\n\n    case ContextProvider:\n      var provider = type;\n      return getContextName$1(provider._context) + '.Provider';\n\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n\n    case ForwardRef:\n      return getWrappedName$1(type, type.render, 'ForwardRef');\n\n    case Fragment:\n      return 'Fragment';\n\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n\n    case HostPortal:\n      return 'Portal';\n\n    case HostRoot:\n      return 'Root';\n\n    case HostText:\n      return 'Text';\n\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n\n      return 'Mode';\n\n    case OffscreenComponent:\n      return 'Offscreen';\n\n    case Profiler:\n      return 'Profiler';\n\n    case ScopeComponent:\n      return 'Scope';\n\n    case SuspenseComponent:\n      return 'Suspense';\n\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      break;\n\n  }\n\n  return null;\n}\n\n// Don't change these two values. They're used by React Dev Tools.\nvar NoFlags =\n/*                      */\n0;\nvar PerformedWork =\n/*                */\n1; // You can change the rest (and add more).\n\nvar Placement =\n/*                    */\n2;\nvar Update =\n/*                       */\n4;\nvar PlacementAndUpdate =\n/*           */\nPlacement | Update;\nvar ChildDeletion =\n/*                */\n16;\nvar ContentReset =\n/*                 */\n32;\nvar Callback =\n/*                     */\n64;\nvar DidCapture =\n/*                   */\n128;\nvar ForceClientRender =\n/*            */\n256;\nvar Ref =\n/*                          */\n512;\nvar Snapshot =\n/*                     */\n1024;\nvar Passive =\n/*                      */\n2048;\nvar Hydrating =\n/*                    */\n4096;\nvar HydratingAndUpdate =\n/*           */\nHydrating | Update;\nvar Visibility =\n/*                   */\n8192;\nvar StoreConsistency =\n/*             */\n16384;\nvar LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\nvar HostEffectMask =\n/*               */\n32767; // These are not really side effects, but we still reuse this field.\n\nvar Incomplete =\n/*                   */\n32768;\nvar ShouldCapture =\n/*                */\n65536;\nvar ForceUpdateForLegacySuspense =\n/* */\n131072;\nvar Forked =\n/*                       */\n1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\n\nvar RefStatic =\n/*                    */\n2097152;\nvar LayoutStatic =\n/*                 */\n4194304;\nvar PassiveStatic =\n/*                */\n8388608; // These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\n\nvar MountLayoutDev =\n/*               */\n16777216;\nvar MountPassiveDev =\n/*              */\n33554432; // Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nvar BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n// flag logic (see #20043)\nUpdate | Snapshot | ( 0);\nvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\nvar LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\nvar PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\n\nvar StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nfunction getNearestMountedFiber(fiber) {\n  var node = fiber;\n  var nearestMounted = fiber;\n\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    var nextNode = node;\n\n    do {\n      node = nextNode;\n\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  } // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n\n\n  return null;\n}\nfunction isFiberMounted(fiber) {\n  return getNearestMountedFiber(fiber) === fiber;\n}\nfunction isMounted(component) {\n  {\n    var owner = ReactCurrentOwner.current;\n\n    if (owner !== null && owner.tag === ClassComponent) {\n      var ownerFiber = owner;\n      var instance = ownerFiber.stateNode;\n\n      if (!instance._warnedAboutRefsInRender) {\n        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n      }\n\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  var fiber = get(component);\n\n  if (!fiber) {\n    return false;\n  }\n\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    var nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n\n    return fiber;\n  } // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n\n\n  var a = fiber;\n  var b = alternate;\n\n  while (true) {\n    var parentA = a.return;\n\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n\n    var parentB = parentA.alternate;\n\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      var nextParent = parentA.return;\n\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      } // If there's no parent, we're at the root.\n\n\n      break;\n    } // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n\n\n    if (parentA.child === parentB.child) {\n      var child = parentA.child;\n\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n\n        child = child.sibling;\n      } // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n\n\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      var didFindChild = false;\n      var _child = parentA.child;\n\n      while (_child) {\n        if (_child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n\n        if (_child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n\n        _child = _child.sibling;\n      }\n\n      if (!didFindChild) {\n        // Search parent B's child set\n        _child = parentB.child;\n\n        while (_child) {\n          if (_child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n\n          if (_child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n\n          _child = _child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  } // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n\n\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  } // Otherwise B has to be current branch.\n\n\n  return alternate;\n}\nfunction findCurrentHostFiber(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    var match = findCurrentHostFiberImpl(child);\n\n    if (match !== null) {\n      return match;\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nfunction findCurrentHostFiberWithNoPortals(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      var match = findCurrentHostFiberWithNoPortalsImpl(child);\n\n      if (match !== null) {\n        return match;\n      }\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// This is a host config that's used for the `react-reconciler` package on npm.\n// It is only used by third-party renderers.\n//\n// Its API lets you pass the host config as an argument.\n// However, inside the `react-reconciler` we treat host config as a module.\n// This file is a shim between two worlds.\n//\n// It works because the `react-reconciler` bundle is wrapped in something like:\n//\n// module.exports = function ($$$config) {\n//   /* reconciler code */\n// }\n//\n// So `$$$config` looks like a global variable, but it's\n// really an argument to a top-level wrapping function.\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\nvar getPublicInstance = $$$hostConfig.getPublicInstance;\nvar getRootHostContext = $$$hostConfig.getRootHostContext;\nvar getChildHostContext = $$$hostConfig.getChildHostContext;\nvar prepareForCommit = $$$hostConfig.prepareForCommit;\nvar resetAfterCommit = $$$hostConfig.resetAfterCommit;\nvar createInstance = $$$hostConfig.createInstance;\nvar appendInitialChild = $$$hostConfig.appendInitialChild;\nvar finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\nvar prepareUpdate = $$$hostConfig.prepareUpdate;\nvar shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\nvar createTextInstance = $$$hostConfig.createTextInstance;\nvar scheduleTimeout = $$$hostConfig.scheduleTimeout;\nvar cancelTimeout = $$$hostConfig.cancelTimeout;\nvar noTimeout = $$$hostConfig.noTimeout;\nvar now = $$$hostConfig.now;\nvar isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\nvar warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\nvar supportsMutation = $$$hostConfig.supportsMutation;\nvar supportsPersistence = $$$hostConfig.supportsPersistence;\nvar supportsHydration = $$$hostConfig.supportsHydration;\nvar getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\nvar beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\nvar afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\nvar preparePortalMount = $$$hostConfig.preparePortalMount;\nvar prepareScopeUpdate = $$$hostConfig.preparePortalMount;\nvar getInstanceFromScope = $$$hostConfig.getInstanceFromScope;\nvar getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\nvar detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n//      Microtasks\n//     (optional)\n// -------------------\n\nvar supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\nvar scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n//      Test selectors\n//     (optional)\n// -------------------\n\nvar supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\nvar findFiberRoot = $$$hostConfig.findFiberRoot;\nvar getBoundingRect = $$$hostConfig.getBoundingRect;\nvar getTextContent = $$$hostConfig.getTextContent;\nvar isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\nvar matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\nvar setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\nvar setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n//      Mutation\n//     (optional)\n// -------------------\n\nvar appendChild = $$$hostConfig.appendChild;\nvar appendChildToContainer = $$$hostConfig.appendChildToContainer;\nvar commitTextUpdate = $$$hostConfig.commitTextUpdate;\nvar commitMount = $$$hostConfig.commitMount;\nvar commitUpdate = $$$hostConfig.commitUpdate;\nvar insertBefore = $$$hostConfig.insertBefore;\nvar insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\nvar removeChild = $$$hostConfig.removeChild;\nvar removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\nvar resetTextContent = $$$hostConfig.resetTextContent;\nvar hideInstance = $$$hostConfig.hideInstance;\nvar hideTextInstance = $$$hostConfig.hideTextInstance;\nvar unhideInstance = $$$hostConfig.unhideInstance;\nvar unhideTextInstance = $$$hostConfig.unhideTextInstance;\nvar clearContainer = $$$hostConfig.clearContainer; // -------------------\n//     Persistence\n//     (optional)\n// -------------------\n\nvar cloneInstance = $$$hostConfig.cloneInstance;\nvar createContainerChildSet = $$$hostConfig.createContainerChildSet;\nvar appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\nvar finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\nvar replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\nvar getOffscreenContainerType = $$$hostConfig.getOffscreenContainerType;\nvar getOffscreenContainerProps = $$$hostConfig.getOffscreenContainerProps;\nvar cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\nvar cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n//     Hydration\n//     (optional)\n// -------------------\n\nvar canHydrateInstance = $$$hostConfig.canHydrateInstance;\nvar canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\nvar canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\nvar isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\nvar isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\nvar registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\nvar getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\nvar getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\nvar getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\nvar getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\nvar hydrateInstance = $$$hostConfig.hydrateInstance;\nvar hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\nvar hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\nvar getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\nvar commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\nvar commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\nvar clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\nvar clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\nvar shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\nvar didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\nvar didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\nvar didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\nvar didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\nvar didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\nvar didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\nvar didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\nvar didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\nvar didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\nvar didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\nvar didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\nvar didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\nvar didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\nvar didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\nvar errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar valueStack = [];\nvar fiberStack;\n\n{\n  fiberStack = [];\n}\n\nvar index = -1;\n\nfunction createCursor(defaultValue) {\n  return {\n    current: defaultValue\n  };\n}\n\nfunction pop(cursor, fiber) {\n  if (index < 0) {\n    {\n      error('Unexpected pop.');\n    }\n\n    return;\n  }\n\n  {\n    if (fiber !== fiberStack[index]) {\n      error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n  valueStack[index] = null;\n\n  {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push(cursor, value, fiber) {\n  index++;\n  valueStack[index] = cursor.current;\n\n  {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nvar warnedAboutMissingGetChildContext;\n\n{\n  warnedAboutMissingGetChildContext = {};\n}\n\nvar emptyContextObject = {};\n\n{\n  Object.freeze(emptyContextObject);\n} // A cursor to the current merged context object on the stack.\n\n\nvar contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\nvar didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\n\nvar previousContext = emptyContextObject;\n\nfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n  {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n  {\n    var instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(workInProgress, unmaskedContext) {\n  {\n    var type = workInProgress.type;\n    var contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    } // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n    var instance = workInProgress.stateNode;\n\n    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    var context = {};\n\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    {\n      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n\n\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged() {\n  {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type) {\n  {\n    var childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(fiber, context, didChange) {\n  {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(fiber, type, parentContext) {\n  {\n    var instance = fiber.stateNode;\n    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n    if (typeof instance.getChildContext !== 'function') {\n      {\n        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n\n          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n\n      return parentContext;\n    }\n\n    var childContext = instance.getChildContext();\n\n    for (var contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n      }\n    }\n\n    {\n      var name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return assign({}, parentContext, childContext);\n  }\n}\n\nfunction pushContextProvider(workInProgress) {\n  {\n    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n\n    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(workInProgress, type, didChange) {\n  {\n    var instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      var mergedContext = processChildContext(workInProgress, type, previousContext);\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber) {\n  {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    var node = fiber;\n\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n\n        case ClassComponent:\n          {\n            var Component = node.type;\n\n            if (isContextProvider(Component)) {\n              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n            }\n\n            break;\n          }\n      }\n\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar LegacyRoot = 0;\nvar ConcurrentRoot = 1;\n\nvar NoMode =\n/*                         */\n0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\nvar ConcurrentMode =\n/*                 */\n1;\nvar ProfileMode =\n/*                    */\n2;\nvar StrictLegacyMode =\n/*               */\n8;\nvar StrictEffectsMode =\n/*              */\n16;\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nfunction clz32Fallback(x) {\n  var asUint = x >>> 0;\n\n  if (asUint === 0) {\n    return 32;\n  }\n\n  return 31 - (log(asUint) / LN2 | 0) | 0;\n}\n\n// If those values are changed that package should be rebuilt and redeployed.\n\nvar TotalLanes = 31;\nvar NoLanes =\n/*                        */\n0;\nvar NoLane =\n/*                          */\n0;\nvar SyncLane =\n/*                        */\n1;\nvar InputContinuousHydrationLane =\n/*    */\n2;\nvar InputContinuousLane =\n/*            */\n4;\nvar DefaultHydrationLane =\n/*            */\n8;\nvar DefaultLane =\n/*                    */\n16;\nvar TransitionHydrationLane =\n/*                */\n32;\nvar TransitionLanes =\n/*                       */\n4194240;\nvar TransitionLane1 =\n/*                        */\n64;\nvar TransitionLane2 =\n/*                        */\n128;\nvar TransitionLane3 =\n/*                        */\n256;\nvar TransitionLane4 =\n/*                        */\n512;\nvar TransitionLane5 =\n/*                        */\n1024;\nvar TransitionLane6 =\n/*                        */\n2048;\nvar TransitionLane7 =\n/*                        */\n4096;\nvar TransitionLane8 =\n/*                        */\n8192;\nvar TransitionLane9 =\n/*                        */\n16384;\nvar TransitionLane10 =\n/*                       */\n32768;\nvar TransitionLane11 =\n/*                       */\n65536;\nvar TransitionLane12 =\n/*                       */\n131072;\nvar TransitionLane13 =\n/*                       */\n262144;\nvar TransitionLane14 =\n/*                       */\n524288;\nvar TransitionLane15 =\n/*                       */\n1048576;\nvar TransitionLane16 =\n/*                       */\n2097152;\nvar RetryLanes =\n/*                            */\n130023424;\nvar RetryLane1 =\n/*                             */\n4194304;\nvar RetryLane2 =\n/*                             */\n8388608;\nvar RetryLane3 =\n/*                             */\n16777216;\nvar RetryLane4 =\n/*                             */\n33554432;\nvar RetryLane5 =\n/*                             */\n67108864;\nvar SomeRetryLane = RetryLane1;\nvar SelectiveHydrationLane =\n/*          */\n134217728;\nvar NonIdleLanes =\n/*                                 */\n268435455;\nvar IdleHydrationLane =\n/*               */\n268435456;\nvar IdleLane =\n/*                       */\n536870912;\nvar OffscreenLane =\n/*                   */\n1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\n\nfunction getLabelForLane(lane) {\n  {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\nvar NoTimestamp = -1;\nvar nextTransitionLane = TransitionLane1;\nvar nextRetryLane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes) {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n\n    case InputContinuousLane:\n      return InputContinuousLane;\n\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n\n    case DefaultLane:\n      return DefaultLane;\n\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n\n    case IdleLane:\n      return IdleLane;\n\n    case OffscreenLane:\n      return OffscreenLane;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n\n      return lanes;\n  }\n}\n\nfunction getNextLanes(root, wipLanes) {\n  // Early bailout if there's no pending work left.\n  var pendingLanes = root.pendingLanes;\n\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  var nextLanes = NoLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n\n  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n  if (nonIdlePendingLanes !== NoLanes) {\n    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  } // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n\n\n  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n  // bother waiting until the root is complete.\n  (wipLanes & suspendedLanes) === NoLanes) {\n    var nextLane = getHighestPriorityLane(nextLanes);\n    var wipLane = getHighestPriorityLane(wipLanes);\n\n    if ( // Tests whether the next lane is equal or lower priority than the wip\n    // one. This works because the bits decrease in priority as you go left.\n    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n    // only difference between default updates and transition updates is that\n    // default updates do not support refresh transitions.\n    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  } // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n\n\n  var entangledLanes = root.entangledLanes;\n\n  if (entangledLanes !== NoLanes) {\n    var entanglements = root.entanglements;\n    var lanes = nextLanes & entangledLanes;\n\n    while (lanes > 0) {\n      var index = pickArbitraryLaneIndex(lanes);\n      var lane = 1 << index;\n      nextLanes |= entanglements[index];\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\nfunction getMostRecentEventTime(root, lanes) {\n  var eventTimes = root.eventTimes;\n  var mostRecentEventTime = NoTimestamp;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var eventTime = eventTimes[index];\n\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane, currentTime) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      }\n\n      return NoTimestamp;\n  }\n}\n\nfunction markStarvedLanesAsExpired(root, currentTime) {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n  var pendingLanes = root.pendingLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes;\n  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n\n  var lanes = pendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var expirationTime = expirationTimes[index];\n\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n} // This returns the highest priority pending lanes regardless of whether they\n// are suspended.\n\nfunction getHighestPriorityPendingLanes(root) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\nfunction getLanesToRetrySynchronouslyOnError(root) {\n  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n\n  return NoLanes;\n}\nfunction includesSyncLane(lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\nfunction includesNonIdleWork(lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nfunction includesOnlyRetries(lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nfunction includesOnlyTransitions(lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\nfunction includesBlockingLane(root, lanes) {\n\n  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\nfunction includesExpiredLane(root, lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\nfunction isTransitionLane(lane) {\n  return (lane & TransitionLanes) !== 0;\n}\nfunction claimNextTransitionLane() {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  var lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n\n  if ((nextTransitionLane & TransitionLanes) === 0) {\n    nextTransitionLane = TransitionLane1;\n  }\n\n  return lane;\n}\nfunction claimNextRetryLane() {\n  var lane = nextRetryLane;\n  nextRetryLane <<= 1;\n\n  if ((nextRetryLane & RetryLanes) === 0) {\n    nextRetryLane = RetryLane1;\n  }\n\n  return lane;\n}\nfunction getHighestPriorityLane(lanes) {\n  return lanes & -lanes;\n}\nfunction pickArbitraryLane(lanes) {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nfunction includesSomeLane(a, b) {\n  return (a & b) !== NoLanes;\n}\nfunction isSubsetOfLanes(set, subset) {\n  return (set & subset) === subset;\n}\nfunction mergeLanes(a, b) {\n  return a | b;\n}\nfunction removeLanes(set, subset) {\n  return set & ~subset;\n}\nfunction intersectLanes(a, b) {\n  return a & b;\n} // Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\n\nfunction laneToLanes(lane) {\n  return lane;\n}\nfunction higherPriorityLane(a, b) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\nfunction createLaneMap(initial) {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  var laneMap = [];\n\n  for (var i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n\n  return laneMap;\n}\nfunction markRootUpdated(root, updateLane, eventTime) {\n  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  var eventTimes = root.eventTimes;\n  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n\n  eventTimes[index] = eventTime;\n}\nfunction markRootSuspended(root, suspendedLanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n  var expirationTimes = root.expirationTimes;\n  var lanes = suspendedLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootPinged(root, pingedLanes, eventTime) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\nfunction markRootFinished(root, remainingLanes) {\n  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n  root.pendingLanes = remainingLanes; // Let's try everything again\n\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n  root.entangledLanes &= remainingLanes;\n  var entanglements = root.entanglements;\n  var eventTimes = root.eventTimes;\n  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n  var lanes = noLongerPendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootEntangled(root, entangledLanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n  var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n  var entanglements = root.entanglements;\n  var lanes = rootEntangledLanes;\n\n  while (lanes) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n\n    if ( // Is this one of the newly entangled lanes?\n    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n    entanglements[index] & entangledLanes) {\n      entanglements[index] |= entangledLanes;\n    }\n\n    lanes &= ~lane;\n  }\n}\nfunction getBumpedLaneForHydration(root, renderLanes) {\n  var renderLane = getHighestPriorityLane(renderLanes);\n  var lane;\n\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  } // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n\n\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\nfunction addFiberToLanesMap(root, fiber, lanes) {\n\n  if (!isDevToolsPresent) {\n    return;\n  }\n\n  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n  while (lanes > 0) {\n    var index = laneToIndex(lanes);\n    var lane = 1 << index;\n    var updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n    lanes &= ~lane;\n  }\n}\nfunction movePendingFibersToMemoized(root, lanes) {\n\n  if (!isDevToolsPresent) {\n    return;\n  }\n\n  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  var memoizedUpdaters = root.memoizedUpdaters;\n\n  while (lanes > 0) {\n    var index = laneToIndex(lanes);\n    var lane = 1 << index;\n    var updaters = pendingUpdatersLaneMap[index];\n\n    if (updaters.size > 0) {\n      updaters.forEach(function (fiber) {\n        var alternate = fiber.alternate;\n\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nvar DiscreteEventPriority = SyncLane;\nvar ContinuousEventPriority = InputContinuousLane;\nvar DefaultEventPriority = DefaultLane;\nvar IdleEventPriority = IdleLane;\nvar currentUpdatePriority = NoLane;\nfunction getCurrentUpdatePriority() {\n  return currentUpdatePriority;\n}\nfunction setCurrentUpdatePriority(newPriority) {\n  currentUpdatePriority = newPriority;\n}\nfunction runWithPriority(priority, fn) {\n  var previousPriority = currentUpdatePriority;\n\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\nfunction higherEventPriority(a, b) {\n  return a !== 0 && a < b ? a : b;\n}\nfunction lowerEventPriority(a, b) {\n  return a === 0 || a > b ? a : b;\n}\nfunction isHigherEventPriority(a, b) {\n  return a !== 0 && a < b;\n}\nfunction lanesToEventPriority(lanes) {\n  var lane = getHighestPriorityLane(lanes);\n\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n\n  return IdleEventPriority;\n}\n\n// This module only exists as an ESM wrapper around the external CommonJS\nvar scheduleCallback = Scheduler.unstable_scheduleCallback;\nvar cancelCallback = Scheduler.unstable_cancelCallback;\nvar shouldYield = Scheduler.unstable_shouldYield;\nvar requestPaint = Scheduler.unstable_requestPaint;\nvar now$1 = Scheduler.unstable_now;\nvar ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nvar UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nvar NormalPriority = Scheduler.unstable_NormalPriority;\nvar IdlePriority = Scheduler.unstable_IdlePriority;\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nvar unstable_yieldValue = Scheduler.unstable_yieldValue;\nvar unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n\nvar rendererID = null;\nvar injectedHook = null;\nvar injectedProfilingHooks = null;\nvar hasLoggedError = false;\nvar isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n\n  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n\n  if (!hook.supportsFiber) {\n    {\n      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n    } // DevTools exists, even though it doesn't support Fiber.\n\n\n    return true;\n  }\n\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = assign({}, internals, {\n        getLaneLabelMap: getLaneLabelMap,\n        injectProfilingHooks: injectProfilingHooks\n      });\n    }\n\n    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    {\n      error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\nfunction onScheduleRoot(root, children) {\n  {\n    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if ( !hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitRoot(root, eventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      var didError = (root.current.flags & DidCapture) === DidCapture;\n\n      if (enableProfilerTimer) {\n        var schedulerPriority;\n\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriority = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriority = IdlePriority;\n            break;\n\n          default:\n            schedulerPriority = NormalPriority;\n            break;\n        }\n\n        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onPostCommitRoot(root) {\n  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitUnmount(fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction setIsStrictModeForDevtools(newIsStrictMode) {\n  {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n\n            error('React instrumentation encountered an error: %s', err);\n          }\n        }\n      }\n    }\n  }\n} // Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks) {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap() {\n  {\n    var map = new Map();\n    var lane = 1;\n\n    for (var index = 0; index < TotalLanes; index++) {\n      var label = getLabelForLane(lane);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  }\n}\n\nfunction markCommitStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\nfunction markCommitStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\nfunction markComponentRenderStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\nfunction markComponentRenderStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\nfunction markComponentPassiveEffectMountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\nfunction markComponentPassiveEffectMountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\nfunction markComponentPassiveEffectUnmountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\nfunction markComponentPassiveEffectUnmountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\nfunction markComponentLayoutEffectMountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\nfunction markComponentLayoutEffectMountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\nfunction markComponentLayoutEffectUnmountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\nfunction markComponentLayoutEffectUnmountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\nfunction markComponentErrored(fiber, thrownValue, lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\nfunction markComponentSuspended(fiber, wakeable, lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\nfunction markLayoutEffectsStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\nfunction markLayoutEffectsStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\nfunction markPassiveEffectsStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\nfunction markPassiveEffectsStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\nfunction markRenderStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\nfunction markRenderYielded() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\nfunction markRenderStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\nfunction markRenderScheduled(lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\nfunction markForceUpdateScheduled(fiber, lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\nfunction markStateUpdateScheduled(fiber, lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar syncQueue = null;\nvar includesLegacySyncCallbacks = false;\nvar isFlushingSyncQueue = false;\nfunction scheduleSyncCallback(callback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\nfunction scheduleLegacySyncCallback(callback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\nfunction flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\nfunction flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    var i = 0;\n    var previousUpdatePriority = getCurrentUpdatePriority();\n\n    try {\n      var isSync = true;\n      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n\n      setCurrentUpdatePriority(DiscreteEventPriority);\n\n      for (; i < queue.length; i++) {\n        var callback = queue[i];\n\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      } // Resume flushing in the next tick\n\n\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n\n  return null;\n}\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nfunction isRootDehydrated(root) {\n  var currentState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n\nvar ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\nvar NoTransition = null;\nfunction requestCurrentTransition() {\n  return ReactCurrentBatchConfig.transition;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\n\nfunction shallowEqual(objA, objB) {\n  if (objectIs(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    var currentKey = keysA[i];\n\n    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction describeFiber(fiber) {\n  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;\n  var source =  fiber._debugSource ;\n\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type);\n\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy');\n\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList');\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type);\n\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render);\n\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type);\n\n    default:\n      return '';\n  }\n}\n\nfunction getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    var info = '';\n    var node = workInProgress;\n\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\nvar current = null;\nvar isRendering = false;\nfunction getCurrentFiberOwnerNameInDevOrNull() {\n  {\n    if (current === null) {\n      return null;\n    }\n\n    var owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n\n  return null;\n}\n\nfunction getCurrentFiberStackInDev() {\n  {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n}\n\nfunction resetCurrentFiber() {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nfunction setCurrentFiber(fiber) {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nfunction setIsRendering(rendering) {\n  {\n    isRendering = rendering;\n  }\n}\n\nvar ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n  flushPendingUnsafeLifecycleWarnings: function () {},\n  recordLegacyContextWarning: function (fiber, instance) {},\n  flushLegacyContextWarning: function () {},\n  discardPendingWarnings: function () {}\n};\n\n{\n  var findStrictRoot = function (fiber) {\n    var maybeStrictRoot = null;\n    var node = fiber;\n\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  var setToSortedString = function (set) {\n    var array = [];\n    set.forEach(function (value) {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  var pendingComponentWillMountWarnings = [];\n  var pendingUNSAFE_ComponentWillMountWarnings = [];\n  var pendingComponentWillReceivePropsWarnings = [];\n  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n  var pendingComponentWillUpdateWarnings = [];\n  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n  var didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n    // We do an initial pass to gather component names\n    var componentWillMountUniqueNames = new Set();\n\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(function (fiber) {\n        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    var UNSAFE_componentWillMountUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    var componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    var componentWillUpdateUniqueNames = new Set();\n\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    } // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n\n      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n    }\n  };\n\n  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n  var didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n    var strictRoot = findStrictRoot(fiber);\n\n    if (strictRoot === null) {\n      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n      return;\n    } // Dedup strategy: Warn once per component.\n\n\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n      if (fiberArray.length === 0) {\n        return;\n      }\n\n      var firstFiber = fiberArray[0];\n      var uniqueNames = new Set();\n      fiberArray.forEach(function (fiber) {\n        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutLegacyContext.add(fiber.type);\n      });\n      var sortedNames = setToSortedString(uniqueNames);\n\n      try {\n        setCurrentFiber(firstFiber);\n\n        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n      } finally {\n        resetCurrentFiber();\n      }\n    });\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = function () {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkPropStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    var props = assign({}, baseProps);\n    var defaultProps = Component.defaultProps;\n\n    for (var propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\nvar valueCursor = createCursor(null);\nvar rendererSigil;\n\n{\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nvar currentlyRenderingFiber = null;\nvar lastContextDependency = null;\nvar lastFullyObservedContext = null;\nvar isDisallowedContextReadInDEV = false;\nfunction resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction enterDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nfunction exitDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction pushProvider(providerFiber, context, nextValue) {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n    context._currentValue = nextValue;\n\n    {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n    context._currentValue2 = nextValue;\n\n    {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\nfunction popProvider(context, providerFiber) {\n  var currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n\n  if (isPrimaryRenderer) {\n    {\n      context._currentValue = currentValue;\n    }\n  } else {\n    {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\nfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  var node = parent;\n\n  while (node !== null) {\n    var alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    }\n\n    if (node === propagationRoot) {\n      break;\n    }\n\n    node = node.return;\n  }\n\n  {\n    if (node !== propagationRoot) {\n      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n}\nfunction propagateContextChange(workInProgress, context, renderLanes) {\n  {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n\n  var fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    var nextFiber = void 0; // Visit this fiber.\n\n    var list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      var dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            var lane = pickArbitraryLane(renderLanes);\n            var update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            // Inlined `enqueueUpdate` to remove interleaved update check\n\n            var updateQueue = fiber.updateQueue;\n\n            if (updateQueue === null) ; else {\n              var sharedQueue = updateQueue.shared;\n              var pending = sharedQueue.pending;\n\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          var alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if ( fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      var parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      var _alternate = parentSuspense.alternate;\n\n      if (_alternate !== null) {\n        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        var sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\nfunction prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  var dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    {\n      var firstContext = dependencies.firstContext;\n\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        } // Reset the work-in-progress list\n\n\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\nfunction readContext(context) {\n  {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n\n  if (lastFullyObservedContext === context) ; else {\n    var contextItem = {\n      context: context,\n      memoizedValue: value,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return value;\n}\n\n// An array of all update queues that received updates during the current\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\nvar interleavedQueues = null;\nfunction pushInterleavedQueue(queue) {\n  if (interleavedQueues === null) {\n    interleavedQueues = [queue];\n  } else {\n    interleavedQueues.push(queue);\n  }\n}\nfunction enqueueInterleavedUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (interleavedQueues !== null) {\n    for (var i = 0; i < interleavedQueues.length; i++) {\n      var queue = interleavedQueues[i];\n      var lastInterleavedUpdate = queue.interleaved;\n\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        var firstInterleavedUpdate = lastInterleavedUpdate.next;\n        var lastPendingUpdate = queue.pending;\n\n        if (lastPendingUpdate !== null) {\n          var firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = firstInterleavedUpdate;\n          lastInterleavedUpdate.next = firstPendingUpdate;\n        }\n\n        queue.pending = lastInterleavedUpdate;\n      }\n    }\n\n    interleavedQueues = null;\n  }\n}\n\nvar UpdateState = 0;\nvar ReplaceState = 1;\nvar ForceUpdate = 2;\nvar CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\n\nvar hasForceUpdate = false;\nvar didWarnUpdateInsideUpdate;\nvar currentlyProcessingQueue;\n\n{\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n}\n\nfunction initializeUpdateQueue(fiber) {\n  var queue = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes\n    },\n    effects: null\n  };\n  fiber.updateQueue = queue;\n}\nfunction cloneUpdateQueue(current, workInProgress) {\n  // Clone the update queue from current. Unless it's already a clone.\n  var queue = workInProgress.updateQueue;\n  var currentQueue = current.updateQueue;\n\n  if (queue === currentQueue) {\n    var clone = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\nfunction createUpdate(eventTime, lane) {\n  var update = {\n    eventTime: eventTime,\n    lane: lane,\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n    next: null\n  };\n  return update;\n}\nfunction enqueueUpdate(fiber, update, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  if (isInterleavedUpdate(fiber)) {\n    var interleaved = sharedQueue.interleaved;\n\n    if (interleaved === null) {\n      // This is the first update. Create a circular list.\n      update.next = update; // At the end of the current render, this queue's interleaved updates will\n      // be transferred to the pending queue.\n\n      pushInterleavedQueue(sharedQueue);\n    } else {\n      update.next = interleaved.next;\n      interleaved.next = update;\n    }\n\n    sharedQueue.interleaved = update;\n  } else {\n    var pending = sharedQueue.pending;\n\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n\n    sharedQueue.pending = update;\n  }\n\n  {\n    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\nfunction entangleTransitions(root, fiber, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  if (isTransitionLane(lane)) {\n    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\nfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n  var current = workInProgress.alternate;\n\n  if (current !== null) {\n    var currentQueue = current.updateQueue;\n\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      var newFirst = null;\n      var newLast = null;\n      var firstBaseUpdate = queue.firstBaseUpdate;\n\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        var update = firstBaseUpdate;\n\n        do {\n          var clone = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n\n          update = update.next;\n        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  } // Append the update to the end of the list.\n\n\n  var lastBaseUpdate = queue.lastBaseUpdate;\n\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n  switch (update.tag) {\n    case ReplaceState:\n      {\n        var payload = update.payload;\n\n        if (typeof payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          var nextState = payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n\n              try {\n                payload.call(instance, prevState, nextProps);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n\n          return nextState;\n        } // State object\n\n\n        return payload;\n      }\n\n    case CaptureUpdate:\n      {\n        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n      }\n    // Intentional fallthrough\n\n    case UpdateState:\n      {\n        var _payload = update.payload;\n        var partialState;\n\n        if (typeof _payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          partialState = _payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n\n              try {\n                _payload.call(instance, prevState, nextProps);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n        } else {\n          // Partial state object\n          partialState = _payload;\n        }\n\n        if (partialState === null || partialState === undefined) {\n          // Null and undefined are treated as no-ops.\n          return prevState;\n        } // Merge the partial state and the previous state.\n\n\n        return assign({}, prevState, partialState);\n      }\n\n    case ForceUpdate:\n      {\n        hasForceUpdate = true;\n        return prevState;\n      }\n  }\n\n  return prevState;\n}\n\nfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n  // This is always non-null on a ClassComponent or HostRoot\n  var queue = workInProgress.updateQueue;\n  hasForceUpdate = false;\n\n  {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  var firstBaseUpdate = queue.firstBaseUpdate;\n  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n  var pendingQueue = queue.shared.pending;\n\n  if (pendingQueue !== null) {\n    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n\n    var lastPendingUpdate = pendingQueue;\n    var firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n\n    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n\n    var current = workInProgress.alternate;\n\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var currentQueue = current.updateQueue;\n      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  } // These values may change as we process the queue.\n\n\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n\n    var newLanes = NoLanes;\n    var newBaseState = null;\n    var newFirstBaseUpdate = null;\n    var newLastBaseUpdate = null;\n    var update = firstBaseUpdate;\n\n    do {\n      var updateLane = update.lane;\n      var updateEventTime = update.eventTime;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n          next: null\n        };\n\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        } // Update the remaining priority in the queue.\n\n\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newLastBaseUpdate !== null) {\n          var _clone = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n        } // Process this update.\n\n\n        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n        var callback = update.callback;\n\n        if (callback !== null && // If the update was already committed, we should not queue its\n        // callback again.\n        update.lane !== NoLane) {\n          workInProgress.flags |= Callback;\n          var effects = queue.effects;\n\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n\n      update = update.next;\n\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n\n          var _firstPendingUpdate = _lastPendingUpdate.next;\n          _lastPendingUpdate.next = null;\n          update = _firstPendingUpdate;\n          queue.lastBaseUpdate = _lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = newBaseState;\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n\n    var lastInterleaved = queue.shared.interleaved;\n\n    if (lastInterleaved !== null) {\n      var interleaved = lastInterleaved;\n\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = interleaved.next;\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    } // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n\n\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n  }\n\n  callback.call(context);\n}\n\nfunction resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\nfunction checkHasForceUpdateAfterProcessing() {\n  return hasForceUpdate;\n}\nfunction commitUpdateQueue(finishedWork, finishedQueue, instance) {\n  // Commit the effects\n  var effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n\n  if (effects !== null) {\n    for (var i = 0; i < effects.length; i++) {\n      var effect = effects[i];\n      var callback = effect.callback;\n\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n\nvar fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\n\nvar emptyRefsObject = new React.Component().refs;\nvar didWarnAboutStateAssignmentForComponent;\nvar didWarnAboutUninitializedState;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nvar didWarnAboutLegacyLifecyclesAndDerivedState;\nvar didWarnAboutUndefinedDerivedState;\nvar warnOnUndefinedDerivedState;\nvar warnOnInvalidCallback;\nvar didWarnAboutDirectlyAssigningPropsToState;\nvar didWarnAboutContextTypeAndContextTypes;\nvar didWarnAboutInvalidateContextType;\n\n{\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n  var didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function (callback, callerName) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n\n    var key = callerName + '_' + callback;\n\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n\n      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n    }\n  };\n\n  warnOnUndefinedDerivedState = function (type, partialState) {\n    if (partialState === undefined) {\n      var componentName = getComponentNameFromType(type) || 'Component';\n\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n\n        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n      }\n    }\n  }; // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n\n\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function () {\n      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n    }\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n  var prevState = workInProgress.memoizedState;\n  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  {\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    warnOnUndefinedDerivedState(ctor, partialState);\n  } // Merge the partial state and the previous state.\n\n\n  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n  // base state.\n\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    var updateQueue = workInProgress.updateQueue;\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nvar classComponentUpdater = {\n  isMounted: isMounted,\n  enqueueSetState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate: function (inst, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  }\n};\n\nfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n  var instance = workInProgress.stateNode;\n\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n    {\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      if (shouldUpdate === undefined) {\n        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress, ctor, newProps) {\n  var instance = workInProgress.stateNode;\n\n  {\n    var name = getComponentNameFromType(ctor) || 'Component';\n    var renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n      } else {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n      }\n    }\n\n    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n    }\n\n    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n    }\n\n    if (instance.propTypes) {\n      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n    }\n\n    if (instance.contextType) {\n      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n    }\n\n    {\n      if (instance.contextTypes) {\n        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      }\n\n      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n    }\n\n    if (typeof instance.componentDidUnmount === 'function') {\n      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n    }\n\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n    }\n\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n    }\n\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n    }\n\n    var hasMutatedProps = instance.props !== newProps;\n\n    if (instance.props !== undefined && hasMutatedProps) {\n      error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n    }\n\n    if (instance.defaultProps) {\n      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n    }\n\n    var _state = instance.state;\n\n    if (_state && (typeof _state !== 'object' || isArray(_state))) {\n      error('%s.state: must be set to an object or null', name);\n    }\n\n    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress, instance) {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n  set(instance, workInProgress);\n\n  {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(workInProgress, ctor, props) {\n  var isLegacyContextConsumer = false;\n  var unmaskedContext = emptyContextObject;\n  var context = emptyContextObject;\n  var contextType = ctor.contextType;\n\n  {\n    if ('contextType' in ctor) {\n      var isValid = // Allow null for conditional declaration\n      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n        var addendum = '';\n\n        if (contextType === undefined) {\n          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n        }\n\n        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext(contextType);\n  } else {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    var contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n  }\n\n  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n  {\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n  adoptClassInstance(workInProgress, instance);\n\n  {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n\n        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n      }\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n      var foundWillMountName = null;\n      var foundWillReceivePropsName = null;\n      var foundWillUpdateName = null;\n\n      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n\n      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n        }\n      }\n    }\n  } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    {\n      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    {\n      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n\n        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n      }\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  var instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n  initializeUpdateQueue(workInProgress);\n  var contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else {\n    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  {\n    if (instance.state === newProps) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n    }\n\n    {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    instance.state = workInProgress.memoizedState;\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    var fiberFlags = Update;\n\n    {\n      fiberFlags |= LayoutStatic;\n    }\n\n    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n      fiberFlags |= MountLayoutDev;\n    }\n\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  var oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var fiberFlags = Update;\n\n      {\n        fiberFlags |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= fiberFlags;\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags = Update;\n\n      {\n        _fiberFlags |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        _fiberFlags |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= _fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags2 = Update;\n\n      {\n        _fiberFlags2 |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        _fiberFlags2 |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= _fiberFlags2;\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\nfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  cloneUpdateQueue(current, workInProgress);\n  var unresolvedOldProps = workInProgress.memoizedProps;\n  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  var unresolvedNewProps = workInProgress.pendingProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n  // both before and after `shouldComponentUpdate` has been called. Not ideal,\n  // but I'm loath to refactor this function. This only happens for memoized\n  // components so it's not that common.\n  enableLazyContextPropagation   ;\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n}\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nvar forkStack = [];\nvar forkStackIndex = 0;\nvar treeForkProvider = null;\nvar treeForkCount = 0;\nvar idStack = [];\nvar idStackIndex = 0;\nvar treeContextProvider = null;\nvar treeContextId = 1;\nvar treeContextOverflow = '';\nfunction isForkedChild(workInProgress) {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\nfunction getForksAtLevel(workInProgress) {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\nfunction getTreeId() {\n  var overflow = treeContextOverflow;\n  var idWithLeadingBit = treeContextId;\n  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\nfunction pushTreeFork(workInProgress, totalChildren) {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n  warnIfNotHydrating();\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\nfunction pushTreeId(workInProgress, totalChildren, index) {\n  warnIfNotHydrating();\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextProvider = workInProgress;\n  var baseIdWithLeadingBit = treeContextId;\n  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n\n  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n  var slot = index + 1;\n  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n    var restOfBaseId = baseId >> numberOfOverflowBits;\n    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n\n    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    var restOfNewBits = slot << restOfBaseLength;\n    var id = restOfNewBits | restOfBaseId;\n    var overflow = newOverflow + baseOverflow;\n    treeContextId = 1 << restOfLength | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    var newBits = slot << baseLength;\n\n    var _id = newBits | baseId;\n\n    var _overflow = baseOverflow;\n    treeContextId = 1 << length | _id;\n    treeContextOverflow = _overflow;\n  }\n}\nfunction pushMaterializedTreeId(workInProgress) {\n  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n  // in its children.\n\n  var returnFiber = workInProgress.return;\n\n  if (returnFiber !== null) {\n    var numberOfForks = 1;\n    var slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number) {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id) {\n  return 1 << getBitLength(id) - 1;\n}\n\nfunction popTreeContext(workInProgress) {\n  // Restore the previous values.\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\nfunction getSuspendedTreeContext() {\n  warnIfNotHydrating();\n\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow\n    };\n  } else {\n    return null;\n  }\n}\nfunction restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n  warnIfNotHydrating();\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  {\n    if (!getIsHydrating()) {\n      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n    }\n  }\n}\n\n// This may have been an insertion or a hydration.\n\nvar hydrationParentFiber = null;\nvar nextHydratableInstance = null;\nvar isHydrating = false;\nvar didSuspend = false; // Hydration errors that were thrown inside this boundary\n\nvar hydrationErrors = null;\n\nfunction warnIfHydrating() {\n  {\n    if (isHydrating) {\n      error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n    }\n  }\n}\n\nfunction markDidSuspendWhileHydratingDEV() {\n  {\n    didSuspend = true;\n  }\n}\n\nfunction enterHydrationState(fiber) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  var parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspend = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspend = false;\n\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n\n  return true;\n}\n\nfunction warnUnhydratedInstance(returnFiber, instance) {\n  {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n        break;\n\n      case HostComponent:\n        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);\n        break;\n\n      case SuspenseComponent:\n        var suspenseState = returnFiber.memoizedState;\n        if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n        break;\n    }\n  }\n}\n\nfunction deleteHydratableInstance(returnFiber, instance) {\n  warnUnhydratedInstance(returnFiber, instance);\n  var childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  var deletions = returnFiber.deletions;\n\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber, fiber) {\n  {\n    if (didSuspend) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n          var parentContainer = returnFiber.stateNode.containerInfo;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              var type = fiber.type;\n              var props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n              break;\n\n            case HostText:\n              var text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n              break;\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var parentType = returnFiber.type;\n          var parentProps = returnFiber.memoizedProps;\n          var parentInstance = returnFiber.stateNode;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              var _type = fiber.type;\n              var _props = fiber.pendingProps;\n              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);\n              break;\n\n            case HostText:\n              var _text = fiber.pendingProps;\n              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n              break;\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          var suspenseState = returnFiber.memoizedState;\n          var _parentInstance = suspenseState.dehydrated;\n          if (_parentInstance !== null) switch (fiber.tag) {\n            case HostComponent:\n              var _type2 = fiber.type;\n              var _props2 = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n              break;\n\n            case HostText:\n              var _text2 = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n              break;\n          }\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber, fiber) {\n  fiber.flags = fiber.flags & ~Hydrating | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent:\n      {\n        var type = fiber.type;\n        var props = fiber.pendingProps;\n        var instance = canHydrateInstance(nextInstance, type, props);\n\n        if (instance !== null) {\n          fiber.stateNode = instance;\n          hydrationParentFiber = fiber;\n          nextHydratableInstance = getFirstHydratableChild(instance);\n          return true;\n        }\n\n        return false;\n      }\n\n    case HostText:\n      {\n        var text = fiber.pendingProps;\n        var textInstance = canHydrateTextInstance(nextInstance, text);\n\n        if (textInstance !== null) {\n          fiber.stateNode = textInstance;\n          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n          nextHydratableInstance = null;\n          return true;\n        }\n\n        return false;\n      }\n\n    case SuspenseComponent:\n      {\n        {\n          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n\n          if (suspenseInstance !== null) {\n            var suspenseState = {\n              dehydrated: suspenseInstance,\n              treeContext: getSuspendedTreeContext(),\n              retryLane: OffscreenLane\n            };\n            fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n            // This simplifies the code for getHostSibling and deleting nodes,\n            // since it doesn't have to consider all Suspense boundaries and\n            // check if they're dehydrated ones or not.\n\n            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n            dehydratedFragment.return = fiber;\n            fiber.child = dehydratedFragment;\n            hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n            // it during the first pass. Instead, we'll reenter it later.\n\n            nextHydratableInstance = null;\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber) {\n  return  (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n}\n\nfunction throwOnHydrationMismatch(fiber) {\n  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n}\n\nfunction tryToClaimNextHydratableInstance(fiber) {\n  if (!isHydrating) {\n    return;\n  }\n\n  var nextInstance = nextHydratableInstance;\n\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance(hydrationParentFiber, fiber);\n      throwOnHydrationMismatch();\n    } // Nothing to hydrate. Make it an insertion.\n\n\n    insertNonHydratedInstance(hydrationParentFiber, fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n\n  var firstAttemptedInstance = nextInstance;\n\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance(hydrationParentFiber, fiber);\n      throwOnHydrationMismatch();\n    } // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n\n\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    var prevHydrationParentFiber = hydrationParentFiber;\n\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance(hydrationParentFiber, fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    } // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n\n\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var instance = fiber.stateNode;\n  var shouldWarnIfMismatchDev = !didSuspend;\n  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n\n  if (updatePayload !== null) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var textInstance = fiber.stateNode;\n  var textContent = fiber.memoizedProps;\n  var shouldWarnIfMismatchDev = !didSuspend;\n  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    var returnFiber = hydrationParentFiber;\n\n    if (returnFiber !== null) {\n      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n      switch (returnFiber.tag) {\n        case HostRoot:\n          {\n            var parentContainer = returnFiber.stateNode.containerInfo;\n            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode);\n            break;\n          }\n\n        case HostComponent:\n          {\n            var parentType = returnFiber.type;\n            var parentProps = returnFiber.memoizedProps;\n            var parentInstance = returnFiber.stateNode;\n            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode);\n            break;\n          }\n      }\n    }\n  }\n\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n    parent = parent.return;\n  }\n\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  } // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n\n\n  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n    var nextInstance = nextHydratableInstance;\n\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch();\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n\n  popToNextHostParent(fiber);\n\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n  }\n\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber) {\n  var nextInstance = nextHydratableInstance;\n\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState() {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspend = false;\n}\n\nfunction upgradeHydrationErrorsToRecoverable() {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating() {\n  return isHydrating;\n}\n\nfunction queueHydrationError(error) {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nvar didWarnAboutMaps;\nvar didWarnAboutGenerators;\nvar didWarnAboutStringRefs;\nvar ownerHasKeyUseWarning;\nvar ownerHasFunctionTypeWarning;\n\nvar warnForMissingKey = function (child, returnFiber) {};\n\n{\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = function (child, returnFiber) {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    child._store.validated = true;\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[componentName] = true;\n\n    error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n  };\n}\n\nfunction coerceRef(returnFiber, current, element) {\n  var mixedRef = element.ref;\n\n  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n    {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n      // because these cannot be automatically converted to an arrow function\n      // using a codemod. Therefore, we don't have to warn about string refs again.\n      !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (!didWarnAboutStringRefs[componentName]) {\n          {\n            error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n          }\n\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      var owner = element._owner;\n      var inst;\n\n      if (owner) {\n        var ownerFiber = owner;\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n      } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n      var resolvedInst = inst;\n\n      {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n\n      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n        return current.ref;\n      }\n\n      var ref = function (value) {\n        var refs = resolvedInst.refs;\n\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n      }\n\n      if (!element._owner) {\n        throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n      }\n    }\n  }\n\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  var childString = Object.prototype.toString.call(newChild);\n  throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n}\n\nfunction warnOnFunctionType(returnFiber) {\n  {\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  var payload = lazyType._payload;\n  var init = lazyType._init;\n  return init(payload);\n} // This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\n\n\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n\n\n    var childToDelete = currentFirstChild;\n\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n\n    return null;\n  }\n\n  function mapRemainingChildren(returnFiber, currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    var existingChildren = new Map();\n    var existingChild = currentFirstChild;\n\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n\n      existingChild = existingChild.sibling;\n    }\n\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    var clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n\n    var current = newFiber.alternate;\n\n    if (current !== null) {\n      var oldIndex = current.index;\n\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, lanes) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, lanes) {\n    var elementType = element.type;\n\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n    }\n\n    if (current !== null) {\n      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.\n      // We need to do this after the Hot Reloading check above,\n      // because hot reloading has different semantics than prod because\n      // it doesn't resuspend. So we can't let the call below suspend.\n       typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n        // Move based on index\n        var existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n\n        {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n\n        return existing;\n      }\n    } // Insert\n\n\n    var created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(returnFiber, current, portal, lanes) {\n    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, lanes, key) {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n            _created.ref = coerceRef(returnFiber, null, newChild);\n            _created.return = returnFiber;\n            return _created;\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n            _created2.return = returnFiber;\n            return _created2;\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            {\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return createChild(returnFiber, init(payload), lanes);\n            }\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n        _created3.return = returnFiber;\n        return _created3;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n    // Update the fiber if the keys match, otherwise return null.\n    var key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              return updateElement(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            {\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n            }\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      var matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = newChild._payload;\n            var init = newChild._init;\n            return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n          }\n\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n\n\n  function warnOnInvalidKey(child, knownKeys, returnFiber) {\n    {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          var key = child.key;\n\n          if (typeof key !== 'string') {\n            break;\n          }\n\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n\n          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n\n          break;\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = child._payload;\n            var init = child._init;\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n            break;\n          }\n      }\n    }\n\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n    {\n      // First, validate keys.\n      var knownKeys = null;\n\n      for (var i = 0; i < newChildren.length; i++) {\n        var child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        var numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n        if (_newFiber === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber;\n        } else {\n          previousNewFiber.sibling = _newFiber;\n        }\n\n        previousNewFiber = _newFiber;\n      }\n\n      if (getIsHydrating()) {\n        var _numberOfForks = newIdx;\n        pushTreeFork(returnFiber, _numberOfForks);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; newIdx < newChildren.length; newIdx++) {\n      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n      if (_newFiber2 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber2.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber2;\n        } else {\n          previousNewFiber.sibling = _newFiber2;\n        }\n\n        previousNewFiber = _newFiber2;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    if (getIsHydrating()) {\n      var _numberOfForks2 = newIdx;\n      pushTreeFork(returnFiber, _numberOfForks2);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n    var iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n    }\n\n    {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n      newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n        if (!didWarnAboutGenerators) {\n          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n        }\n\n        didWarnAboutGenerators = true;\n      } // Warn about using Maps as children\n\n\n      if (newChildrenIterable.entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n        }\n\n        didWarnAboutMaps = true;\n      } // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n\n\n      var _newChildren = iteratorFn.call(newChildrenIterable);\n\n      if (_newChildren) {\n        var knownKeys = null;\n\n        var _step = _newChildren.next();\n\n        for (; !_step.done; _step = _newChildren.next()) {\n          var child = _step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    var newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n    var step = newChildren.next();\n\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        var numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n        if (_newFiber3 === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber3;\n        } else {\n          previousNewFiber.sibling = _newFiber3;\n        }\n\n        previousNewFiber = _newFiber3;\n      }\n\n      if (getIsHydrating()) {\n        var _numberOfForks3 = newIdx;\n        pushTreeFork(returnFiber, _numberOfForks3);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n      if (_newFiber4 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber4.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber4;\n        } else {\n          previousNewFiber.sibling = _newFiber4;\n        }\n\n        previousNewFiber = _newFiber4;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    if (getIsHydrating()) {\n      var _numberOfForks4 = newIdx;\n      pushTreeFork(returnFiber, _numberOfForks4);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      var existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    } // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n\n\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n    var key = element.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            var existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n\n            return existing;\n          }\n        } else {\n          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n           typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n\n            var _existing = useFiber(child, element.props);\n\n            _existing.ref = coerceRef(returnFiber, child, element);\n            _existing.return = returnFiber;\n\n            {\n              _existing._debugSource = element._source;\n              _existing._debugOwner = element._owner;\n            }\n\n            return _existing;\n          }\n        } // Didn't match.\n\n\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n      _created4.return = returnFiber;\n      return _created4;\n    }\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n    var key = portal.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  } // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n\n\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    } // Handle object types\n\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = newChild._payload;\n            var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n            return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n          }\n\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    } // Remaining cases are all treated as empty.\n\n\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nvar reconcileChildFibers = ChildReconciler(true);\nvar mountChildFibers = ChildReconciler(false);\nfunction cloneChildFibers(current, workInProgress) {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  var currentChild = workInProgress.child;\n  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n  newChild.return = workInProgress;\n\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n    newChild.return = workInProgress;\n  }\n\n  newChild.sibling = null;\n} // Reset a workInProgress child set to prepare it for a second pass.\n\nfunction resetChildFibers(workInProgress, lanes) {\n  var child = workInProgress.child;\n\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n\nvar NO_CONTEXT = {};\nvar contextStackCursor$1 = createCursor(NO_CONTEXT);\nvar contextFiberStackCursor = createCursor(NO_CONTEXT);\nvar rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\nfunction requiredContext(c) {\n  if (c === NO_CONTEXT) {\n    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n\n  return c;\n}\n\nfunction getRootHostContainer() {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber, nextRootInstance) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n\n  push(contextStackCursor$1, NO_CONTEXT, fiber);\n  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n  pop(contextStackCursor$1, fiber);\n  push(contextStackCursor$1, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber) {\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext() {\n  var context = requiredContext(contextStackCursor$1.current);\n  return context;\n}\n\nfunction pushHostContext(fiber) {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  var context = requiredContext(contextStackCursor$1.current);\n  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n  if (context === nextContext) {\n    return;\n  } // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor$1, nextContext, fiber);\n}\n\nfunction popHostContext(fiber) {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nvar DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\n\nvar SubtreeSuspenseContextMask = 1; // Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\n\nvar InvisibleParentSuspenseContext = 1; // Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nvar ForceSuspenseFallback = 2;\nvar suspenseStackCursor = createCursor(DefaultSuspenseContext);\nfunction hasSuspenseContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nfunction setDefaultShallowSuspenseContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nfunction setShallowSuspenseContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nfunction addSubtreeSuspenseContext(parentContext, subtreeContext) {\n  return parentContext | subtreeContext;\n}\nfunction pushSuspenseContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext, fiber);\n}\nfunction popSuspenseContext(fiber) {\n  pop(suspenseStackCursor, fiber);\n}\n\nfunction shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  var nextState = workInProgress.memoizedState;\n\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n\n    return false;\n  }\n\n  var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n\n  {\n    return true;\n  } // If it's a boundary we should avoid, then we prefer to bubble up to the\n}\nfunction findFirstSuspended(row) {\n  var node = row;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        var dehydrated = state.dehydrated;\n\n        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n          return node;\n        }\n      }\n    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n    // keep track of whether it suspended or not.\n    node.memoizedProps.revealOrder !== undefined) {\n      var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === row) {\n      return null;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n\n  return null;\n}\n\nvar NoFlags$1 =\n/*   */\n0; // Represents whether effect should fire.\n\nvar HasEffect =\n/* */\n1; // Represents the phase in which the effect (not the clean-up) fires.\n\nvar Insertion =\n/*  */\n2;\nvar Layout =\n/*    */\n4;\nvar Passive$1 =\n/*   */\n8;\n\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\n\nvar workInProgressSources = [];\nfunction resetWorkInProgressVersions() {\n  for (var i = 0; i < workInProgressSources.length; i++) {\n    var mutableSource = workInProgressSources[i];\n\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n\n  workInProgressSources.length = 0;\n}\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\n\nfunction registerMutableSourceForHydration(root, mutableSource) {\n  var getVersion = mutableSource._getVersion;\n  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\nvar didWarnAboutMismatchedHooksForComponent;\nvar didWarnUncachedGetSnapshot;\n\n{\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\n// These are set right before calling the component.\nvar renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\n\nvar currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\n\nvar currentHook = null;\nvar workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\n\nvar didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\nvar didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\nvar localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\n\nvar globalClientIdCounter = 0;\nvar RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\n\nvar hookTypesDev = null;\nvar hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\nvar ignorePreviousDependencies = false;\n\nfunction mountHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps) {\n  {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName) {\n  {\n    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        var table = '';\n        var secondColumnStart = 30;\n\n        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n          var oldHookName = hookTypesDev[i];\n          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n          var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n          table += row;\n        }\n\n        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n    }\n  }\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber$1 = workInProgress;\n\n  {\n    hookTypesDev = current !== null ? current._debugHookTypes : null;\n    hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes; // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n\n  {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n    }\n  }\n\n  var children = Component(props, secondArg); // Check if there was a render phase update\n\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    var numberOfReRenders = 0;\n\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n      }\n\n      numberOfReRenders += 1;\n\n      {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      } // Start over from the beginning of the list\n\n\n      currentHook = null;\n      workInProgressHook = null;\n      workInProgress.updateQueue = null;\n\n      {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  } // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n\n\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  {\n    workInProgress._debugHookTypes = hookTypesDev;\n  } // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n\n  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n\n    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n    // and creates false positives. To make this work in legacy mode, we'd\n    // need to mark fibers that commit in an incomplete state, somehow. For\n    // now I'll disable the warning that most of the bugs that would trigger\n    // it are either exclusive to concurrent mode or exist in both.\n    (current.mode & ConcurrentMode) !== NoMode) {\n      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n  }\n\n  return children;\n}\nfunction checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  var didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\nfunction bailoutHooks(current, workInProgress, lanes) {\n  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n\n  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n  } else {\n    workInProgress.flags &= ~(Passive | Update);\n  }\n\n  current.lanes = removeLanes(current.lanes, lanes);\n}\nfunction resetHooksAfterThrow() {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    var hook = currentlyRenderingFiber$1.memoizedState;\n\n    while (hook !== null) {\n      var queue = hook.queue;\n\n      if (queue !== null) {\n        queue.pending = null;\n      }\n\n      hook = hook.next;\n    }\n\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n    currentHookNameInDev = null;\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook() {\n  var hook = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook() {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  var nextCurrentHook;\n\n  if (currentHook === null) {\n    var current = currentlyRenderingFiber$1.alternate;\n\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  var nextWorkInProgressHook;\n\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n    var newHook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue() {\n  return {\n    lastEffect: null,\n    stores: null\n  };\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer(reducer, initialArg, init) {\n  var hook = mountWorkInProgressHook();\n  var initialState;\n\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = initialArg;\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer;\n  var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n  var pendingQueue = queue.pending;\n\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      var baseFirst = baseQueue.next;\n      var pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n\n    {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n      }\n    }\n\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    var first = baseQueue.next;\n    var newState = current.baseState;\n    var newBaseState = null;\n    var newBaseQueueFirst = null;\n    var newBaseQueueLast = null;\n    var update = first;\n\n    do {\n      var updateLane = update.lane;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: null\n        };\n\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        } // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n\n\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newBaseQueueLast !== null) {\n          var _clone = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: null\n          };\n          newBaseQueueLast = newBaseQueueLast.next = _clone;\n        } // Process this update.\n\n\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = update.eagerState;\n        } else {\n          var action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = newBaseQueueFirst;\n    } // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  } // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n\n\n  var lastInterleaved = queue.interleaved;\n\n  if (lastInterleaved !== null) {\n    var interleaved = lastInterleaved;\n\n    do {\n      var interleavedLane = interleaved.lane;\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = interleaved.next;\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  var dispatch = queue.dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n\n  var dispatch = queue.dispatch;\n  var lastRenderPhaseUpdate = queue.pending;\n  var newState = hook.memoizedState;\n\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    var update = firstRenderPhaseUpdate;\n\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      var action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n\n  return [newState, dispatch];\n}\n\nfunction mountMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction updateMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = mountWorkInProgressHook();\n  var nextSnapshot;\n  var isHydrating = getIsHydrating();\n\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n    }\n\n    nextSnapshot = getServerSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        var cachedSnapshot = getSnapshot();\n\n        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n          error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    } // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  } // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n\n  hook.memoizedState = nextSnapshot;\n  var inst = {\n    value: nextSnapshot,\n    getSnapshot: getSnapshot\n  };\n  hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n\n  fiber.flags |= Passive;\n  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n  var nextSnapshot = getSnapshot();\n\n  {\n    if (!didWarnUncachedGetSnapshot) {\n      var cachedSnapshot = getSnapshot();\n\n      if (!objectIs(nextSnapshot, cachedSnapshot)) {\n        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  var prevSnapshot = hook.memoizedState;\n  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n\n  var inst = hook.queue;\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n\n  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n  // checking whether we scheduled a subscription effect above.\n  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n    fiber.flags |= Passive;\n    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n  fiber.flags |= StoreConsistency;\n  var check = {\n    getSnapshot: getSnapshot,\n    value: renderedSnapshot\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.stores = [check];\n  } else {\n    var stores = componentUpdateQueue.stores;\n\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  var handleStoreChange = function () {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }; // Subscribe to the store and return a clean-up function.\n\n\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  var prevValue = inst.value;\n\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n}\n\nfunction mountState(initialState) {\n  var hook = mountWorkInProgressHook();\n\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState(initialState) {\n  return updateReducer(basicStateReducer);\n}\n\nfunction rerenderState(initialState) {\n  return rerenderReducer(basicStateReducer);\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  var effect = {\n    tag: tag,\n    create: create,\n    destroy: destroy,\n    deps: deps,\n    // Circular\n    next: null\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    var lastEffect = componentUpdateQueue.lastEffect;\n\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      var firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n\n  return effect;\n}\n\nfunction mountRef(initialValue) {\n  var hook = mountWorkInProgressHook();\n\n  {\n    var _ref2 = {\n      current: initialValue\n    };\n    hook.memoizedState = _ref2;\n    return _ref2;\n  }\n}\n\nfunction updateRef(initialValue) {\n  var hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var destroy = undefined;\n\n  if (currentHook !== null) {\n    var prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n\n    if (nextDeps !== null) {\n      var prevDeps = prevEffect.deps;\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n}\n\nfunction mountEffect(create, deps) {\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n  } else {\n    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n  }\n}\n\nfunction updateEffect(create, deps) {\n  return updateEffectImpl(Passive, Passive$1, create, deps);\n}\n\nfunction mountInsertionEffect(create, deps) {\n  return mountEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction updateInsertionEffect(create, deps) {\n  return updateEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction mountLayoutEffect(create, deps) {\n  var fiberFlags = Update;\n\n  {\n    fiberFlags |= LayoutStatic;\n  }\n\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    fiberFlags |= MountLayoutDev;\n  }\n\n  return mountEffectImpl(fiberFlags, Layout, create, deps);\n}\n\nfunction updateLayoutEffect(create, deps) {\n  return updateEffectImpl(Update, Layout, create, deps);\n}\n\nfunction imperativeHandleEffect(create, ref) {\n  if (typeof ref === 'function') {\n    var refCallback = ref;\n\n    var _inst = create();\n\n    refCallback(_inst);\n    return function () {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    var refObject = ref;\n\n    {\n      if (!refObject.hasOwnProperty('current')) {\n        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n      }\n    }\n\n    var _inst2 = create();\n\n    refObject.current = _inst2;\n    return function () {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  var fiberFlags = Update;\n\n  {\n    fiberFlags |= LayoutStatic;\n  }\n\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    fiberFlags |= MountLayoutDev;\n  }\n\n  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction updateImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nvar updateDebugValue = mountDebugValue;\n\nfunction mountCallback(callback, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback(callback, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo(nextCreate, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo(nextCreate, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue(value) {\n  var _mountState = mountState(value),\n      prevValue = _mountState[0],\n      setValue = _mountState[1];\n\n  mountEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = {};\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue(value) {\n  var _updateState = updateState(),\n      prevValue = _updateState[0],\n      setValue = _updateState[1];\n\n  updateEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = {};\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue(value) {\n  var _rerenderState = rerenderState(),\n      prevValue = _rerenderState[0],\n      setValue = _rerenderState[1];\n\n  updateEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = {};\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback, options) {\n  var previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n  setPending(true);\n  var prevTransition = ReactCurrentBatchConfig$1.transition;\n  ReactCurrentBatchConfig$1.transition = {};\n  var currentTransition = ReactCurrentBatchConfig$1.transition;\n\n  {\n    ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$1.transition = prevTransition;\n\n    {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n        if (updatedFibersCount > 10) {\n          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n        }\n\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition() {\n  var _mountState2 = mountState(false),\n      isPending = _mountState2[0],\n      setPending = _mountState2[1]; // The `start` method never changes.\n\n\n  var start = startTransition.bind(null, setPending);\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition() {\n  var _updateState2 = updateState(),\n      isPending = _updateState2[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition() {\n  var _rerenderState2 = rerenderState(),\n      isPending = _rerenderState2[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nvar isUpdatingOpaqueValueInRenderPhase = false;\nfunction getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n  {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId() {\n  var hook = mountWorkInProgressHook();\n  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n\n  var identifierPrefix = root.identifierPrefix;\n  var id;\n\n  if (getIsHydrating()) {\n    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n\n    var localId = localIdCounter++;\n\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    var globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId() {\n  var hook = updateWorkInProgressHook();\n  var id = hook.memoizedState;\n  return id;\n}\n\nfunction dispatchReducerAction(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    enqueueUpdate$1(fiber, queue, update);\n    var eventTime = requestEventTime();\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane);\n}\n\nfunction dispatchSetState(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    enqueueUpdate$1(fiber, queue, update);\n    var alternate = fiber.alternate;\n\n    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      var lastRenderedReducer = queue.lastRenderedReducer;\n\n      if (lastRenderedReducer !== null) {\n        var prevDispatcher;\n\n        {\n          prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n\n        try {\n          var currentState = queue.lastRenderedState;\n          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n\n          if (objectIs(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {// Suppress the error. It will throw again in the render phase.\n        } finally {\n          {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    var eventTime = requestEventTime();\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane);\n}\n\nfunction isRenderPhaseUpdate(fiber) {\n  var alternate = fiber.alternate;\n  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n}\n\nfunction enqueueRenderPhaseUpdate(queue, update) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  var pending = queue.pending;\n\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n\n  queue.pending = update;\n}\n\nfunction enqueueUpdate$1(fiber, queue, update, lane) {\n  if (isInterleavedUpdate(fiber)) {\n    var interleaved = queue.interleaved;\n\n    if (interleaved === null) {\n      // This is the first update. Create a circular list.\n      update.next = update; // At the end of the current render, this queue's interleaved updates will\n      // be transferred to the pending queue.\n\n      pushInterleavedQueue(queue);\n    } else {\n      update.next = interleaved.next;\n      interleaved.next = update;\n    }\n\n    queue.interleaved = update;\n  } else {\n    var pending = queue.pending;\n\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n\n    queue.pending = update;\n  }\n}\n\nfunction entangleTransitionUpdate(root, queue, lane) {\n  if (isTransitionLane(lane)) {\n    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n\n  {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nvar ContextOnlyDispatcher = {\n  readContext: readContext,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n  unstable_isNewReconciler: enableNewReconciler\n};\n\nvar HooksDispatcherOnMountInDEV = null;\nvar HooksDispatcherOnMountWithHookTypesInDEV = null;\nvar HooksDispatcherOnUpdateInDEV = null;\nvar HooksDispatcherOnRerenderInDEV = null;\nvar InvalidNestedHooksDispatcherOnMountInDEV = null;\nvar InvalidNestedHooksDispatcherOnUpdateInDEV = null;\nvar InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n{\n  var warnInvalidContextAccess = function () {\n    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n  };\n\n  var warnInvalidHookAccess = function () {\n    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n}\n\nvar now$2 = Scheduler.unstable_now;\nvar commitTime = 0;\nvar layoutEffectStartTime = -1;\nvar profilerStartTime = -1;\nvar passiveEffectStartTime = -1;\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\n\nvar currentUpdateIsNested = false;\nvar nestedUpdateScheduled = false;\n\nfunction isCurrentUpdateNested() {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled() {\n  {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime() {\n  return commitTime;\n}\n\nfunction recordCommitTime() {\n\n  commitTime = now$2();\n}\n\nfunction startProfilerTimer(fiber) {\n\n  profilerStartTime = now$2();\n\n  if (fiber.actualStartTime < 0) {\n    fiber.actualStartTime = now$2();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber) {\n\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n\n  if (profilerStartTime >= 0) {\n    var elapsedTime = now$2() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber) {\n\n  if (layoutEffectStartTime >= 0) {\n    var elapsedTime = now$2() - layoutEffectStartTime;\n    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber) {\n\n  if (passiveEffectStartTime >= 0) {\n    var elapsedTime = now$2() - passiveEffectStartTime;\n    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer() {\n\n  layoutEffectStartTime = now$2();\n}\n\nfunction startPassiveEffectTimer() {\n\n  passiveEffectStartTime = now$2();\n}\n\nfunction transferActualDuration(fiber) {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  var child = fiber.child;\n\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nfunction createCapturedValue(value, source) {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value: value,\n    source: source,\n    stack: getStackByFiberInDevAndProd(source)\n  };\n}\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\nfunction showErrorDialog(boundary, errorInfo) {\n  return true;\n}\n\nfunction logCapturedError(boundary, errorInfo) {\n  try {\n    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n\n    if (logError === false) {\n      return;\n    }\n\n    var error = errorInfo.value;\n\n    if (true) {\n      var source = errorInfo.source;\n      var stack = errorInfo.stack;\n      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        } // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n\n\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      var componentName = source ? getComponentNameFromFiber(source) : null;\n      var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n      var errorBoundaryMessage;\n\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n      }\n\n      var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nvar PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: null\n  };\n  var error = errorInfo.value;\n\n  update.callback = function () {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n\n  return update;\n}\n\nfunction createClassErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n  if (typeof getDerivedStateFromError === 'function') {\n    var error$1 = errorInfo.value;\n\n    update.payload = function () {\n      return getDerivedStateFromError(error$1);\n    };\n\n    update.callback = function () {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  var inst = fiber.stateNode;\n\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n\n      var error$1 = errorInfo.value;\n      var stack = errorInfo.stack;\n      this.componentDidCatch(error$1, {\n        componentStack: stack !== null ? stack : ''\n      });\n\n      {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, SyncLane)) {\n            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n          }\n        }\n      }\n    };\n  }\n\n  return update;\n}\n\nfunction attachPingListener(root, wakeable, lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  var pingCache = root.pingCache;\n  var threadIDs;\n\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap$1();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n    {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n  // Retry listener\n  //\n  // If the fallback does commit, we need to attach a different type of\n  // listener. This one schedules an update on the Suspense boundary to turn\n  // the fallback state off.\n  //\n  // Stash the wakeable on the boundary fiber so we can access it in the\n  // commit phase.\n  //\n  // When the wakeable resolves, we'll attempt to render the boundary\n  // again (\"retry\").\n  var wakeables = suspenseBoundary.updateQueue;\n\n  if (wakeables === null) {\n    var updateQueue = new Set();\n    updateQueue.add(wakeable);\n    suspenseBoundary.updateQueue = updateQueue;\n  } else {\n    wakeables.add(wakeable);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n  // A legacy mode Suspense quirk, only relevant to hook components.\n\n\n  var tag = sourceFiber.tag;\n\n  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n    var currentSource = sourceFiber.alternate;\n\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction getNearestSuspenseBoundaryToCapture(returnFiber) {\n  var node = returnFiber;\n\n  do {\n    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n      return node;\n    } // This boundary already captured during this render. Continue to the next\n    // boundary.\n\n\n    node = node.return;\n  } while (node !== null);\n\n  return null;\n}\n\nfunction markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (supportsPersistence && enablePersistentOffscreenHostContainer) {\n        // Another legacy Suspense quirk. In persistent mode, if this is the\n        // initial mount, override the props of the host container to hide\n        // its contents.\n        var currentSuspenseBoundary = suspenseBoundary.alternate;\n\n        if (currentSuspenseBoundary === null) {\n          var offscreenFiber = suspenseBoundary.child;\n          var offscreenContainer = offscreenFiber.child;\n\n          if (offscreenContainer !== null) {\n            var children = offscreenContainer.memoizedProps.children;\n            var containerProps = getOffscreenContainerProps('hidden', children);\n            offscreenContainer.pendingProps = containerProps;\n            offscreenContainer.memoizedProps = containerProps;\n          }\n        }\n      }\n\n      if (sourceFiber.tag === ClassComponent) {\n        var currentSourceFiber = sourceFiber.alternate;\n\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          var update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update);\n        }\n      } // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n\n\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n\n    return suspenseBoundary;\n  } // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n\n\n  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n    // This is a wakeable. The component suspended.\n    var wakeable = value;\n    resetSuspendedComponent(sourceFiber);\n\n\n    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n    if (suspenseBoundary !== null) {\n      suspenseBoundary.flags &= ~ForceClientRender;\n      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n\n      attachRetryListener(suspenseBoundary, root, wakeable);\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      } // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n\n\n      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidSuspendWhileHydratingDEV();\n\n      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n\n\n      if (_suspenseBoundary !== null) {\n        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          _suspenseBoundary.flags |= ForceClientRender;\n        }\n\n        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n\n        queueHydrationError(value);\n        return;\n      }\n    }\n  } // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n\n\n  renderDidError(value);\n  value = createCapturedValue(value, sourceFiber);\n  var workInProgress = returnFiber;\n\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot:\n        {\n          var _errorInfo = value;\n          workInProgress.flags |= ShouldCapture;\n          var lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n\n      case ClassComponent:\n        // Capture and retry\n        var errorInfo = value;\n        var ctor = workInProgress.type;\n        var instance = workInProgress.stateNode;\n\n        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n          workInProgress.flags |= ShouldCapture;\n\n          var _lane = pickArbitraryLane(rootRenderLanes);\n\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n          enqueueCapturedUpdate(workInProgress, _update);\n          return;\n        }\n\n        break;\n    }\n\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nfunction getSuspendedCache() {\n  {\n    return null;\n  } // This function is called when a Suspense boundary suspends. It returns the\n}\n\nfunction markUpdate(workInProgress) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress) {\n  workInProgress.flags |= Ref;\n\n  {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current, completedWork) {\n  var didBailout = current !== null && current.child === completedWork.child;\n\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n\n\n  var child = completedWork.child;\n\n  while (child !== null) {\n    if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n      return false;\n    }\n\n    child = child.sibling;\n  }\n\n  return true;\n}\n\nvar appendAllChildren;\nvar updateHostContainer;\nvar updateHostComponent;\nvar updateHostText;\n\nif (supportsMutation) {\n  // Mutation mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (current, workInProgress) {// Noop\n  };\n\n  updateHostComponent = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    var oldProps = current.memoizedProps;\n\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    } // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n\n\n    var instance = workInProgress.stateNode;\n    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n\n    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n\n  updateHostText = function (current, workInProgress, oldText, newText) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var props = node.memoizedProps;\n          var type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        var _instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var text = node.memoizedProps;\n          _instance = cloneHiddenTextInstance(_instance, text, node);\n        }\n\n        appendInitialChild(parent, _instance);\n      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        var child = node.child;\n\n        if (child !== null) {\n          child.return = node;\n        }\n\n        {\n          appendAllChildren(parent, node, true, true);\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n      node = node;\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n\n  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var props = node.memoizedProps;\n          var type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        var _instance2 = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var text = node.memoizedProps;\n          _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n        }\n\n        appendChildToContainerChildSet(containerChildSet, _instance2);\n      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        var child = node.child;\n\n        if (child !== null) {\n          child.return = node;\n        }\n\n        {\n          appendAllChildrenToContainer(containerChildSet, node, true, true);\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n      node = node;\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (current, workInProgress) {\n    var portalOrRoot = workInProgress.stateNode;\n    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n    if (childrenUnchanged) ; else {\n      var container = portalOrRoot.containerInfo;\n      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n\n  updateHostComponent = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    var currentInstance = current.stateNode;\n    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n\n    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n\n    var recyclableInstance = workInProgress.stateNode;\n    var currentHostContext = getHostContext();\n    var updatePayload = null;\n\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n    }\n\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n\n    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n\n    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n      markUpdate(workInProgress);\n    }\n\n    workInProgress.stateNode = newInstance;\n\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n\n  updateHostText = function (current, workInProgress, oldText, newText) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      var rootContainerInstance = getRootHostContainer();\n      var currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function (current, workInProgress) {// Noop\n  };\n\n  updateHostComponent = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n  };\n\n  updateHostText = function (current, workInProgress, oldText, newText) {// Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n\n  switch (renderState.tailMode) {\n    case 'hidden':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var tailNode = renderState.tail;\n        var lastTailNode = null;\n\n        while (tailNode !== null) {\n          if (tailNode.alternate !== null) {\n            lastTailNode = tailNode;\n          }\n\n          tailNode = tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          renderState.tail = null;\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n\n    case 'collapsed':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var _tailNode = renderState.tail;\n        var _lastTailNode = null;\n\n        while (_tailNode !== null) {\n          if (_tailNode.alternate !== null) {\n            _lastTailNode = _tailNode;\n          }\n\n          _tailNode = _tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (_lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          if (!hasRenderedATailFallback && renderState.tail !== null) {\n            // We suspended during the head. We want to show at least one\n            // row at the tail. So we'll keep on and cut off the rest.\n            renderState.tail.sibling = null;\n          } else {\n            renderState.tail = null;\n          }\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          _lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n  }\n}\n\nfunction bubbleProperties(completedWork) {\n  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n  var newChildLanes = NoLanes;\n  var subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var actualDuration = completedWork.actualDuration;\n      var treeBaseDuration = completedWork.selfBaseDuration;\n      var child = completedWork.child;\n\n      while (child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n\n        actualDuration += child.actualDuration;\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      var _child = completedWork.child;\n\n      while (_child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n        subtreeFlags |= _child.subtreeFlags;\n        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child.return = completedWork;\n        _child = _child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var _treeBaseDuration = completedWork.selfBaseDuration;\n      var _child2 = completedWork.child;\n\n      while (_child2 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n        subtreeFlags |= _child2.flags & StaticMask;\n        _treeBaseDuration += _child2.treeBaseDuration;\n        _child2 = _child2.sibling;\n      }\n\n      completedWork.treeBaseDuration = _treeBaseDuration;\n    } else {\n      var _child3 = completedWork.child;\n\n      while (_child3 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child3.return = completedWork;\n        _child3 = _child3.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n  return didBailout;\n}\n\nfunction completeWork(current, workInProgress, renderLanes) {\n  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostRoot:\n      {\n        var fiberRoot = workInProgress.stateNode;\n\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n\n        if (fiberRoot.pendingContext) {\n          fiberRoot.context = fiberRoot.pendingContext;\n          fiberRoot.pendingContext = null;\n        }\n\n        if (current === null || current.child === null) {\n          // If we hydrated, pop so that we can delete any remaining children\n          // that weren't hydrated.\n          var wasHydrated = popHydrationState(workInProgress);\n\n          if (wasHydrated) {\n            // If we hydrated, then we'll need to schedule an update for\n            // the commit side-effects on the root.\n            markUpdate(workInProgress);\n          } else {\n            if (current !== null) {\n              var prevState = current.memoizedState;\n\n              if ( // Check if this is a client root\n              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                // Schedule an effect to clear this container at the start of the\n                // next commit. This handles the case of React rendering into a\n                // container with previous children. It's also safe to do for\n                // updates too, because current.child would only be null if the\n                // previous render was null (so the container would already\n                // be empty).\n                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                // recoverable errors during first hydration attempt. If so, add\n                // them to a queue so we can log them in the commit phase.\n\n                upgradeHydrationErrorsToRecoverable();\n              }\n            }\n          }\n        }\n\n        updateHostContainer(current, workInProgress);\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(workInProgress);\n        var rootContainerInstance = getRootHostContainer();\n        var type = workInProgress.type;\n\n        if (current !== null && workInProgress.stateNode != null) {\n          updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance);\n\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        } else {\n          if (!newProps) {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n          // \"stack\" as the parent. Then append children as we go in beginWork\n          // or completeWork depending on whether we want to add them top->down or\n          // bottom->up. Top->down is faster in IE11.\n\n          var _wasHydrated = popHydrationState(workInProgress);\n\n          if (_wasHydrated) {\n            // TODO: Move this and createInstance step into the beginPhase\n            // to consolidate.\n            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n              // If changes to the hydrated node need to be applied at the\n              // commit-phase we mark this as such.\n              markUpdate(workInProgress);\n            }\n          } else {\n            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n            appendAllChildren(instance, workInProgress, false, false);\n            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n            // (eg DOM renderer supports auto-focus for certain elements).\n            // Make sure such renderers get scheduled for later work.\n\n            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n              markUpdate(workInProgress);\n            }\n          }\n\n          if (workInProgress.ref !== null) {\n            // If there is a ref on a host node we need to schedule a callback\n            markRef(workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostText:\n      {\n        var newText = newProps;\n\n        if (current && workInProgress.stateNode != null) {\n          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n          // to schedule a side-effect to do the updates.\n\n          updateHostText(current, workInProgress, oldText, newText);\n        } else {\n          if (typeof newText !== 'string') {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n          }\n\n          var _rootContainerInstance = getRootHostContainer();\n\n          var _currentHostContext = getHostContext();\n\n          var _wasHydrated2 = popHydrationState(workInProgress);\n\n          if (_wasHydrated2) {\n            if (prepareToHydrateHostTextInstance(workInProgress)) {\n              markUpdate(workInProgress);\n            }\n          } else {\n            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var nextState = workInProgress.memoizedState;\n\n        {\n          if ( hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n            warnIfUnhydratedTailNodes(workInProgress);\n            resetHydrationState();\n            workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n            return workInProgress;\n          }\n\n          if (nextState !== null && nextState.dehydrated !== null) {\n            // We might be inside a hydration state the first time we're picking up this\n            // Suspense boundary, and also after we've reentered it for further hydration.\n            var _wasHydrated3 = popHydrationState(workInProgress);\n\n            if (current === null) {\n              if (!_wasHydrated3) {\n                throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n              }\n\n              prepareToHydrateHostSuspenseInstance(workInProgress);\n              bubbleProperties(workInProgress);\n\n              {\n                if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                  var isTimedOutSuspense = nextState !== null;\n\n                  if (isTimedOutSuspense) {\n                    // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                    var primaryChildFragment = workInProgress.child;\n\n                    if (primaryChildFragment !== null) {\n                      // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                      workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                    }\n                  }\n                }\n              }\n\n              return null;\n            } else {\n              // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n              // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n              resetHydrationState();\n\n              if ((workInProgress.flags & DidCapture) === NoFlags) {\n                // This boundary did not suspend so it's now hydrated and unsuspended.\n                workInProgress.memoizedState = null;\n              } // If nothing suspended, we need to schedule an effect to mark this boundary\n              // as having hydrated so events know that they're free to be invoked.\n              // It's also a signal to replay events and the suspense callback.\n              // If something suspended, schedule an effect to attach retry listeners.\n              // So we might as well always mark this.\n\n\n              workInProgress.flags |= Update;\n              bubbleProperties(workInProgress);\n\n              {\n                if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                  var _isTimedOutSuspense = nextState !== null;\n\n                  if (_isTimedOutSuspense) {\n                    // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                    var _primaryChildFragment = workInProgress.child;\n\n                    if (_primaryChildFragment !== null) {\n                      // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                      workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n                    }\n                  }\n                }\n              }\n\n              return null;\n            }\n          } // Successfully completed this tree. If this was a forced client render,\n          // there may have been recoverable errors during first hydration\n          // attempt. If so, add them to a queue so we can log them in the\n          // commit phase.\n\n\n          upgradeHydrationErrorsToRecoverable();\n        }\n\n        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n          // Something suspended. Re-render with the fallback children.\n          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          } // Don't bubble properties in this case.\n\n\n          return workInProgress;\n        }\n\n        var nextDidTimeout = nextState !== null;\n        var prevDidTimeout = false;\n\n        if (current === null) {\n          popHydrationState(workInProgress);\n        } else {\n          var _prevState = current.memoizedState;\n          prevDidTimeout = _prevState !== null;\n        }\n        // an effect to toggle the subtree's visibility. When we switch from\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\n        // as part of its normal complete phase. But when we switch from\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\n        // phase. So we need to schedule its effect here.\n        //\n        // We also use this flag to connect/disconnect the effects, but the same\n        // logic applies: when re-connecting, the Offscreen fiber's complete\n        // phase will handle scheduling the effect. It's only when the fallback\n        // is active that we have to do anything special.\n\n\n        if (nextDidTimeout && !prevDidTimeout) {\n          var _offscreenFiber = workInProgress.child;\n          _offscreenFiber.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n          // in the concurrent tree already suspended during this render.\n          // This is a known bug.\n\n          if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n            // TODO: Move this back to throwException because this is too late\n            // if this is a large tree which is common for initial loads. We\n            // don't know if we should restart a render or not until we get\n            // this marker, and this is too late.\n            // If this render already had a ping or lower pri updates,\n            // and this is the first time we know we're going to suspend we\n            // should be able to immediately restart from within throwException.\n            var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n              // If this was in an invisible tree or a new render, then showing\n              // this boundary is ok.\n              renderDidSuspend();\n            } else {\n              // Otherwise, we're going to have to hide content so we should\n              // suspend for longer if possible.\n              renderDidSuspendDelayIfPossible();\n            }\n          }\n        }\n\n        var wakeables = workInProgress.updateQueue;\n\n        if (wakeables !== null) {\n          // Schedule an effect to attach a retry listener to the promise.\n          // TODO: Move to passive phase\n          workInProgress.flags |= Update;\n        }\n\n        bubbleProperties(workInProgress);\n\n        {\n          if ((workInProgress.mode & ProfileMode) !== NoMode) {\n            if (nextDidTimeout) {\n              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n              var _primaryChildFragment2 = workInProgress.child;\n\n              if (_primaryChildFragment2 !== null) {\n                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                workInProgress.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;\n              }\n            }\n          }\n        }\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ContextProvider:\n      // Pop provider fiber\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n\n    case IncompleteClassComponent:\n      {\n        // Same as class component case. I put it down here so that the tags are\n        // sequential to ensure this switch is compiled to a jump table.\n        var _Component = workInProgress.type;\n\n        if (isContextProvider(_Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState === null) {\n          // We're running in the default, \"independent\" mode.\n          // We don't do anything in this mode.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n        var renderedTail = renderState.rendering;\n\n        if (renderedTail === null) {\n          // We just rendered the head.\n          if (!didSuspendAlready) {\n            // This is the first pass. We need to figure out if anything is still\n            // suspended in the rendered set.\n            // If new content unsuspended, but there's still some content that\n            // didn't. Then we need to do a second pass that forces everything\n            // to keep showing their fallbacks.\n            // We might be suspended if something in this render pass suspended, or\n            // something in the previous committed pass suspended. Otherwise,\n            // there's no chance so we can skip the expensive call to\n            // findFirstSuspended.\n            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n            if (!cannotBeSuspended) {\n              var row = workInProgress.child;\n\n              while (row !== null) {\n                var suspended = findFirstSuspended(row);\n\n                if (suspended !== null) {\n                  didSuspendAlready = true;\n                  workInProgress.flags |= DidCapture;\n                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                  // part of the second pass. In that case nothing will subscribe to\n                  // its thenables. Instead, we'll transfer its thenables to the\n                  // SuspenseList so that it can retry if they resolve.\n                  // There might be multiple of these in the list but since we're\n                  // going to wait for all of them anyway, it doesn't really matter\n                  // which ones gets to ping. In theory we could get clever and keep\n                  // track of how many dependencies remain but it gets tricky because\n                  // in the meantime, we can add/remove/change items and dependencies.\n                  // We might bail out of the loop before finding any but that\n                  // doesn't matter since that means that the other boundaries that\n                  // we did find already has their listeners attached.\n\n                  var newThenables = suspended.updateQueue;\n\n                  if (newThenables !== null) {\n                    workInProgress.updateQueue = newThenables;\n                    workInProgress.flags |= Update;\n                  } // Rerender the whole list, but this time, we'll force fallbacks\n                  // to stay in place.\n                  // Reset the effect flags before doing the second pass since that's now invalid.\n                  // Reset the child fibers to their original state.\n\n\n                  workInProgress.subtreeFlags = NoFlags;\n                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                  // rerender the children.\n\n                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                  return workInProgress.child;\n                }\n\n                row = row.sibling;\n              }\n            }\n\n            if (renderState.tail !== null && now$1() > getRenderTargetTime()) {\n              // We have already passed our CPU deadline but we still have rows\n              // left in the tail. We'll just give up further attempts to render\n              // the main content and only render fallbacks.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          } else {\n            cutOffTailIfNeeded(renderState, false);\n          } // Next we're going to render the tail.\n\n        } else {\n          // Append the rendered row to the child list.\n          if (!didSuspendAlready) {\n            var _suspended = findFirstSuspended(renderedTail);\n\n            if (_suspended !== null) {\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n              // get lost if this row ends up dropped during a second pass.\n\n              var _newThenables = _suspended.updateQueue;\n\n              if (_newThenables !== null) {\n                workInProgress.updateQueue = _newThenables;\n                workInProgress.flags |= Update;\n              }\n\n              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n              ) {\n                  // We're done.\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n            } else if ( // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n              // We have now passed our CPU deadline and we'll just give up further\n              // attempts to render the main content and only render fallbacks.\n              // The assumption is that this is usually faster.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          }\n\n          if (renderState.isBackwards) {\n            // The effect list of the backwards tail will have been added\n            // to the end. This breaks the guarantee that life-cycles fire in\n            // sibling order but that isn't a strong guarantee promised by React.\n            // Especially since these might also just pop in during future commits.\n            // Append to the beginning of the list.\n            renderedTail.sibling = workInProgress.child;\n            workInProgress.child = renderedTail;\n          } else {\n            var previousSibling = renderState.last;\n\n            if (previousSibling !== null) {\n              previousSibling.sibling = renderedTail;\n            } else {\n              workInProgress.child = renderedTail;\n            }\n\n            renderState.last = renderedTail;\n          }\n        }\n\n        if (renderState.tail !== null) {\n          // We still have tail rows to render.\n          // Pop a row.\n          var next = renderState.tail;\n          renderState.rendering = next;\n          renderState.tail = next.sibling;\n          renderState.renderingStartTime = now$1();\n          next.sibling = null; // Restore the context.\n          // TODO: We can probably just avoid popping it instead and only\n          // setting it the first time we go from not suspended to suspended.\n\n          var suspenseContext = suspenseStackCursor.current;\n\n          if (didSuspendAlready) {\n            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n          } else {\n            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n          }\n\n          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n          // Don't bubble properties in this case.\n\n          return next;\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        popRenderLanes(workInProgress);\n        var _nextState = workInProgress.memoizedState;\n        var nextIsHidden = _nextState !== null;\n\n        if (current !== null) {\n          var _prevState2 = current.memoizedState;\n          var prevIsHidden = _prevState2 !== null;\n\n          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.\n          !enableLegacyHidden )) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n\n        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n          bubbleProperties(workInProgress);\n        } else {\n          // Don't bubble properties for hidden children unless we're rendering\n          // at offscreen priority.\n          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n            bubbleProperties(workInProgress);\n\n            if (supportsMutation) {\n              // Check if there was an insertion or update in the hidden subtree.\n              // If so, we need to hide those nodes in the commit phase, so\n              // schedule a visibility effect.\n              if ( workInProgress.subtreeFlags & (Placement | Update)) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n        }\n\n        return null;\n      }\n\n    case CacheComponent:\n      {\n\n        return null;\n      }\n\n    case TracingMarkerComponent:\n      {\n\n        return null;\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar didReceiveUpdate = false;\nvar didWarnAboutBadClass;\nvar didWarnAboutModulePatternComponent;\nvar didWarnAboutContextTypeOnFunctionComponent;\nvar didWarnAboutGetDerivedStateOnFunctionComponent;\nvar didWarnAboutFunctionRefs;\nvar didWarnAboutReassigningProps;\nvar didWarnAboutRevealOrder;\nvar didWarnAboutTailOptions;\n\n{\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n}\n\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n\n  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n}\n\nfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var render = Component.render;\n  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n  var nextChildren;\n  var hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n    hasId = checkDidRenderIdHook();\n\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  if (current === null) {\n    var type = Component.type;\n\n    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n    Component.defaultProps === undefined) {\n      var resolvedType = type;\n\n      {\n        resolvedType = resolveFunctionForHotReloading(type);\n      } // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n\n\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n\n      {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n\n      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n    }\n\n    {\n      var innerPropTypes = type.propTypes;\n\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(type));\n      }\n    }\n\n    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n\n  {\n    var _type = Component.type;\n    var _innerPropTypes = _type.propTypes;\n\n    if (_innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n      'prop', getComponentNameFromType(_type));\n    }\n  }\n\n  var currentChild = current.child; // This is always exactly one child\n\n  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n    var compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  var newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var outerMemoType = workInProgress.elementType;\n\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        var lazyComponent = outerMemoType;\n        var payload = lazyComponent._payload;\n        var init = lazyComponent._init;\n\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        } // Inner propTypes will be validated in the function component path.\n\n\n        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n        if (outerPropTypes) {\n          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n          'prop', getComponentNameFromType(outerMemoType));\n        }\n      }\n    }\n  }\n\n  if (current !== null) {\n    var prevProps = current.memoizedProps;\n\n    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n     workInProgress.type === current.type )) {\n      didReceiveUpdate = false;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n\n  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n}\n\nfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  var prevState = current !== null ? current.memoizedState : null;\n\n  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      var nextState = {\n        baseLanes: NoLanes,\n        cachePool: null\n      };\n      workInProgress.memoizedState = nextState;\n\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n\n      var nextBaseLanes;\n\n      if (prevState !== null) {\n        var prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n      var _nextState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool\n      };\n      workInProgress.memoizedState = _nextState;\n      workInProgress.updateQueue = null;\n      // to avoid a push/pop misalignment.\n\n\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n      // Rendering at offscreen, so we can clear the base lanes.\n      var _nextState2 = {\n        baseLanes: NoLanes,\n        cachePool: null\n      };\n      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    var _subtreeRenderLanes;\n\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      _subtreeRenderLanes = renderLanes;\n    }\n\n    pushRenderLanes(workInProgress, _subtreeRenderLanes);\n  }\n\n  {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    return workInProgress.child;\n  }\n}\n\nfunction updateFragment(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(current, workInProgress, renderLanes) {\n  {\n    workInProgress.flags |= Update;\n\n    {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      var stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef$1(current, workInProgress) {\n  var ref = workInProgress.ref;\n\n  if (current === null && ref !== null || current !== null && current.ref !== ref) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n\n    {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  var nextChildren;\n  var hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false:\n        {\n          var _instance = workInProgress.stateNode;\n          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n          // Is there a better way to do this?\n\n          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n          var state = tempInstance.state;\n\n          _instance.updater.enqueueSetState(_instance, state, null);\n\n          break;\n        }\n\n      case true:\n        {\n          workInProgress.flags |= DidCapture;\n          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n          var error$1 = new Error('Simulated error coming from DevTools');\n          var lane = pickArbitraryLane(renderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n          var update = createClassErrorUpdate(workInProgress, createCapturedValue(error$1, workInProgress), lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          break;\n        }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  } // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var instance = workInProgress.stateNode;\n  var shouldUpdate;\n\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n      workInProgress.flags |= Placement;\n    } // In the initial pass we might need to construct the instance.\n\n\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  } else {\n    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n  }\n\n  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n  {\n    var inst = workInProgress.stateNode;\n\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n      }\n\n      didWarnAboutReassigningProps = true;\n    }\n  }\n\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef$1(current, workInProgress);\n  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  var instance = workInProgress.stateNode; // Rerender\n\n  ReactCurrentOwner$1.current = workInProgress;\n  var nextChildren;\n\n  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    {\n      stopProfilerTimerIfRunning();\n    }\n  } else {\n    {\n      markComponentRenderStarted(workInProgress);\n    }\n\n    {\n      setIsRendering(true);\n      nextChildren = instance.render();\n\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      setIsRendering(false);\n    }\n\n    {\n      markComponentRenderStopped();\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  } // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n\n\n  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  var root = workInProgress.stateNode;\n\n  if (root.pendingContext) {\n    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var prevState = workInProgress.memoizedState;\n  var prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  var nextState = workInProgress.memoizedState;\n  var root = workInProgress.stateNode;\n  // being called \"element\".\n\n\n  var nextChildren = nextState.element;\n\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    var overrideState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n      transitions: nextState.transitions\n    };\n    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      var recoverableError = new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.');\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n    } else if (nextChildren !== prevChildren) {\n      var _recoverableError = new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.');\n\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n\n      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      workInProgress.child = child;\n      var node = child;\n\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = node.flags & ~Placement | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n  // Revert to client rendering.\n  resetHydrationState();\n  queueHydrationError(recoverableError);\n  workInProgress.flags |= ForceClientRender;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent$1(current, workInProgress, renderLanes) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  var type = workInProgress.type;\n  var nextProps = workInProgress.pendingProps;\n  var prevProps = current !== null ? current.memoizedProps : null;\n  var nextChildren = nextProps.children;\n  var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef$1(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText$1(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  } // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n\n\n  return null;\n}\n\nfunction mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  }\n\n  var props = workInProgress.pendingProps;\n  var lazyComponent = elementType;\n  var payload = lazyComponent._payload;\n  var init = lazyComponent._init;\n  var Component = init(payload); // Store the unwrapped component in the type.\n\n  workInProgress.type = Component;\n  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n  var resolvedProps = resolveDefaultProps(Component, props);\n  var child;\n\n  switch (resolvedTag) {\n    case FunctionComponent:\n      {\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n          workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n        }\n\n        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ClassComponent:\n      {\n        {\n          workInProgress.type = Component = resolveClassForHotReloading(Component);\n        }\n\n        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ForwardRef:\n      {\n        {\n          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n        }\n\n        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case MemoComponent:\n      {\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = Component.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n              'prop', getComponentNameFromType(Component));\n            }\n          }\n        }\n\n        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes);\n        return child;\n      }\n  }\n\n  var hint = '';\n\n  {\n    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  } // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n\n\n  throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n}\n\nfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  } // Promote the fiber to a class and try rendering again.\n\n\n  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n}\n\nfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  }\n\n  var props = workInProgress.pendingProps;\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var value;\n  var hasId;\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    if (Component.prototype && typeof Component.prototype.render === 'function') {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner$1.current = workInProgress;\n    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n        didWarnAboutModulePatternComponent[_componentName] = true;\n      }\n    }\n  }\n\n  if ( // Run these checks in production only if the flag is off.\n  // Eventually we'll delete this branch altogether.\n   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n    {\n      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n        didWarnAboutModulePatternComponent[_componentName2] = true;\n      }\n    } // Proceed under the assumption that this is a class instance\n\n\n    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n\n    var hasContext = false;\n\n    if (isContextProvider(Component)) {\n      hasContext = true;\n      pushContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n    initializeUpdateQueue(workInProgress);\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n\n    {\n\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n\n    {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress, Component) {\n  {\n    if (Component) {\n      if (Component.childContextTypes) {\n        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n      }\n    }\n\n    if (workInProgress.ref !== null) {\n      var info = '';\n      var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      var warningKey = ownerName || '';\n      var debugSource = workInProgress._debugSource;\n\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n\n        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n      }\n    }\n\n    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n        error('%s: Function components do not support contextType.', _componentName4);\n\n        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n      }\n    }\n  }\n}\n\nvar SUSPENDED_MARKER = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane\n};\n\nfunction mountSuspenseOffscreenState(renderLanes) {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache()\n  };\n}\n\nfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n  var cachePool = null;\n\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool: cachePool\n  };\n} // TODO: Probably should inline this back\n\n\nfunction shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    var suspenseState = current.memoizedState;\n\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  } // Not currently showing content. Consult the Suspense context.\n\n\n  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n}\n\nfunction getRemainingWorkInPrimaryTree(current, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n  {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  var suspenseContext = suspenseStackCursor.current;\n  var showFallback = false;\n  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (current === null || current.memoizedState !== null) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      {\n        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n    {\n      var suspenseState = workInProgress.memoizedState;\n\n      if (suspenseState !== null) {\n        var dehydrated = suspenseState.dehydrated;\n\n        if (dehydrated !== null) {\n          return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n        }\n      }\n    }\n\n    var nextPrimaryChildren = nextProps.children;\n    var nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var primaryChildFragment = workInProgress.child;\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n    }\n  } else {\n    // This is an update.\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    var prevState = current.memoizedState;\n\n    if (prevState !== null) {\n      // The current tree is already showing a fallback\n      // Special path for hydration\n      {\n        var _dehydrated = prevState.dehydrated;\n\n        if (_dehydrated !== null) {\n          if (!didSuspend) {\n            return updateDehydratedSuspenseComponent(current, workInProgress, _dehydrated, prevState, renderLanes);\n          } else if (workInProgress.flags & ForceClientRender) {\n            // Something errored during hydration. Try again without hydrating.\n            workInProgress.flags &= ~ForceClientRender;\n            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n          } else if (workInProgress.memoizedState !== null) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            var _nextPrimaryChildren = nextProps.children;\n            var _nextFallbackChildren = nextProps.fallback;\n            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n            var _primaryChildFragment2 = workInProgress.child;\n            _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes);\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n\n      if (showFallback) {\n        var _nextFallbackChildren2 = nextProps.fallback;\n        var _nextPrimaryChildren2 = nextProps.children;\n\n        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);\n\n        var _primaryChildFragment3 = workInProgress.child;\n        var prevOffscreenState = current.child.memoizedState;\n        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return _fallbackChildFragment;\n      } else {\n        var _nextPrimaryChildren3 = nextProps.children;\n\n        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);\n\n        workInProgress.memoizedState = null;\n        return _primaryChildFragment4;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        var _nextFallbackChildren3 = nextProps.fallback;\n        var _nextPrimaryChildren4 = nextProps.children;\n\n        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);\n\n        var _primaryChildFragment5 = workInProgress.child;\n        var _prevOffscreenState = current.child.memoizedState;\n        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);\n        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the\n        // fallback children.\n\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return _fallbackChildFragment2;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        var _nextPrimaryChildren5 = nextProps.children;\n\n        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);\n\n        workInProgress.memoizedState = null;\n        return _primaryChildFragment6;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var progressedPrimaryFragment = workInProgress.child;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n  var fallbackChildFragment;\n\n  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n    mode: 'visible',\n    children: primaryChildren\n  });\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    var deletions = workInProgress.deletions;\n\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n\n  if ( // In legacy mode, we commit the primary tree as if it successfully\n  // completed, even though it's in an inconsistent state.\n  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n  // already cloned. In legacy mode, the only case where this isn't true is\n  // when DevTools forces us to display a fallback; we skip the first render\n  // pass entirely and go straight to rendering the fallback. (In Concurrent\n  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n  // only codepath.)\n  workInProgress.child !== currentPrimaryChildFragment) {\n    var progressedPrimaryFragment = workInProgress.child;\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n    }\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n\n\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n\n\n    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n\n  var fallbackChildFragment;\n\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n  } else {\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  } // This will add the old fiber to the deletion list\n\n\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n  var nextProps = workInProgress.pendingProps;\n  var primaryChildren = nextProps.children;\n  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var fiberMode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n\n  fallbackChildFragment.flags |= Placement;\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    {\n      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n    }\n\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(current, workInProgress, suspenseInstance, suspenseState, renderLanes) {\n  // We should never be hydrating at this point because it is the first pass,\n  // but after we've already committed once.\n  warnIfHydrating();\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument\n    // required — every concurrent mode path that causes hydration to\n    // de-opt to client rendering should have an error message.\n    null);\n  }\n\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This boundary is in a permanent fallback state. In this case, we'll never\n    // get an update and we'll never be able to hydrate the final content. Let's just try the\n    // client side render instead.\n    return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: The server should serialize the error message so we can log it\n    // here on the client. Or, in production, a hash/id that corresponds to\n    // the error.\n    new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.'));\n  }\n  // any context has changed, we need to treat is as if the input might have changed.\n\n\n  var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n\n  if (didReceiveUpdate || hasContextChanged) {\n    // This boundary has changed since the first render. This means that we are now unable to\n    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n    var root = getWorkInProgressRoot();\n\n    if (root !== null) {\n      var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n\n      if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n        // Intentionally mutating since this render will get interrupted. This\n        // is one of the very rare times where we mutate the current tree\n        // during the render phase.\n        suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n        var eventTime = NoTimestamp;\n        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n      }\n    } // If we have scheduled higher pri work above, this will probably just abort the render\n    // since we now have higher priority work, but in case it doesn't, we need to prepare to\n    // render something, if we time out. Even if that requires us to delete everything and\n    // skip hydration.\n    // Delay having to do this as long as the suspense timeout allows us.\n\n\n    renderDidSuspendDelayIfPossible();\n    return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n  } else if (isSuspenseInstancePending(suspenseInstance)) {\n    // This component is still pending more data from the server, so we can't hydrate its\n    // content. We treat it as if this component suspended itself. It might seem as if\n    // we could just try to render it client-side instead. However, this will perform a\n    // lot of unnecessary work and is unlikely to complete since it often will suspend\n    // on missing data anyway. Additionally, the server might be able to render more\n    // than we can on the client yet. In that case we'd end up with more fallback states\n    // on the client than if we just leave it alone. If the server times out or errors\n    // these should update this boundary to the permanent Fallback state instead.\n    // Mark it as having captured (i.e. suspended).\n    workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n    workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n    var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n    registerSuspenseInstanceRetry(suspenseInstance, retry);\n    return null;\n  } else {\n    // This is the first attempt.\n    reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n    var nextProps = workInProgress.pendingProps;\n    var primaryChildren = nextProps.children;\n    var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n    // tree is part of a hydrating tree. This is used to determine if a child\n    // node has fully mounted yet, and for scheduling event replaying.\n    // Conceptually this is similar to Placement in that a new subtree is\n    // inserted into the React tree here. It just happens to not need DOM\n    // mutations because it already exists.\n\n    primaryChildFragment.flags |= Hydrating;\n    return primaryChildFragment;\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  var node = firstChild;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === workInProgress) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild) {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  var row = firstChild;\n  var lastContentRow = null;\n\n  while (row !== null) {\n    var currentRow = row.alternate; // New rows can't be content rows.\n\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n\n    row = row.sibling;\n  }\n\n  return lastContentRow;\n}\n\nfunction validateRevealOrder(revealOrder) {\n  {\n    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          case 'forward':\n          case 'backward':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          default:\n            error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\n            break;\n        }\n      } else {\n        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(tailMode, revealOrder) {\n  {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot, index) {\n  {\n    var isAnArray = isArray(childSlot);\n    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n    if (isAnArray || isIterable) {\n      var type = isAnArray ? 'array' : 'iterable';\n\n      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateSuspenseListChildren(children, revealOrder) {\n  {\n    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n      if (isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n\n        if (typeof iteratorFn === 'function') {\n          var childrenIterator = iteratorFn.call(children);\n\n          if (childrenIterator) {\n            var step = childrenIterator.next();\n            var _i = 0;\n\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, _i)) {\n                return;\n              }\n\n              _i++;\n            }\n          }\n        } else {\n          error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n  var renderState = workInProgress.memoizedState;\n\n  if (renderState === null) {\n    workInProgress.memoizedState = {\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode\n    };\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n} // This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\n\n\nfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var revealOrder = nextProps.revealOrder;\n  var tailMode = nextProps.tail;\n  var newChildren = nextProps.children;\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  var suspenseContext = suspenseStackCursor.current;\n  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    workInProgress.flags |= DidCapture;\n  } else {\n    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n    }\n\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards':\n        {\n          var lastContentRow = findLastContentRow(workInProgress.child);\n          var tail;\n\n          if (lastContentRow === null) {\n            // The whole list is part of the tail.\n            // TODO: We could fast path by just rendering the tail now.\n            tail = workInProgress.child;\n            workInProgress.child = null;\n          } else {\n            // Disconnect the tail rows after the content row.\n            // We're going to render them separately later.\n            tail = lastContentRow.sibling;\n            lastContentRow.sibling = null;\n          }\n\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          tail, lastContentRow, tailMode);\n          break;\n        }\n\n      case 'backwards':\n        {\n          // We're going to find the first row that has existing content.\n          // At the same time we're going to reverse the list of everything\n          // we pass in the meantime. That's going to be our tail in reverse\n          // order.\n          var _tail = null;\n          var row = workInProgress.child;\n          workInProgress.child = null;\n\n          while (row !== null) {\n            var currentRow = row.alternate; // New rows can't be content rows.\n\n            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n              // This is the beginning of the main content.\n              workInProgress.child = row;\n              break;\n            }\n\n            var nextRow = row.sibling;\n            row.sibling = _tail;\n            _tail = row;\n            row = nextRow;\n          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n          initSuspenseListRenderState(workInProgress, true, // isBackwards\n          _tail, null, // last\n          tailMode);\n          break;\n        }\n\n      case 'together':\n        {\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          null, // tail\n          null, // last\n          undefined);\n          break;\n        }\n\n      default:\n        {\n          // The default reveal order is the same as not having\n          // a boundary.\n          workInProgress.memoizedState = null;\n        }\n    }\n  }\n\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(current, workInProgress, renderLanes) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  var nextChildren = workInProgress.pendingProps;\n\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(current, workInProgress, renderLanes) {\n  var providerType = workInProgress.type;\n  var context = providerType._context;\n  var newProps = workInProgress.pendingProps;\n  var oldProps = workInProgress.memoizedProps;\n  var newValue = newProps.value;\n\n  {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n      }\n    }\n\n    var providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  {\n    if (oldProps !== null) {\n      var oldValue = oldProps.value;\n\n      if (objectIs(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (oldProps.children === newProps.children && !hasContextChanged()) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  var newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(current, workInProgress, renderLanes) {\n  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n\n  {\n    if (context._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n\n          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n        }\n      }\n    } else {\n      context = context._context;\n    }\n  }\n\n  var newProps = workInProgress.pendingProps;\n  var render = newProps.children;\n\n  {\n    if (typeof render !== 'function') {\n      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var newValue = readContext(context);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  var newChildren;\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning();\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    {\n      return null;\n    }\n  } // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n\n\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n  {\n    var returnFiber = oldWorkInProgress.return;\n\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    } // Disconnect from the old current.\n    // It will get deleted.\n\n\n    current.alternate = null;\n    oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      var prevSibling = returnFiber.child;\n\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n\n      prevSibling.sibling = newWorkInProgress;\n    } // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n    return newWorkInProgress;\n  }\n}\n\nfunction checkScheduledUpdateOrContext(current, renderLanes) {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  var updateLanes = current.lanes;\n\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  } // No pending update, but because context is propagated lazily, we need\n\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      var root = workInProgress.stateNode;\n\n      resetHydrationState();\n      break;\n\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          pushContextProvider(workInProgress);\n        }\n\n        break;\n      }\n\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n\n    case ContextProvider:\n      {\n        var newValue = workInProgress.memoizedProps.value;\n        var context = workInProgress.type._context;\n        pushProvider(workInProgress, context, newValue);\n        break;\n      }\n\n    case Profiler:\n      {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n\n      break;\n\n    case SuspenseComponent:\n      {\n        var state = workInProgress.memoizedState;\n\n        if (state !== null) {\n          {\n            if (state.dehydrated !== null) {\n              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n              // been unsuspended it has committed as a resolved Suspense component.\n              // If it needs to be retried, it should have work scheduled on it.\n\n              workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n              // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n              return null;\n            }\n          } // If this boundary is currently timed out, we need to decide\n          // whether to retry the primary children, or to skip over it and\n          // go straight to the fallback. Check the priority of the primary\n          // child fragment.\n\n\n          var primaryChildFragment = workInProgress.child;\n          var primaryChildLanes = primaryChildFragment.childLanes;\n\n          if (includesSomeLane(renderLanes, primaryChildLanes)) {\n            // The primary children have pending work. Use the normal path\n            // to attempt to render the primary children again.\n            return updateSuspenseComponent(current, workInProgress, renderLanes);\n          } else {\n            // The primary child fragment does not have pending work marked\n            // on it\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n            // priority. Bailout.\n\n            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n            if (child !== null) {\n              // The fallback children have pending work. Skip over the\n              // primary children and work on the fallback.\n              return child.sibling;\n            } else {\n              // Note: We can return `null` here because we already checked\n              // whether there were nested context consumers, via the call to\n              // `bailoutOnAlreadyFinishedWork` above.\n              return null;\n            }\n          }\n        } else {\n          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n        }\n\n        break;\n      }\n\n    case SuspenseListComponent:\n      {\n        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (didSuspendBefore) {\n          if (_hasChildWork) {\n            // If something was in fallback state last time, and we have all the\n            // same children then we're still in progressive loading state.\n            // Something might get unblocked by state updates or retries in the\n            // tree which will affect the tail. So we need to use the normal\n            // path to compute the correct tail.\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          } // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n\n\n          workInProgress.flags |= DidCapture;\n        } // If nothing suspended before and we're rendering the same children,\n        // then the tail doesn't matter. Anything new that suspends will work\n        // in the \"together\" mode, so we can continue from the state we had.\n\n\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState !== null) {\n          // Reset to the \"together\" mode in case we've started a different\n          // update in the past but didn't complete it.\n          renderState.rendering = null;\n          renderState.tail = null;\n          renderState.lastEffect = null;\n        }\n\n        pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n        if (_hasChildWork) {\n          break;\n        } else {\n          // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n          return null;\n        }\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        // Need to check if the tree still needs to be deferred. This is\n        // almost identical to the logic used in the normal update path,\n        // so we'll just enter that. The only difference is we'll bail out\n        // at the next level instead of this one, because the child props\n        // have not changed. Which is fine.\n        // TODO: Probably should refactor `beginWork` to split the bailout\n        // path from the normal path. I'm tempted to do a labeled break here\n        // but I won't :)\n        workInProgress.lanes = NoLanes;\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(current, workInProgress, renderLanes) {\n  {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n    }\n  }\n\n  if (current !== null) {\n    var oldProps = current.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n\n    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n     workInProgress.type !== current.type )) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n      // may not be work scheduled on `current`, so we check for this flag.\n      (workInProgress.flags & DidCapture) === NoFlags) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n      }\n\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      var slotIndex = workInProgress.index;\n      var numberOfForks = getForksAtLevel();\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  } // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n\n\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n      {\n        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n      }\n\n    case LazyComponent:\n      {\n        var elementType = workInProgress.elementType;\n        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n      }\n\n    case FunctionComponent:\n      {\n        var Component = workInProgress.type;\n        var unresolvedProps = workInProgress.pendingProps;\n        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n      }\n\n    case ClassComponent:\n      {\n        var _Component = workInProgress.type;\n        var _unresolvedProps = workInProgress.pendingProps;\n\n        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n      }\n\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n\n    case HostComponent:\n      return updateHostComponent$1(current, workInProgress, renderLanes);\n\n    case HostText:\n      return updateHostText$1(current, workInProgress);\n\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n\n    case ForwardRef:\n      {\n        var type = workInProgress.type;\n        var _unresolvedProps2 = workInProgress.pendingProps;\n\n        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n      }\n\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n\n    case MemoComponent:\n      {\n        var _type2 = workInProgress.type;\n        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = _type2.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n              'prop', getComponentNameFromType(_type2));\n            }\n          }\n        }\n\n        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n      }\n\n    case SimpleMemoComponent:\n      {\n        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n      }\n\n    case IncompleteClassComponent:\n      {\n        var _Component2 = workInProgress.type;\n        var _unresolvedProps4 = workInProgress.pendingProps;\n\n        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n      }\n\n    case SuspenseListComponent:\n      {\n        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nfunction unwindWork(current, workInProgress, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        var flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n        var _flags = workInProgress.flags;\n\n        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n          // There was an error during render that wasn't captured by a suspense\n          // boundary. Do a second pass on the root to unmount the children.\n          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n          return workInProgress;\n        } // We unwound to the root without completing it. Exit.\n\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n\n        {\n          var suspenseState = workInProgress.memoizedState;\n\n          if (suspenseState !== null && suspenseState.dehydrated !== null) {\n            if (workInProgress.alternate === null) {\n              throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n            }\n\n            resetHydrationState();\n          }\n        }\n\n        var _flags2 = workInProgress.flags;\n\n        if (_flags2 & ShouldCapture) {\n          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n\n    case ContextProvider:\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n\n      return null;\n\n    case CacheComponent:\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        var childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popContext(interruptedWork);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n\n        popHostContainer(interruptedWork);\n        popTopLevelContextObject(interruptedWork);\n        resetWorkInProgressVersions();\n        break;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case ContextProvider:\n      var context = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n\n      break;\n  }\n}\n\nfunction invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n  var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nvar invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\n{\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      if (typeof document === 'undefined' || document === null) {\n        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n      }\n\n      var evt = document.createEvent('Event');\n      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n\n      var didError = true; // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n\n      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n\n      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n\n        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n          window.event = windowEvent;\n        }\n      } // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n\n\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      } // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n\n\n      var error; // Use this to track whether the error event is ever called.\n\n      var didSetError = false;\n      var isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {// Ignore.\n            }\n          }\n        }\n      } // Create a fake event type.\n\n\n      var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n        } else if (isCrossOriginError) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n        }\n\n        this.onError(error);\n      } // Remove our event listeners\n\n\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nvar invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n\nvar hasError = false;\nvar caughtError = null; // Used by event system to capture/rethrow the first error.\nvar reporter = {\n  onError: function (error) {\n    hasError = true;\n    caughtError = error;\n  }\n};\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\n\nfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n}\nfunction hasCaughtError() {\n  return hasError;\n}\nfunction clearCaughtError() {\n  if (hasError) {\n    var error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n{\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n} // Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n\nvar offscreenSubtreeIsHidden = false;\nvar offscreenSubtreeWasHidden = false;\nvar PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\nvar nextEffect = null; // Used for Profiling builds to track updaters.\n\nvar inProgressLanes = null;\nvar inProgressRoot = null;\n\nfunction reportUncaughtErrorInDEV(error) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  {\n    invokeGuardedCallback(null, function () {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nvar callComponentWillUnmountWithTimer = function (current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n\n  if ( current.mode & ProfileMode) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n}; // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n  try {\n    commitHookEffectListMount(Layout, current);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt unmounting.\n\n\nfunction safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyAttachRef(current, nearestMountedAncestor) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current, nearestMountedAncestor) {\n  var ref = current.ref;\n\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      var retVal;\n\n      try {\n        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n  try {\n    destroy();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nvar focusedInstanceHandle = null;\nvar shouldFireAfterActiveInstanceBlur = false;\nfunction commitBeforeMutationEffects(root, firstChild) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n  var shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n    var child = fiber.child;\n\n    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    setCurrentFiber(fiber);\n\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork) {\n  var current = finishedWork.alternate;\n  var flags = finishedWork.flags;\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentFiber(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          break;\n        }\n\n      case ClassComponent:\n        {\n          if (current !== null) {\n            var prevProps = current.memoizedProps;\n            var prevState = current.memoizedState;\n            var instance = finishedWork.stateNode; // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            }\n\n            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n            {\n              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                didWarnSet.add(finishedWork.type);\n\n                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n              }\n            }\n\n            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          if (supportsMutation) {\n            var root = finishedWork.stateNode;\n            clearContainer(root.containerInfo);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n\n      default:\n        {\n          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        var destroy = effect.destroy;\n        effect.destroy = undefined;\n\n        if (destroy !== undefined) {\n          {\n            if ((flags & Passive$1) !== NoFlags$1) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & Layout) !== NoFlags$1) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n\n          {\n            if ((flags & Passive$1) !== NoFlags$1) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & Layout) !== NoFlags$1) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags, finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        {\n          if ((flags & Passive$1) !== NoFlags$1) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & Layout) !== NoFlags$1) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        } // Mount\n\n\n        var create = effect.create;\n        effect.destroy = create();\n\n        {\n          if ((flags & Passive$1) !== NoFlags$1) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & Layout) !== NoFlags$1) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        {\n          var destroy = effect.destroy;\n\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            var hookName = void 0;\n\n            if ((effect.tag & Layout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & Insertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n\n            var addendum = void 0;\n\n            if (destroy === null) {\n              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n\n            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitPassiveEffectDurations(finishedRoot, finishedWork) {\n  {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler:\n          {\n            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n            var _finishedWork$memoize = finishedWork.memoizedProps,\n                id = _finishedWork$memoize.id,\n                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n            // It does not get reset until the start of the next commit phase.\n\n            var commitTime = getCommitTime();\n            var phase = finishedWork.alternate === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onPostCommit === 'function') {\n              onPostCommit(id, phase, passiveEffectDuration, commitTime);\n            } // Bubble times to the next nearest ancestor Profiler.\n            // After we process that Profiler, we'll bubble further up.\n\n\n            var parentFiber = finishedWork.return;\n\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n              }\n\n              parentFiber = parentFiber.return;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          if ( !offscreenSubtreeWasHidden) {\n            // At this point layout effects have already been destroyed (during mutation phase).\n            // This is done to prevent sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n            if ( finishedWork.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListMount(Layout | HasEffect, finishedWork);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListMount(Layout | HasEffect, finishedWork);\n            }\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = finishedWork.stateNode;\n\n          if (finishedWork.flags & Update) {\n            if (!offscreenSubtreeWasHidden) {\n              if (current === null) {\n                // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidMount();\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidMount();\n                }\n              } else {\n                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                var prevState = current.memoizedState; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                }\n              }\n            }\n          } // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n\n\n          var updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            } // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n\n            commitUpdateQueue(finishedWork, updateQueue, instance);\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n          var _updateQueue = finishedWork.updateQueue;\n\n          if (_updateQueue !== null) {\n            var _instance = null;\n\n            if (finishedWork.child !== null) {\n              switch (finishedWork.child.tag) {\n                case HostComponent:\n                  _instance = getPublicInstance(finishedWork.child.stateNode);\n                  break;\n\n                case ClassComponent:\n                  _instance = finishedWork.child.stateNode;\n                  break;\n              }\n            }\n\n            commitUpdateQueue(finishedWork, _updateQueue, _instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (current === null && finishedWork.flags & Update) {\n            var type = finishedWork.type;\n            var props = finishedWork.memoizedProps;\n            commitMount(_instance2, type, props, finishedWork);\n          }\n\n          break;\n        }\n\n      case HostText:\n        {\n          // We have no life-cycles associated with text.\n          break;\n        }\n\n      case HostPortal:\n        {\n          // We have no life-cycles associated with portals.\n          break;\n        }\n\n      case Profiler:\n        {\n          {\n            var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                onCommit = _finishedWork$memoize2.onCommit,\n                onRender = _finishedWork$memoize2.onRender;\n            var effectDuration = finishedWork.stateNode.effectDuration;\n            var commitTime = getCommitTime();\n            var phase = current === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onRender === 'function') {\n              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n            }\n\n            {\n              if (typeof onCommit === 'function') {\n                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n              // because the effect is also where times bubble to parent Profilers.\n\n\n              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n              // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n              var parentFiber = finishedWork.return;\n\n              outer: while (parentFiber !== null) {\n                switch (parentFiber.tag) {\n                  case HostRoot:\n                    var root = parentFiber.stateNode;\n                    root.effectDuration += effectDuration;\n                    break outer;\n\n                  case Profiler:\n                    var parentStateNode = parentFiber.stateNode;\n                    parentStateNode.effectDuration += effectDuration;\n                    break outer;\n                }\n\n                parentFiber = parentFiber.return;\n              }\n            }\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n          break;\n        }\n\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n        {\n          break;\n        }\n\n      default:\n        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  if ( !offscreenSubtreeWasHidden) {\n    {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( node.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            safelyCallCommitHookLayoutEffectListMount(node, node.return);\n          } finally {\n            recordLayoutEffectDuration(node);\n          }\n        } else {\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        }\n\n        break;\n      }\n\n    case ClassComponent:\n      {\n        var instance = node.stateNode;\n\n        if (typeof instance.componentDidMount === 'function') {\n          safelyCallComponentDidMount(node, node.return, instance);\n        }\n\n        safelyAttachRef(node, node.return);\n        break;\n      }\n\n    case HostComponent:\n      {\n        safelyAttachRef(node, node.return);\n        break;\n      }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  var hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    var node = finishedWork;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n          var instance = node.stateNode;\n\n          if (isHidden) {\n            hideInstance(instance);\n          } else {\n            unhideInstance(node.stateNode, node.memoizedProps);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          var _instance3 = node.stateNode;\n\n          if (isHidden) {\n            hideTextInstance(_instance3);\n          } else {\n            unhideTextInstance(_instance3, node.memoizedProps);\n          }\n        }\n      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork) {\n  var ref = finishedWork.ref;\n\n  if (ref !== null) {\n    var instance = finishedWork.stateNode;\n    var instanceToUse;\n\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n\n      default:\n        instanceToUse = instance;\n    } // Moved outside to ensure DCE works with this flag\n\n    if (typeof ref === 'function') {\n      var retVal;\n\n      if ( finishedWork.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n        }\n      }\n    } else {\n      {\n        if (!ref.hasOwnProperty('current')) {\n          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current) {\n  var currentRef = current.ref;\n\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if ( current.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n} // User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\n\n\nfunction commitUnmount(finishedRoot, current, nearestMountedAncestor) {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        var updateQueue = current.updateQueue;\n\n        if (updateQueue !== null) {\n          var lastEffect = updateQueue.lastEffect;\n\n          if (lastEffect !== null) {\n            var firstEffect = lastEffect.next;\n            var effect = firstEffect;\n\n            do {\n              var _effect = effect,\n                  destroy = _effect.destroy,\n                  tag = _effect.tag;\n\n              if (destroy !== undefined) {\n                if ((tag & Insertion) !== NoFlags$1) {\n                  safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                } else if ((tag & Layout) !== NoFlags$1) {\n                  {\n                    markComponentLayoutEffectUnmountStarted(current);\n                  }\n\n                  if ( current.mode & ProfileMode) {\n                    startLayoutEffectTimer();\n                    safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                    recordLayoutEffectDuration(current);\n                  } else {\n                    safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                  }\n\n                  {\n                    markComponentLayoutEffectUnmountStopped();\n                  }\n                }\n              }\n\n              effect = effect.next;\n            } while (effect !== firstEffect);\n          }\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        safelyDetachRef(current, nearestMountedAncestor);\n        var instance = current.stateNode;\n\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance);\n        }\n\n        return;\n      }\n\n    case HostComponent:\n      {\n        safelyDetachRef(current, nearestMountedAncestor);\n        return;\n      }\n\n    case HostPortal:\n      {\n        // TODO: this is recursive.\n        // We are also not using this parent because\n        // the portal will get pushed immediately.\n        if (supportsMutation) {\n          unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n        } else if (supportsPersistence) {\n          emptyPortalContainer(current);\n        }\n\n        return;\n      }\n\n    case DehydratedFragment:\n      {\n\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        return;\n      }\n  }\n}\n\nfunction commitNestedUnmounts(finishedRoot, root, nearestMountedAncestor) {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  var node = root;\n\n  while (true) {\n    commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n\n    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.\n    // If we don't use mutation we drill down into portals here instead.\n    !supportsMutation || node.tag !== HostPortal)) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === root) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber) {\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  } // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n\n\n  {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n\n    if (fiber.tag === HostComponent) {\n      var hostInstance = fiber.stateNode;\n\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n\n    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    {\n      fiber._debugOwner = null;\n    }\n\n    {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  var portal = current.stateNode;\n  var containerInfo = portal.containerInfo;\n  var emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText:\n      {\n        return;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        var portalOrRoot = finishedWork.stateNode;\n        var containerInfo = portalOrRoot.containerInfo,\n            pendingChildren = portalOrRoot.pendingChildren;\n        replaceContainerChildren(containerInfo, pendingChildren);\n        return;\n      }\n  }\n\n  throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n}\n\nfunction getHostParentFiber(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n\n    parent = parent.return;\n  }\n\n  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n}\n\nfunction isHostParent(fiber) {\n  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n}\n\nfunction getHostSibling(fiber) {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  var node = fiber;\n\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n\n    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      } // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n\n\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    } // Check if this host node is stable or about to be placed.\n\n\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork) {\n  if (!supportsMutation) {\n    return;\n  } // Recursively insert all host nodes into the parent.\n\n\n  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n  switch (parentFiber.tag) {\n    case HostComponent:\n      {\n        var parent = parentFiber.stateNode;\n\n        if (parentFiber.flags & ContentReset) {\n          // Reset the text content of the parent before doing any insertions\n          resetTextContent(parent); // Clear ContentReset from the effect tag\n\n          parentFiber.flags &= ~ContentReset;\n        }\n\n        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n\n        insertOrAppendPlacementNode(finishedWork, before, parent);\n        break;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        var _parent = parentFiber.stateNode.containerInfo;\n\n        var _before = getHostSibling(finishedWork);\n\n        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n        break;\n      }\n    // eslint-disable-next-line-no-fallthrough\n\n    default:\n      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(finishedRoot, current, nearestMountedAncestor) {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  var node = current; // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n\n  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.\n\n  var currentParent;\n  var currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      var parent = node.return;\n\n      findParent: while (true) {\n        if (parent === null) {\n          throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n        }\n\n        var parentStateNode = parent.stateNode;\n\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n        }\n\n        parent = parent.return;\n      }\n\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor); // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n\n      if (currentParentIsContainer) {\n        removeChildFromContainer(currentParent, node.stateNode);\n      } else {\n        removeChild(currentParent, node.stateNode);\n      } // Don't visit children because we already visited them.\n\n    } else if ( node.tag === DehydratedFragment) {\n\n\n      if (currentParentIsContainer) {\n        clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);\n      } else {\n        clearSuspenseBoundary(currentParent, node.stateNode);\n      }\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true; // Visit children because portals might contain host components.\n\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because we may find more host components below.\n\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n\n    if (node === current) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n\n      node = node.return;\n\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(finishedRoot, current, nearestMountedAncestor) {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current, nearestMountedAncestor);\n  }\n\n  detachFiberMutation(current);\n}\n\nfunction commitWork(current, finishedWork) {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n          commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all\n          // destroy functions for all fibers are called before any create functions.\n          // This prevents sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n          // TODO: Check if we're inside an Offscreen subtree that disappeared\n          // during this commit. If so, we would have already unmounted its\n          // layout hooks. (However, since we null out the `destroy` function\n          // right before calling it, the behavior is already correct, so this\n          // would mostly be for modeling purposes.)\n\n          if ( finishedWork.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n          }\n\n          return;\n        }\n\n      case Profiler:\n        {\n          return;\n        }\n\n      case SuspenseComponent:\n        {\n          commitSuspenseCallback(finishedWork);\n          attachSuspenseRetryListeners(finishedWork);\n          return;\n        }\n\n      case SuspenseListComponent:\n        {\n          attachSuspenseRetryListeners(finishedWork);\n          return;\n        }\n\n      case HostRoot:\n        {\n          if (supportsHydration) {\n            if (current !== null) {\n              var prevRootState = current.memoizedState;\n\n              if (prevRootState.isDehydrated) {\n                var root = finishedWork.stateNode;\n                commitHydratedContainer(root.containerInfo);\n              }\n            }\n          }\n\n          break;\n        }\n\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n        {\n          return;\n        }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n        commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n\n        if ( finishedWork.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        return;\n      }\n\n    case HostComponent:\n      {\n        var instance = finishedWork.stateNode;\n\n        if (instance != null) {\n          // Commit the work prepared earlier.\n          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n\n          var oldProps = current !== null ? current.memoizedProps : newProps;\n          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n          var updatePayload = finishedWork.updateQueue;\n          finishedWork.updateQueue = null;\n\n          if (updatePayload !== null) {\n            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);\n          }\n        }\n\n        return;\n      }\n\n    case HostText:\n      {\n        if (finishedWork.stateNode === null) {\n          throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n        }\n\n        var textInstance = finishedWork.stateNode;\n        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n\n        var oldText = current !== null ? current.memoizedProps : newText;\n        commitTextUpdate(textInstance, oldText, newText);\n        return;\n      }\n\n    case HostRoot:\n      {\n        if (supportsHydration) {\n          if (current !== null) {\n            var _prevRootState = current.memoizedState;\n\n            if (_prevRootState.isDehydrated) {\n              var _root = finishedWork.stateNode;\n              commitHydratedContainer(_root.containerInfo);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case Profiler:\n      {\n        return;\n      }\n\n    case SuspenseComponent:\n      {\n        commitSuspenseCallback(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n\n    case SuspenseListComponent:\n      {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n\n    case IncompleteClassComponent:\n      {\n        return;\n      }\n  }\n\n  throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n}\n\nfunction commitSuspenseCallback(finishedWork) {\n  // TODO: Move this to passive phase\n  var newState = finishedWork.memoizedState;\n}\n\nfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n  if (!supportsHydration) {\n    return;\n  }\n\n  var newState = finishedWork.memoizedState;\n\n  if (newState === null) {\n    var current = finishedWork.alternate;\n\n    if (current !== null) {\n      var prevState = current.memoizedState;\n\n      if (prevState !== null) {\n        var suspenseInstance = prevState.dehydrated;\n\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  var wakeables = finishedWork.updateQueue;\n\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    var retryCache = finishedWork.stateNode;\n\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n\n    wakeables.forEach(function (wakeable) {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n} // This function detects when a Suspense boundary goes from visible to hidden.\n\nfunction commitResetTextContent(current) {\n  if (!supportsMutation) {\n    return;\n  }\n\n  resetTextContent(current.stateNode);\n}\n\nfunction commitMutationEffects(root, firstChild, committedLanes) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = firstChild;\n  commitMutationEffects_begin(root, committedLanes);\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitMutationEffects_begin(root, lanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // TODO: Should wrap this in flags check, too, as optimization\n\n    var deletions = fiber.deletions;\n\n    if (deletions !== null) {\n      for (var i = 0; i < deletions.length; i++) {\n        var childToDelete = deletions[i];\n\n        try {\n          commitDeletion(root, childToDelete, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(childToDelete, fiber, error);\n        }\n      }\n    }\n\n    var child = fiber.child;\n\n    if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitMutationEffects_complete(root, lanes);\n    }\n  }\n}\n\nfunction commitMutationEffects_complete(root, lanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    setCurrentFiber(fiber);\n\n    try {\n      commitMutationEffectsOnFiber(fiber, root, lanes);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n  // TODO: The factoring of this phase could probably be improved. Consider\n  // switching on the type of work before checking the flags. That's what\n  // we do in all the other phases. I think this one is only different\n  // because of the shared reconciliation logic below.\n  var flags = finishedWork.flags;\n\n  if (flags & ContentReset) {\n    commitResetTextContent(finishedWork);\n  }\n\n  if (flags & Ref) {\n    var current = finishedWork.alternate;\n\n    if (current !== null) {\n      commitDetachRef(current);\n    }\n  }\n\n  if (flags & Visibility) {\n    switch (finishedWork.tag) {\n      case SuspenseComponent:\n        {\n          var newState = finishedWork.memoizedState;\n          var isHidden = newState !== null;\n\n          if (isHidden) {\n            var _current = finishedWork.alternate;\n            var wasHidden = _current !== null && _current.memoizedState !== null;\n\n            if (!wasHidden) {\n              // TODO: Move to passive phase\n              markCommitTimeOfFallback();\n            }\n          }\n\n          break;\n        }\n\n      case OffscreenComponent:\n        {\n          var _newState = finishedWork.memoizedState;\n\n          var _isHidden = _newState !== null;\n\n          var _current2 = finishedWork.alternate;\n\n          var _wasHidden = _current2 !== null && _current2.memoizedState !== null;\n\n          var offscreenBoundary = finishedWork;\n\n          if (supportsMutation) {\n            // TODO: This needs to run whenever there's an insertion or update\n            // inside a hidden Offscreen tree.\n            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n          }\n\n          {\n            if (_isHidden) {\n              if (!_wasHidden) {\n                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                  nextEffect = offscreenBoundary;\n                  var offscreenChild = offscreenBoundary.child;\n\n                  while (offscreenChild !== null) {\n                    nextEffect = offscreenChild;\n                    disappearLayoutEffects_begin(offscreenChild);\n                    offscreenChild = offscreenChild.sibling;\n                  }\n                }\n              }\n            }\n\n            break;\n          }\n        }\n    }\n  } // The following switch statement is only concerned about placement,\n  // updates, and deletions. To avoid needing to add a case for every possible\n  // bitmap value, we remove the secondary effects from the effect tag and\n  // switch on that value.\n\n\n  var primaryFlags = flags & (Placement | Update | Hydrating);\n\n   switch (primaryFlags) {\n    case Placement:\n      {\n        commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n\n        finishedWork.flags &= ~Placement;\n        break;\n      }\n\n    case PlacementAndUpdate:\n      {\n        // Placement\n        commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n\n        finishedWork.flags &= ~Placement; // Update\n\n        var _current3 = finishedWork.alternate;\n        commitWork(_current3, finishedWork);\n        break;\n      }\n\n    case Hydrating:\n      {\n        finishedWork.flags &= ~Hydrating;\n        break;\n      }\n\n    case HydratingAndUpdate:\n      {\n        finishedWork.flags &= ~Hydrating; // Update\n\n        var _current4 = finishedWork.alternate;\n        commitWork(_current4, finishedWork);\n        break;\n      }\n\n    case Update:\n      {\n        var _current5 = finishedWork.alternate;\n        commitWork(_current5, finishedWork);\n        break;\n      }\n  }\n}\n\nfunction commitLayoutEffects(finishedWork, root, committedLanes) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ( fiber.tag === OffscreenComponent && isModernRoot) {\n      // Keep track of the current Offscreen stack's state.\n      var isHidden = fiber.memoizedState !== null;\n      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        var current = fiber.alternate;\n        var wasHidden = current !== null && current.memoizedState !== null;\n        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        var child = firstChild;\n\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.\n          root, committedLanes);\n          child = child.sibling;\n        } // Restore Offscreen state and resume in our-progress traversal.\n\n\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      var current = fiber.alternate;\n      setCurrentFiber(fiber);\n\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ( fiber.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(Layout, fiber, fiber.return);\n            } finally {\n              recordLayoutEffectDuration(fiber);\n            }\n          } else {\n            commitHookEffectListUnmount(Layout, fiber, fiber.return);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(fiber, fiber.return);\n          var instance = fiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          safelyDetachRef(fiber, fiber.return);\n          break;\n        }\n\n      case OffscreenComponent:\n        {\n          // Check if this is a\n          var isHidden = fiber.memoizedState !== null;\n\n          if (isHidden) {\n            // Nested Offscreen tree is already hidden. Don't disappear\n            // its effects.\n            disappearLayoutEffects_complete(subtreeRoot);\n            continue;\n          }\n\n          break;\n        }\n    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      var isHidden = fiber.memoizedState !== null;\n\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n    setCurrentFiber(fiber);\n\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountEffects(root, finishedWork) {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(finishedWork, root);\n}\n\nfunction commitPassiveMountEffects_begin(subtreeRoot, root) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(subtreeRoot, root);\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(subtreeRoot, root) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n\n      try {\n        commitPassiveMountOnFiber(root, fiber);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(finishedRoot, finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n          } finally {\n            recordPassiveEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffects(firstChild) {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      var deletions = fiber.deletions;\n\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n        }\n\n        {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          var previousFiber = fiber.alternate;\n\n          if (previousFiber !== null) {\n            var detachedChild = previousFiber.child;\n\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n\n              do {\n                var detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentFiber();\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n          recordPassiveEffectDuration(finishedWork);\n        } else {\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n\n    setCurrentFiber(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentFiber();\n    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n    if (child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var sibling = fiber.sibling;\n    var returnFiber = fiber.return;\n\n    {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, returnFiber);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( current.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n          recordPassiveEffectDuration(current);\n        } else {\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n        }\n\n        break;\n      }\n  }\n}\n\nvar didWarnWrongReturnPointer = false;\n\nfunction ensureCorrectReturnPointer(fiber, expectedReturnFiber) {\n  {\n    if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {\n      didWarnWrongReturnPointer = true;\n\n      error('Internal React error: Return pointer is inconsistent ' + 'with parent.');\n    }\n  } // TODO: Remove this assignment once we're confident that it won't break\n  // anything, by checking the warning logs for the above invariant\n\n\n  fiber.return = expectedReturnFiber;\n} // TODO: Reuse reappearLayoutEffects traversal here?\n\n\nfunction invokeLayoutEffectMountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListMount(Layout | HasEffect, fiber);\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = fiber.stateNode;\n\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = fiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n        }\n    }\n  }\n}\n\nvar COMPONENT_TYPE = 0;\nvar HAS_PSEUDO_CLASS_TYPE = 1;\nvar ROLE_TYPE = 2;\nvar TEST_NAME_TYPE = 3;\nvar TEXT_TYPE = 4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\nfunction createComponentSelector(component) {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component\n  };\n}\nfunction createHasPseudoClassSelector(selectors) {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors\n  };\n}\nfunction createRoleSelector(role) {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role\n  };\n}\nfunction createTextSelector(text) {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text\n  };\n}\nfunction createTestNameSelector(id) {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot) {\n  var maybeFiber = getInstanceFromNode(hostRoot);\n\n  if (maybeFiber != null) {\n    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n      throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n    }\n\n    return maybeFiber;\n  } else {\n    var fiberRoot = findFiberRoot(hostRoot);\n\n    if (fiberRoot === null) {\n      throw new Error('Could not find React container within specified host subtree.');\n    } // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n\n    return fiberRoot.stateNode.current;\n  }\n}\n\nfunction matchSelector(fiber, selector) {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n\n      break;\n\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(fiber, selector.value);\n\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        var node = fiber.stateNode;\n\n        if (matchAccessibilityRole(node, selector.value)) {\n          return true;\n        }\n      }\n\n      break;\n\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        var textContent = getTextContent(fiber);\n\n        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n          return true;\n        }\n      }\n\n      break;\n\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        var dataTestID = fiber.memoizedProps['data-testname'];\n\n        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n          return true;\n        }\n      }\n\n      break;\n\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector) {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return \"<\" + displayName + \">\";\n\n    case HAS_PSEUDO_CLASS_TYPE:\n      return \":has(\" + (selectorToString(selector) || '') + \")\";\n\n    case ROLE_TYPE:\n      return \"[role=\\\"\" + selector.value + \"\\\"]\";\n\n    case TEXT_TYPE:\n      return \"\\\"\" + selector.value + \"\\\"\";\n\n    case TEST_NAME_TYPE:\n      return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n}\n\nfunction findPaths(root, selectors) {\n  var matchingFibers = [];\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n} // Same as findPaths but with eager bailout on first match\n\n\nfunction hasMatchingPaths(root, selectors) {\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction findAllNodes(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var matchingFibers = findPaths(root, selectors);\n  var instanceRoots = [];\n  var stack = Array.from(matchingFibers);\n  var index = 0;\n\n  while (index < stack.length) {\n    var node = stack[index++];\n\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n\n      instanceRoots.push(node.stateNode);\n    } else {\n      var child = node.child;\n\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\nfunction getFindAllNodesFailureDescription(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var maxSelectorIndex = 0;\n  var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    var unmatchedNames = [];\n\n    for (var i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n  }\n\n  return null;\n}\nfunction findBoundingRects(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var instanceRoots = findAllNodes(hostRoot, selectors);\n  var boundingRects = [];\n\n  for (var i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n    var targetRect = boundingRects[_i];\n    var targetLeft = targetRect.x;\n    var targetRight = targetLeft + targetRect.width;\n    var targetTop = targetRect.y;\n    var targetBottom = targetTop + targetRect.height;\n\n    for (var j = _i - 1; j >= 0; j--) {\n      if (_i !== j) {\n        var otherRect = boundingRects[j];\n        var otherLeft = otherRect.x;\n        var otherRight = otherLeft + otherRect.width;\n        var otherTop = otherRect.y;\n        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(_i, 1);\n          break;\n        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(_i, 1);\n          break;\n        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(_i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\nfunction focusWithin(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var matchingFibers = findPaths(root, selectors);\n  var stack = Array.from(matchingFibers);\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n\n    if (fiber.tag === HostComponent) {\n      var node = fiber.stateNode;\n\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n\n    var child = fiber.child;\n\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\nvar commitHooks = [];\nfunction onCommitRoot$1() {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(function (commitHook) {\n      return commitHook();\n    });\n  }\n}\nfunction observeVisibleRects(hostRoot, selectors, callback, options) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var instanceRoots = findAllNodes(hostRoot, selectors);\n\n  var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n      disconnect = _setupIntersectionObs.disconnect,\n      observe = _setupIntersectionObs.observe,\n      unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n\n  var commitHook = function () {\n    var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n    instanceRoots.forEach(function (target) {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n    nextInstanceRoots.forEach(function (target) {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n  return {\n    disconnect: function () {\n      // Stop listening for React mutations:\n      var index = commitHooks.indexOf(commitHook);\n\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      } // Disconnect the host observer:\n\n\n      disconnect();\n    }\n  };\n}\n\nvar ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\nfunction isLegacyActEnvironment(fiber) {\n  {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n    var jestIsDefined = typeof jest !== 'undefined';\n    return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n  }\n}\nfunction isConcurrentActEnvironment() {\n  {\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      error('The current testing environment is not configured to support ' + 'act(...)');\n    }\n\n    return isReactActEnvironmentGlobal;\n  }\n}\n\nvar ceil = Math.ceil;\nvar ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\nvar NoContext =\n/*             */\n0;\nvar BatchedContext =\n/*               */\n1;\nvar RenderContext =\n/*                */\n2;\nvar CommitContext =\n/*                */\n4;\nvar RootInProgress = 0;\nvar RootFatalErrored = 1;\nvar RootErrored = 2;\nvar RootSuspended = 3;\nvar RootSuspendedWithDelay = 4;\nvar RootCompleted = 5;\nvar RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\nvar executionContext = NoContext; // The root we're working on\n\nvar workInProgressRoot = null; // The fiber we're working on\n\nvar workInProgress = null; // The lanes we're rendering\n\nvar workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\n\nvar subtreeRenderLanes = NoLanes;\nvar subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\nvar workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\nvar workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\n\nvar workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\n\nvar workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\nvar workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\nvar workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\nvar workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\n\nvar workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\n\nvar globalMostRecentFallbackTime = 0;\nvar FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\n\nvar workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\n\nvar RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n}\n\nfunction getRenderTargetTime() {\n  return workInProgressRootRenderTargetTime;\n}\nvar hasUncaughtError = false;\nvar firstUncaughtError = null;\nvar legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\nvar rootDoesHavePassiveEffects = false;\nvar rootWithPendingPassiveEffects = null;\nvar pendingPassiveEffectsLanes = NoLanes;\nvar pendingPassiveProfilerEffects = [];\n\nvar NESTED_UPDATE_LIMIT = 50;\nvar nestedUpdateCount = 0;\nvar rootWithNestedUpdates = null;\nvar NESTED_PASSIVE_UPDATE_LIMIT = 50;\nvar nestedPassiveUpdateCount = 0; // If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\n\nvar currentEventTime = NoTimestamp;\nvar currentEventTransitionLane = NoLanes;\nfunction getWorkInProgressRoot() {\n  return workInProgressRoot;\n}\nfunction requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now$1();\n  } // We're not inside React, so we may be in the middle of a browser event.\n\n\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  } // This is the first update since React yielded. Compute a new start time.\n\n\n  currentEventTime = now$1();\n  return currentEventTime;\n}\nfunction requestUpdateLane(fiber) {\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  var isTransition = requestCurrentTransition() !== NoTransition;\n\n  if (isTransition) {\n    if ( ReactCurrentBatchConfig$2.transition !== null) {\n      var transition = ReactCurrentBatchConfig$2.transition;\n\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    } // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n\n    return currentEventTransitionLane;\n  } // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var updateLane = getCurrentUpdatePriority();\n\n  if (updateLane !== NoLane) {\n    return updateLane;\n  } // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var eventLane = getCurrentEventPriority();\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  }\n\n  return claimNextRetryLane();\n}\n\nfunction scheduleUpdateOnFiber(fiber, lane, eventTime) {\n  checkForNestedUpdates();\n  var root = markUpdateLaneFromFiberToRoot(fiber, lane);\n\n  if (root === null) {\n    return null;\n  } // Mark that the root has a pending update.\n\n\n  markRootUpdated(root, lane, eventTime);\n\n  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (root === workInProgressRoot) {\n      // TODO: Consolidate with `isInterleavedUpdate` check\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if ( (executionContext & RenderContext) === NoContext) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n      }\n\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended$1(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n\n    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n\n  return root;\n}\nfunction scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  var current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n} // This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\n\nfunction markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  var alternate = sourceFiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n\n  {\n    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  } // Walk the parent path to the root and update the child lanes.\n\n\n  var node = sourceFiber;\n  var parent = sourceFiber.return;\n\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (node.tag === HostRoot) {\n    var root = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\nfunction isInterleavedUpdate(fiber, lane) {\n  return (// TODO: Optimize slightly by comparing to root that fiber belongs to.\n    // Requires some refactoring. Not a big deal though since it's rare for\n    // concurrent apps to have more than a single root.\n    workInProgressRoot !== null && (fiber.mode & ConcurrentMode) !== NoMode && ( // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),\n    // then don't treat this as an interleaved update. This pattern is\n    // accompanied by a warning but we haven't fully deprecated it yet. We can\n    // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.\n     (executionContext & RenderContext) === NoContext)\n  );\n} // Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\n\nfunction ensureRootIsScheduled(root, currentTime) {\n  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n\n  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback$1(existingCallbackNode);\n    }\n\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  } // We use the highest priority lane to represent the priority of the callback.\n\n\n  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n  var existingCallbackPriority = root.callbackPriority;\n\n  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n  // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n  // on the `act` queue.\n  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n    {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n      }\n    } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback$1(existingCallbackNode);\n  } // Schedule a new callback.\n\n\n  var newCallbackNode;\n\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n      }\n\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if ( ReactCurrentActQueue$1.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(function () {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if (executionContext === NoContext) {\n            // It's only safe to do this conditionally because we always\n            // check for pending work before we exit the task.\n            flushSyncCallbacks();\n          }\n        });\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n    }\n\n    newCallbackNode = null;\n  } else {\n    var schedulerPriorityLevel;\n\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediatePriority;\n        break;\n\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingPriority;\n        break;\n\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdlePriority;\n        break;\n\n      default:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n    }\n\n    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n} // This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\n\n\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  {\n    resetNestedUpdateFlag();\n  } // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n\n\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  } // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n\n\n  var originalCallbackNode = root.callbackNode;\n  var didFlushPassiveEffects = flushPassiveEffects();\n\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    }\n  } // Determine the next lanes to work on, using the fields stored\n  // on the root.\n\n\n  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  } // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n\n\n  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);\n  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      var fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended$1(root, lanes);\n      ensureRootIsScheduled(root, now$1());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended$1(root, lanes);\n    } else {\n      // The render completed.\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      var renderWasConcurrent = !includesBlockingLane(root, lanes);\n      var finishedWork = root.current.alternate;\n\n      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n        if (exitStatus === RootErrored) {\n          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n          if (_errorRetryLanes !== NoLanes) {\n            lanes = _errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n\n        if (exitStatus === RootFatalErrored) {\n          var _fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now$1());\n          throw _fatalError;\n        }\n      } // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n\n\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now$1());\n\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n  // Before rendering again, save the errors from the previous attempt.\n  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n\n    {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  var exitStatus = renderRootSync(root, errorRetryLanes);\n\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  }\n\n  return exitStatus;\n}\n\nfunction queueRecoverableErrors(errors) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored:\n      {\n        throw new Error('Root did not complete. This is a bug in React.');\n      }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n\n    case RootErrored:\n      {\n        // We should have already attempted to retry this tree. If we reached\n        // this point, it errored again. Commit it.\n        commitRoot(root, workInProgressRootRecoverableErrors);\n        break;\n      }\n\n    case RootSuspended:\n      {\n        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n        // should immediately commit it or wait a bit.\n\n        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()) {\n          // This render only included retries, no updates. Throttle committing\n          // retries so that we don't show too many loading states too quickly.\n          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.\n\n          if (msUntilTimeout > 10) {\n            var nextLanes = getNextLanes(root, NoLanes);\n\n            if (nextLanes !== NoLanes) {\n              // There's additional work on this root.\n              break;\n            }\n\n            var suspendedLanes = root.suspendedLanes;\n\n            if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n              // We should prefer to render the fallback of at the last\n              // suspended level. Ping the last suspended level to try\n              // rendering it again.\n              // FIXME: What if the suspended lanes are Idle? Should not restart.\n              var eventTime = requestEventTime();\n              markRootPinged(root, suspendedLanes);\n              break;\n            } // The render is suspended, it hasn't timed out, and there's no\n            // lower priority work to do. Instead of committing the fallback\n            // immediately, wait for more data to arrive.\n\n\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), msUntilTimeout);\n            break;\n          }\n        } // The work expired. Commit immediately.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors);\n        break;\n      }\n\n    case RootSuspendedWithDelay:\n      {\n        markRootSuspended$1(root, lanes);\n\n        if (includesOnlyTransitions(lanes)) {\n          // This is a transition, so we should exit without committing a\n          // placeholder and without scheduling a timeout. Delay indefinitely\n          // until we receive more data.\n          break;\n        }\n\n        if (!shouldForceFlushFallbacksInDEV()) {\n          // This is not a transition, but we did trigger an avoided state.\n          // Schedule a placeholder to display after a short delay, using the Just\n          // Noticeable Difference.\n          // TODO: Is the JND optimization worth the added complexity? If this is\n          // the only reason we track the event time, then probably not.\n          // Consider removing.\n          var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n          var eventTimeMs = mostRecentEventTime;\n          var timeElapsedMs = now$1() - eventTimeMs;\n\n          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n          if (_msUntilTimeout > 10) {\n            // Instead of committing the fallback immediately, wait for more data\n            // to arrive.\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), _msUntilTimeout);\n            break;\n          }\n        } // Commit the placeholder.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors);\n        break;\n      }\n\n    case RootCompleted:\n      {\n        // The work completed. Ready to commit.\n        commitRoot(root, workInProgressRootRecoverableErrors);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unknown root exit status.');\n      }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork) {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  var node = finishedWork;\n\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      var updateQueue = node.updateQueue;\n\n      if (updateQueue !== null) {\n        var checks = updateQueue.stores;\n\n        if (checks !== null) {\n          for (var i = 0; i < checks.length; i++) {\n            var check = checks[i];\n            var getSnapshot = check.getSnapshot;\n            var renderedValue = check.value;\n\n            try {\n              if (!objectIs(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    var child = node.child;\n\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n\n    if (node === finishedWork) {\n      return true;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  } // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n\n\n  return true;\n}\n\nfunction markRootSuspended$1(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n  markRootSuspended(root, suspendedLanes);\n} // This is the entry point for synchronous tasks that don't go\n// through Scheduler\n\n\nfunction performSyncWorkOnRoot(root) {\n  {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n  var lanes = getNextLanes(root, NoLanes);\n\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now$1());\n    return null;\n  }\n\n  var exitStatus = renderRootSync(root, lanes);\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    var fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended$1(root, lanes);\n    ensureRootIsScheduled(root, now$1());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  } // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n\n\n  var finishedWork = root.current.alternate;\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root, workInProgressRootRecoverableErrors); // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n\n  ensureRootIsScheduled(root, now$1());\n  return null;\n}\n\nfunction flushRoot(root, lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now$1());\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction deferredUpdates(fn) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n  }\n}\nfunction batchedUpdates(fn, a) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n\n    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\nfunction discreteUpdates(fn, a, b, c, d) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n} // Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\n\n// eslint-disable-next-line no-redeclare\nfunction flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n    flushPassiveEffects();\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n  var previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;\n}\nfunction flushControlled(fn) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n  var previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    executionContext = prevExecutionContext;\n\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction pushRenderLanes(fiber, lanes) {\n  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n}\nfunction popRenderLanes(fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  pop(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root, lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n  var timeoutHandle = root.timeoutHandle;\n\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    var interruptedWork = workInProgress.return;\n\n    while (interruptedWork !== null) {\n      var current = interruptedWork.alternate;\n      unwindInterruptedWork(current, interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n\n  workInProgressRoot = root;\n  var rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n  enqueueInterleavedUpdates();\n\n  {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue) {\n  do {\n    var erroredWork = workInProgress;\n\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n\n      ReactCurrentOwner$2.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n          var wakeable = thrownValue;\n          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n        } else {\n          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n        }\n      }\n\n      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n\n      continue;\n    } // Return to the normal work loop.\n\n\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  var prevDispatcher = ReactCurrentDispatcher$2.current;\n  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher$2.current = prevDispatcher;\n}\n\nfunction markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now$1();\n}\nfunction markSkippedUpdateLanes(lane) {\n  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n}\nfunction renderDidSuspend() {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\nfunction renderDidSuspendDelayIfPossible() {\n  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  } // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n\n\n  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\nfunction renderDidError(error) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n} // Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\n\nfunction renderHasNotSuspendedYet() {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    {\n      if (isDevToolsPresent) {\n        var memoizedUpdaters = root.memoizedUpdaters;\n\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n\n\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n    prepareFreshStack(root, lanes);\n  }\n\n  {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n  }\n\n  {\n    markRenderStopped();\n  } // Set this to null to indicate there's no in-progress render.\n\n\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n  return workInProgressRootExitStatus;\n} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n/** @noinline */\n\n\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    {\n      if (isDevToolsPresent) {\n        var memoizedUpdaters = root.memoizedUpdaters;\n\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n\n\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n\n  if (workInProgress !== null) {\n    // Still work remaining.\n    {\n      markRenderYielded();\n    }\n\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    {\n      markRenderStopped();\n    } // Set this to null to indicate there's no in-progress render.\n\n\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n    return workInProgressRootExitStatus;\n  }\n}\n/** @noinline */\n\n\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork) {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  var current = unitOfWork.alternate;\n  setCurrentFiber(unitOfWork);\n  var next;\n\n  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentFiber();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner$2.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork) {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  var completedWork = unitOfWork;\n\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    var current = completedWork.alternate;\n    var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentFiber(completedWork);\n      var next = void 0;\n\n      if ( (completedWork.mode & ProfileMode) === NoMode) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n\n      resetCurrentFiber();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n      if (_next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        _next.flags &= HostEffectMask;\n        workInProgress = _next;\n        return;\n      }\n\n      if ( (completedWork.mode & ProfileMode) !== NoMode) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n        var actualDuration = completedWork.actualDuration;\n        var child = completedWork.child;\n\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    var siblingFiber = completedWork.sibling;\n\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    } // Otherwise, return to the parent\n\n\n    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n    workInProgress = completedWork;\n  } while (completedWork !== null); // We've reached the root.\n\n\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(root, recoverableErrors) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  var previousUpdateLanePriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, recoverableErrors, previousUpdateLanePriority);\n  } finally {\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, recoverableErrors, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  var finishedWork = root.finishedWork;\n  var lanes = root.finishedLanes;\n\n  {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n\n    {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    {\n      if (lanes === NoLanes) {\n        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n      }\n    }\n  }\n\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n  } // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n\n\n  root.callbackNode = null;\n  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n\n  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n\n\n  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n        return null;\n      });\n    }\n  } // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n\n\n  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\n    ReactCurrentBatchConfig$2.transition = null;\n    var previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    var prevExecutionContext = executionContext;\n    executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n\n    var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n\n    {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n\n    commitMutationEffects(root, finishedWork, lanes);\n\n    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n\n    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n    {\n      markLayoutEffectsStarted(lanes);\n    }\n\n    commitLayoutEffects(finishedWork, root, lanes);\n\n    {\n      markLayoutEffectsStopped();\n    }\n    // opportunity to paint.\n\n\n    requestPaint();\n    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n\n    {\n      recordCommitTime();\n    }\n  }\n\n  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } // Read this again, since an effect might have updated it\n\n\n  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n  {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  {\n    onCommitRoot$1();\n  } // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n\n\n  ensureRootIsScheduled(root, now$1());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    var onRecoverableError = root.onRecoverableError;\n\n    for (var i = 0; i < recoverableErrors.length; i++) {\n      var recoverableError = recoverableErrors[i];\n      onRecoverableError(recoverableError);\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    var error$1 = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error$1;\n  } // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n\n\n  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n    flushPassiveEffects();\n  } // Read this again, since a passive effect might have updated it\n\n\n  remainingLanes = root.pendingLanes;\n\n  if (includesSomeLane(remainingLanes, SyncLane)) {\n    {\n      markNestedUpdateScheduled();\n    } // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n\n\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  } // If layout work was scheduled, flush it now.\n\n\n  flushSyncCallbacks();\n\n  {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction flushPassiveEffects() {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\n    var previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig$2.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n    }\n  }\n\n  return false;\n}\nfunction enqueuePendingPassiveProfilerEffect(fiber) {\n  {\n    pendingPassiveProfilerEffects.push(fiber);\n\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  var root = rootWithPendingPassiveEffects;\n  var lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects\n\n  {\n    var profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n\n    for (var i = 0; i < profilerEffects.length; i++) {\n      var _fiber = profilerEffects[i];\n      commitPassiveEffectDurations(root, _fiber);\n    }\n  }\n\n  {\n    markPassiveEffectsStopped();\n  }\n\n  {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n  flushSyncCallbacks(); // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n\n  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1; // TODO: Move to commitPassiveMountEffects\n\n  onPostCommitRoot(root);\n\n  {\n    var stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n}\nfunction markLegacyErrorBoundaryAsFailed(instance) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\n\nvar onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n  var errorInfo = createCapturedValue(error, sourceFiber);\n  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n  enqueueUpdate(rootFiber, update);\n  var eventTime = requestEventTime();\n  var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);\n\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n    return;\n  }\n\n  var fiber = null;\n\n  {\n    fiber = nearestMountedAncestor;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      var ctor = fiber.type;\n      var instance = fiber.stateNode;\n\n      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n        var errorInfo = createCapturedValue(error$1, sourceFiber);\n        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n        enqueueUpdate(fiber, update);\n        var eventTime = requestEventTime();\n        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);\n\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n\n        return;\n      }\n    }\n\n    fiber = fiber.return;\n  }\n\n  {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n  }\n}\nfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n  var pingCache = root.pingCache;\n\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  var eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes);\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  } // TODO: Special case idle priority?\n\n\n  var eventTime = requestEventTime();\n  var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction retryDehydratedSuspenseBoundary(boundaryFiber) {\n  var suspenseState = boundaryFiber.memoizedState;\n  var retryLane = NoLane;\n\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\nfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n  var retryLane = NoLane; // Default\n\n  var retryCache;\n\n  {\n    switch (boundaryFiber.tag) {\n      case SuspenseComponent:\n        retryCache = boundaryFiber.stateNode;\n        var suspenseState = boundaryFiber.memoizedState;\n\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n\n        break;\n\n      case SuspenseListComponent:\n        retryCache = boundaryFiber.stateNode;\n        break;\n\n      default:\n        throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n    }\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n} // Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\n\nfunction jnd(timeElapsed) {\n  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n  }\n\n  {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n\n      error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n  {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n    setCurrentFiber(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    var current = firstChild;\n    var subtreeRoot = null;\n\n    while (current !== null) {\n      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nvar didWarnStateUpdateForNotYetMountedComponent = null;\n\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    var tag = fiber.tag;\n\n    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    } // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n\n\n    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    var previousFiber = current;\n\n    try {\n      setCurrentFiber(fiber);\n\n      error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n    } finally {\n      if (previousFiber) {\n        setCurrentFiber(fiber);\n      } else {\n        resetCurrentFiber();\n      }\n    }\n  }\n}\n\nvar beginWork$1;\n\n{\n  var dummyFiber = null;\n\n  beginWork$1 = function (current, unitOfWork, lanes) {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n\n    try {\n      return beginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      } // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n\n\n      resetContextDependencies();\n      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n      // Unwind the failed stack frame\n\n      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if ( unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      } // Run beginWork again.\n\n\n      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n\n      if (hasCaughtError()) {\n        var replayError = clearCaughtError();\n\n        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      } // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n\n      throw originalError;\n    }\n  };\n}\n\nvar didWarnAboutUpdateInRender = false;\nvar didWarnAboutUpdateInRenderForAnotherComponent;\n\n{\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  {\n    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n            var dedupeKey = renderingComponentName;\n\n            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n            }\n\n            break;\n          }\n\n        case ClassComponent:\n          {\n            if (!didWarnAboutUpdateInRender) {\n              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n\n              didWarnAboutUpdateInRender = true;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction restorePendingUpdaters(root, lanes) {\n  {\n    if (isDevToolsPresent) {\n      var memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(function (schedulingFiber) {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      }); // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\nvar fakeActCallbackNode = {};\n\nfunction scheduleCallback$1(priorityLevel, callback) {\n  {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    var actQueue = ReactCurrentActQueue$1.current;\n\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return scheduleCallback(priorityLevel, callback);\n    }\n  }\n}\n\nfunction cancelCallback$1(callbackNode) {\n  if ( callbackNode === fakeActCallbackNode) {\n    return;\n  } // In production, always call Scheduler. This function will be stripped out.\n\n\n  return cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return  ReactCurrentActQueue$1.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber) {\n  {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n\n      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue$1.current === null) {\n      var previousFiber = current;\n\n      try {\n        setCurrentFiber(fiber);\n\n        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n      } finally {\n        if (previousFiber) {\n          setCurrentFiber(fiber);\n        } else {\n          resetCurrentFiber();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n  {\n    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n    }\n  }\n}\n\n/* eslint-disable react-internal/prod-error-codes */\nvar resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\nvar failedBoundaries = null;\nvar setRefreshHandler = function (handler) {\n  {\n    resolveFamily = handler;\n  }\n};\nfunction resolveFunctionForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction resolveClassForHotReloading(type) {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\nfunction resolveForwardRefForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (type !== null && type !== undefined && typeof type.render === 'function') {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        var currentRender = resolveFunctionForHotReloading(type.render);\n\n        if (type.render !== currentRender) {\n          var syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender\n          };\n\n          if (type.displayName !== undefined) {\n            syntheticType.displayName = type.displayName;\n          }\n\n          return syntheticType;\n        }\n      }\n\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction isCompatibleFamilyForHotReloading(fiber, element) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    var prevType = fiber.elementType;\n    var nextType = element.type; // If we got here, we know types aren't === equal.\n\n    var needsCompareFamilies = false;\n    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n    switch (fiber.tag) {\n      case ClassComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case FunctionComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            // We don't know the inner type yet.\n            // We're going to assume that the lazy inner type is stable,\n            // and so it is sufficient to avoid reconciling it away.\n            // We're not going to unwrap or actually use the new lazy type.\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case ForwardRef:\n        {\n          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ($$typeofNextType === REACT_MEMO_TYPE) {\n            // TODO: if it was but can no longer be simple,\n            // we shouldn't set this.\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      default:\n        return false;\n    } // Check if both types have a family and it's the same one.\n\n\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      var prevFamily = resolveFamily(prevType);\n\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\nfunction markFailedErrorBoundaryForHotReloading(fiber) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n\n    failedBoundaries.add(fiber);\n  }\n}\nvar scheduleRefresh = function (root, update) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    var staleFamilies = update.staleFamilies,\n        updatedFamilies = update.updatedFamilies;\n    flushPassiveEffects();\n    flushSync(function () {\n      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n    });\n  }\n};\nvar scheduleRoot = function (root, element) {\n  {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n\n    flushPassiveEffects();\n    flushSync(function () {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n  {\n    var alternate = fiber.alternate,\n        child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    var needsRender = false;\n    var needsRemount = false;\n\n    if (candidateType !== null) {\n      var family = resolveFamily(candidateType);\n\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n\n    if (failedBoundaries !== null) {\n      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n\n    if (needsRemount || needsRender) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n    }\n\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n    }\n  }\n}\n\nvar findHostInstancesForRefresh = function (root, families) {\n  {\n    var hostInstances = new Set();\n    var types = new Set(families.map(function (family) {\n      return family.current;\n    }));\n    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n    return hostInstances;\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n  {\n    var child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    var didMatch = false;\n\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n    if (foundHostInstances) {\n      return;\n    } // If we didn't find any host children, fallback to closest host parent.\n\n\n    var node = fiber;\n\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var node = fiber;\n    var foundHostInstances = false;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  return false;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nvar createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct$1(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n}\nfunction resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    var $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nfunction createWorkInProgress(current, pendingProps) {\n  var workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    {\n      // DEV-only fields\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  var currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nfunction resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  var current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    var currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  var mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      {\n        mode |= StrictEffectsMode;\n      }\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if ( isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nfunction createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  var resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct$1(type)) {\n      fiberTag = ClassComponent;\n\n      {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        if ( (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_SCOPE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_CACHE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_TRACING_MARKER_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          var info = '';\n\n          {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        }\n    }\n  }\n\n  var fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromElement(element, mode, lanes) {\n  var owner = null;\n\n  {\n    owner = element._owner;\n  }\n\n  var type = element.type;\n  var key = element.key;\n  var pendingProps = element.props;\n  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromFragment(elements, mode, lanes, key) {\n  var fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  {\n    if (typeof pendingProps.id !== 'string') {\n      error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n    }\n  }\n\n  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  var primaryChildInstance = {};\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nfunction createFiberFromText(content, mode, lanes) {\n  var fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromHostInstanceForDeletion() {\n  var fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\nfunction createFiberFromDehydratedFragment(dehydratedNode) {\n  var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nfunction createFiberFromPortal(portal, mode, lanes) {\n  var pendingProps = portal.children !== null ? portal.children : [];\n  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nfunction assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n\n  {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n\nfunction FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  {\n    this.memoizedUpdaters = new Set();\n    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n\n    for (var _i = 0; _i < TotalLanes; _i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nfunction createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n// host config, but because they are passed in at runtime, we have to thread\n// them through the root constructor. Perhaps we should put them all into a\n// single type, like a DynamicHostConfig that is defined by the renderer.\nidentifierPrefix, onRecoverableError, transitionCallbacks) {\n  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n  // stateNode is any.\n\n\n  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  {\n    var _initialState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: null,\n      // not enabled yet\n      transitions: null\n    };\n    uninitializedFiber.memoizedState = _initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n\nvar ReactVersion = '18.0.0-fc46dba67-20220329';\n\nfunction createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\nimplementation) {\n  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  {\n    checkKeyStringCoercion(key);\n  }\n\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n}\n\nvar didWarnAboutNestedUpdates;\nvar didWarnAboutFindNodeInStrictMode;\n\n{\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  var fiber = get(parentComponent);\n  var parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    var Component = fiber.type;\n\n    if (isContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component) {\n  var fiber = get(component);\n\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      var keys = Object.keys(component).join(',');\n      throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n    }\n  }\n\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(component, methodName) {\n  {\n    var fiber = get(component);\n\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        var keys = Object.keys(component).join(',');\n        throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n      }\n    }\n\n    var hostFiber = findCurrentHostFiber(fiber);\n\n    if (hostFiber === null) {\n      return null;\n    }\n\n    if (hostFiber.mode & StrictLegacyMode) {\n      var componentName = getComponentNameFromFiber(fiber) || 'Component';\n\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(hostFiber);\n\n          if (fiber.mode & StrictLegacyMode) {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          } else {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentFiber(previousFiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n\n    return hostFiber.stateNode;\n  }\n}\n\nfunction createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = false;\n  var initialChildren = null;\n  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n}\nfunction createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\ncallback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = true;\n  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n\n  var current = root.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current);\n  var update = createUpdate(eventTime, lane);\n  update.callback = callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n  return root;\n}\nfunction updateContainer(element, container, parentComponent, callback) {\n  {\n    onScheduleRoot(container, element);\n  }\n\n  var current$1 = container.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current$1);\n\n  {\n    markRenderScheduled(lane);\n  }\n\n  var context = getContextForSubtree(parentComponent);\n\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  {\n    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n      didWarnAboutNestedUpdates = true;\n\n      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n    }\n  }\n\n  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: element\n  };\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n    {\n      if (typeof callback !== 'function') {\n        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n      }\n    }\n\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current$1, update);\n  var root = scheduleUpdateOnFiber(current$1, lane, eventTime);\n\n  if (root !== null) {\n    entangleTransitions(root, current$1, lane);\n  }\n\n  return lane;\n}\nfunction getPublicRootInstance(container) {\n  var containerFiber = container.current;\n\n  if (!containerFiber.child) {\n    return null;\n  }\n\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\nfunction attemptSynchronousHydration(fiber) {\n  switch (fiber.tag) {\n    case HostRoot:\n      var root = fiber.stateNode;\n\n      if (isRootDehydrated(root)) {\n        // Flush the first scheduled \"update\".\n        var lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n\n      break;\n\n    case SuspenseComponent:\n      var eventTime = requestEventTime();\n      flushSync(function () {\n        return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);\n      }); // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n\n      var retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber, retryLane) {\n  var suspenseState = fiber.memoizedState;\n\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n  }\n} // Increases the priority of thenables when they resolve within this boundary.\n\n\nfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n  markRetryLaneImpl(fiber, retryLane);\n  var alternate = fiber.alternate;\n\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nfunction attemptContinuousHydration(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  var eventTime = requestEventTime();\n  var lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptHydrationAtCurrentPriority(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction findHostInstanceWithNoPortals(fiber) {\n  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nvar shouldErrorImpl = function (fiber) {\n  return null;\n};\n\nfunction shouldError(fiber) {\n  return shouldErrorImpl(fiber);\n}\n\nvar shouldSuspendImpl = function (fiber) {\n  return false;\n};\n\nfunction shouldSuspend(fiber) {\n  return shouldSuspendImpl(fiber);\n}\nvar overrideHookState = null;\nvar overrideHookStateDeletePath = null;\nvar overrideHookStateRenamePath = null;\nvar overrideProps = null;\nvar overridePropsDeletePath = null;\nvar overridePropsRenamePath = null;\nvar scheduleUpdate = null;\nvar setErrorHandler = null;\nvar setSuspenseHandler = null;\n\n{\n  var copyWithDeleteImpl = function (obj, path, index) {\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(key, 1);\n      } else {\n        delete updated[key];\n      }\n\n      return updated;\n    } // $FlowFixMe number or string is fine here\n\n\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  var copyWithDelete = function (obj, path) {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n    var oldKey = oldPath[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === oldPath.length) {\n      var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n      updated[newKey] = updated[oldKey];\n\n      if (isArray(updated)) {\n        updated.splice(oldKey, 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n      obj[oldKey], oldPath, newPath, index + 1);\n    }\n\n    return updated;\n  };\n\n  var copyWithRename = function (obj, oldPath, newPath) {\n    if (oldPath.length !== newPath.length) {\n      warn('copyWithRename() expects paths of the same length');\n\n      return;\n    } else {\n      for (var i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          warn('copyWithRename() expects paths to be the same except for the deepest key');\n\n          return;\n        }\n      }\n    }\n\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  var copyWithSetImpl = function (obj, path, index, value) {\n    if (index >= path.length) {\n      return value;\n    }\n\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  var copyWithSet = function (obj, path, value) {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  var findHook = function (fiber, id) {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    var currentHook = fiber.memoizedState;\n\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n\n    return currentHook;\n  }; // Support DevTools editable values for useState and useReducer.\n\n\n  overrideHookState = function (fiber, id, path, value) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overrideHookStateDeletePath = function (fiber, id, path) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n  overrideProps = function (fiber, path, value) {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  overridePropsDeletePath = function (fiber, path) {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  overridePropsRenamePath = function (fiber, oldPath, newPath) {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = function (fiber) {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setErrorHandler = function (newShouldErrorImpl) {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = function (newShouldSuspendImpl) {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber) {\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(instance) {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return current;\n}\n\nfunction injectIntoDevTools(devToolsConfig) {\n  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState: overrideHookState,\n    overrideHookStateDeletePath: overrideHookStateDeletePath,\n    overrideHookStateRenamePath: overrideHookStateRenamePath,\n    overrideProps: overrideProps,\n    overridePropsDeletePath: overridePropsDeletePath,\n    overridePropsRenamePath: overridePropsRenamePath,\n    setErrorHandler: setErrorHandler,\n    setSuspenseHandler: setSuspenseHandler,\n    scheduleUpdate: scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber: findHostInstanceByFiber,\n    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh:  findHostInstancesForRefresh ,\n    scheduleRefresh:  scheduleRefresh ,\n    scheduleRoot:  scheduleRoot ,\n    setRefreshHandler:  setRefreshHandler ,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber:  getCurrentFiberForDevTools ,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion\n  });\n}\n\nexports.attemptContinuousHydration = attemptContinuousHydration;\nexports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\nexports.attemptSynchronousHydration = attemptSynchronousHydration;\nexports.batchedUpdates = batchedUpdates;\nexports.createComponentSelector = createComponentSelector;\nexports.createContainer = createContainer;\nexports.createHasPseudoClassSelector = createHasPseudoClassSelector;\nexports.createHydrationContainer = createHydrationContainer;\nexports.createPortal = createPortal;\nexports.createRoleSelector = createRoleSelector;\nexports.createTestNameSelector = createTestNameSelector;\nexports.createTextSelector = createTextSelector;\nexports.deferredUpdates = deferredUpdates;\nexports.discreteUpdates = discreteUpdates;\nexports.findAllNodes = findAllNodes;\nexports.findBoundingRects = findBoundingRects;\nexports.findHostInstance = findHostInstance;\nexports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\nexports.findHostInstanceWithWarning = findHostInstanceWithWarning;\nexports.flushControlled = flushControlled;\nexports.flushPassiveEffects = flushPassiveEffects;\nexports.flushSync = flushSync;\nexports.focusWithin = focusWithin;\nexports.getCurrentUpdatePriority = getCurrentUpdatePriority;\nexports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\nexports.getPublicRootInstance = getPublicRootInstance;\nexports.injectIntoDevTools = injectIntoDevTools;\nexports.isAlreadyRendering = isAlreadyRendering;\nexports.observeVisibleRects = observeVisibleRects;\nexports.registerMutableSourceForHydration = registerMutableSourceForHydration;\nexports.runWithPriority = runWithPriority;\nexports.shouldError = shouldError;\nexports.shouldSuspend = shouldSuspend;\nexports.updateContainer = updateContainer;\n    return exports;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}